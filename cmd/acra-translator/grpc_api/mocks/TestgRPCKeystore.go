// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	keys "github.com/cossacklabs/themis/gothemis/keys"
	mock "github.com/stretchr/testify/mock"
)

// TestgRPCKeystore is an autogenerated mock type for the TestgRPCKeystore type
type TestgRPCKeystore struct {
	mock.Mock
}

// GetClientIDEncryptionPublicKey provides a mock function with given fields: clientID
func (_m *TestgRPCKeystore) GetClientIDEncryptionPublicKey(clientID []byte) (*keys.PublicKey, error) {
	ret := _m.Called(clientID)

	var r0 *keys.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PublicKey); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientIDSymmetricKeys provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetClientIDSymmetricKeys(id []byte) ([][]byte, error) {
	ret := _m.Called(id)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func([]byte) [][]byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHMACSecretKey provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetHMACSecretKey(id []byte) ([]byte, error) {
	ret := _m.Called(id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogSecretKey provides a mock function with given fields:
func (_m *TestgRPCKeystore) GetLogSecretKey() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeerPublicKey provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetPeerPublicKey(id []byte) (*keys.PublicKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PublicKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoisonKeyPair provides a mock function with given fields:
func (_m *TestgRPCKeystore) GetPoisonKeyPair() (*keys.Keypair, error) {
	ret := _m.Called()

	var r0 *keys.Keypair
	if rf, ok := ret.Get(0).(func() *keys.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.Keypair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoisonPrivateKeys provides a mock function with given fields:
func (_m *TestgRPCKeystore) GetPoisonPrivateKeys() ([]*keys.PrivateKey, error) {
	ret := _m.Called()

	var r0 []*keys.PrivateKey
	if rf, ok := ret.Get(0).(func() []*keys.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetPrivateKey(id []byte) (*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerDecryptionPrivateKey provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetServerDecryptionPrivateKey(id []byte) (*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerDecryptionPrivateKeys provides a mock function with given fields: id
func (_m *TestgRPCKeystore) GetServerDecryptionPrivateKeys(id []byte) ([]*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 []*keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) []*keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
