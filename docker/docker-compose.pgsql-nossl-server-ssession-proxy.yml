version: "3"

services:
    # Create keys:
    # - ./.acrakeys/acraserver/${ACRA_CLIENT_ID}_server
    # - ./.acrakeys/acraproxy/${ACRA_CLIENT_ID}_server.pub
    acra_genkeys_server:
        # You can specify docker image tag in the environment
        # variable ACRA_DOCKER_IMAGE_TAG or run by default with 'latest' images
        image: "cossacklabs/acra_genkeys:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        # We do not need network for keys' generation at all
        network_mode: "none"
        environment:
            # INSECURE!!! You MUST define your own ACRA_MASTER_KEY
            # The default is only for testing purposes
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        volumes:
            # Mount the whole ./.acrakeys directory to be able generate keys and
            # place them in services' subdirectories
            - ./.acrakeys:/keys
        # Please specify ACRA_CLIENT_ID environment variable, otherwise run with
        # default 'testclientid' client id
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --acraserver
            --output=/keys/acraserver
            --output_public=/keys/acraproxy
    # Create keys:
    # - ./.acrakeys/acraproxy/${ACRA_CLIENT_ID}
    # - ./.acrakeys/acraserver/${ACRA_CLIENT_ID}.pub
    acra_genkeys_proxy:
        image: "cossacklabs/acra_genkeys:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        volumes:
            - ./.acrakeys:/keys
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --acraproxy
            --output=/keys/acraproxy
            --output_public=/keys/acraserver
    # Create keys:
    # - ./.acrakeys/acraserver/${ACRA_CLIENT_ID}_storage
    # - ./.acrakeys/acrawriter/${ACRA_CLIENT_ID}_storage.pub
    acra_genkeys_writer:
        image: "cossacklabs/acra_genkeys:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        volumes:
            - ./.acrakeys:/keys
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --storage
            --output=/keys/acraserver
            --output_public=/keys/acrawriter

    # Create file with accounts for HTTP access and key for decrypt it
    # - ./.acrakeys/acraserver/httpauth.accounts
    # - ./.acrakeys/acraserver/auth_key
    acra_genauth:
        image: "cossacklabs/acra_genauth:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        volumes:
            - ./.acrakeys:/keys
        command: >-
            --set
            --user=test
            --password=test
            --file=/keys/acraserver/httpauth.accounts
            --keys_dir=/keys/acraserver/

    # Postgresql container
    postgres:
        image: postgres
        # INSECURE!!! You MUST define your own DB name and credentials
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-test}
            POSTGRES_USER: ${POSTGRES_USER:-test}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
        # Open the port outside for writer
        ports:
            - "5432:5432"
        # We use internal 'acraserver-postgres' network for acraserver and
        # DB interconnection and external network 'world' for port exposing
        networks:
            - acraserver-postgres
            - world

    acraserver:
        image: "cossacklabs/acraserver:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        # Restart server after correct termination, for example after the config
        # was changed through the API
        restart: always
        depends_on:
            - acra_genkeys_server
            - acra_genkeys_proxy
            - acra_genkeys_writer
            - acra_genauth
            - postgres
        environment:
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        # We use internal networks:
        # - 'acraserver-postgres' - for acraserver and DB interconnection
        # - 'acraproxy-acraserver' - for acraserver and acraproxy interconnection
        networks:
            - acraproxy-acraserver
            - acraserver-postgres
        volumes:
            # Mount the directory with only the keys for this service. Must be
            # rewriteable in case of using API, otherwise should be read-only.
            - ./.acrakeys/acraserver:/keys
            # Directory with configuration, rewriteable
            - ./.acraconfigs/acraserver:/config
        command: >-
            --db_host=postgres
            --keys_dir=/keys
            --auth_keys=/keys/httpauth.accounts
            --enable_http_api
            --connection_api_string=tcp://0.0.0.0:9090
            --config=/config/acraserver.yaml
            -v

    acraproxy:
        image: "cossacklabs/acraproxy:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        restart: always
        depends_on:
            - acra_genkeys_server
            - acra_genkeys_proxy
            - acraserver
        # Open the port outside for client application
        ports:
            - "9494:9494"
        environment:
            ACRA_MASTER_KEY: ${ACRA_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
        # We use internal networks:
        # - 'acraproxy-acraserver' - for interconnection with acraserver
        # - 'acraconfigui-acraserver' - for interconnection with acra_configui
        # and external network 'world' for port exposing
        networks:
            - acraproxy-acraserver
            - acraconfigui-acraproxy
            - world
        volumes:
            # Mount the directory with only the keys for this service
            - ./.acrakeys/acraproxy:/keys:ro
        command: >-
            --acra_host=acraserver
            --keys_dir=/keys
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --connection_string=tcp://0.0.0.0:9494
            --enable_http_api
            --connection_api_string=tcp://0.0.0.0:9191
            -v

    # Optional lightweight HTTP web server for managing AcraServer's
    # certain configuration options
    acra_configui:
        image: "cossacklabs/acra_configui:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        restart: on-failure
        depends_on:
            - acraserver
        # Open the port outside for client application
        ports:
            - "8000:8000"
        # We use internal 'acraconfigui-acraproxy' network for acraproxy and
        # acra_configui interconnection and external network 'world' for
        # port exposing
        networks:
            - acraconfigui-acraproxy
            - world
        command: >-
            --acra_host=acraproxy
            --host=0.0.0.0

networks:
    world:
    acraproxy-acraserver:
        internal: true
    acraserver-postgres:
        internal: true
    acraconfigui-acraproxy:
        internal: true
