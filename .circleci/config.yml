version: 2
jobs:
  general_validation:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: cossacklabs/vault-ssl:1.6.2
        command: server -dev -dev-root-token-id="root_token"
        environment:
          VAULT_LOCAL_CONFIG: '{"listener": [{"tcp":{"address": "0.0.0.0:8201","tls_disable":"0", "tls_cert_file":"/data/vault-volume/vault_crt.pem", "tls_key_file":"/data/vault-volume/vault_key.pem"}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h"}, "ui": true, "storage":{"file":{"path":"/vault/data"}}}'
          VAULT_DEV_ROOT_TOKEN_ID: 'root_token'
          VAULT_TOKEN: 'root_token'
      - image: redis:6.0.16-alpine
    environment:
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_DB_PORT: "5432"
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_VAULT_PORT: 8201
      TEST_VAULT_HOST: localhost
    steps:
      # prepare
      - checkout
      # HashiCorp Vault and Redis are neighbor containers and need some time to start
      # wait for the containers to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_vault_connection.sh
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_redis_connection.sh
      # validation
      - run: .circleci/check_gofmt.sh
      - run: .circleci/check_configs.sh | tee /home/user/tests_output
      - run: .circleci/check_golint.sh
      - run: .circleci/check_misspell.sh
      - run: .circleci/check_ineffassign.sh
        # run go test with race detector only with latest version because it is slower and we expect that latest version
        # has the newest and all existing algorithms for race detection
      - run:
          command: .circleci/check_gotest.sh
          environment:
            - TEST_BUILD_TAGS: "integration,boltdb,redis,vault"
            - TEST_EXTRA_BUILD_FLAGS: "-race"
            - GO_VERSIONS: 1.17.3
        # and run all other versions without race detector
      - run:
          command: .circleci/check_gotest.sh
          environment:
            - GO_VERSIONS: 1.15.2 1.16.9
            - TEST_BUILD_TAGS: "integration,boltdb,redis,vault"
      # check python wrapper
      - run: PYTHONPATH=`pwd`/wrappers/python python3 wrappers/python/acrawriter/tests.py

      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  postgresql-ssl:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: cossacklabs/postgresql-ssl:11-1
        environment:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "5432"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_postgresql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  postgresql:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: postgres:11-alpine
        environment:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "5432"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "off"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_postgresql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  postgresql-vault:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: cossacklabs/postgresql-ssl:11-1
        environment:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
      - image: vault:1.6.2
        environment:
          VAULT_LOCAL_CONFIG: '{"listener":[{"tcp": {"address": "0.0.0.0:8201","tls_disable": "1"}}],"ui":true,"storage":{"file":{"path":"/vault/data"}}}'
          VAULT_TOKEN: 'root_token'
        command: server -dev -dev-root-token-id="root_token"
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "5432"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_WITH_VAULT: "on"
      VAULT_API_TOKEN: cm9vdF90b2tlbgo= # base64 of the root_token
      TEST_POSTGRESQL: "off"
      TEST_NAME_PATTERN: "VaultMasterKeyLoader"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_postgresql_connection.sh
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (kv secret_engine v1)
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (kv secret_engine v2)
          environment:
            VAULT_KV_ENGINE_VERSION: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output


  postgresql-vault-ssl:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: cossacklabs/postgresql-ssl:11-1
        environment:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
      - image: cossacklabs/vault-ssl:1.6.2
        environment:
          VAULT_LOCAL_CONFIG: '{"listener": [{"tcp":{"address": "0.0.0.0:8201","tls_disable":"0", "tls_cert_file":"/data/vault-volume/vault_crt.pem", "tls_key_file":"/data/vault-volume/vault_key.pem"}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h"}, "ui": true, "storage":{"file":{"path":"/vault/data"}}}'
          VAULT_TOKEN: 'root_token'
        command: server -dev -dev-root-token-id="root_token"
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "5432"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_WITH_VAULT: "on"
      TEST_SSL_VAULT: "on"
      VAULT_ADDRESS: https://localhost:8201/
      VAULT_API_TOKEN: cm9vdF90b2tlbgo= # base64 of the root_token
      TEST_POSTGRESQL: "off"
      TEST_NAME_PATTERN: "VaultMasterKeyLoader"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_postgresql_connection.sh
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (kv secret_engine v1)
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (kv secret_engine v2)
          environment:
            VAULT_KV_ENGINE_VERSION: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  mariadb-ssl:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      # use the same credentials for mysql db as for postgresql (which support was added first)
      # has latest tag on 2018.03.29
      - image: cossacklabs/mariadb-ssl:10.3-1
        environment:
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_ROOT_PASSWORD: root
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "3306"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      TEST_MYSQL: "true"
      TEST_MARIADB: "true"
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_mysql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  mariadb:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      # use the same credentials for mysql db as for postgresql (which support was added first)
      # has latest tag on 2018.03.29
      - image: mariadb:latest
        environment:
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_ROOT_PASSWORD: root
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "3306"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_MYSQL: "true"
      TEST_MARIADB: "true"
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "off"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_mysql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  mysql-ssl:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      # use the same credentials for mysql db as for postgresql (which support was added first)
      # has latest tag on 2018.03.29
      - image: cossacklabs/mysql-ssl:5.7.31-1
        environment:
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_ROOT_PASSWORD: root
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "3306"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      TEST_MYSQL: "true"
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "on"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_mysql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  mysql:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
      - image: mysql:5.7.25
        environment:
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_ROOT_PASSWORD: root
      - image: redis:6.0.16-alpine
    environment:
      TEST_DB_USER: test
      TEST_DB_USER_PASSWORD: test
      TEST_DB_NAME: test
      TEST_DB_PORT: "3306"
      FILEPATH_ERROR_FLAG: /tmp/test_fail
      GO_VERSIONS: 1.15.2 1.16.9 1.17.3
      TEST_MYSQL: "true"
      TEST_RANDOM_DATA_FOLDER: /tmp/test_data
      TEST_TLS: "off"
      TEST_REDIS: "on"
    steps:
      # prepare
      - checkout
      # database in neighbor container need some time to start
      # wait for the DB to be reachable, up to 15 pings with 1 second interval
      - run: NUM_PINGS=15 DELAY=1 .circleci/check_mysql_connection.sh
      # testing
      # generate test data for integration tests
      - run: python3 tests/generate_random_data.py
      # each iteration pass to test different ports for forks to avoid problems with TCP TIME WAIT between tests
      - run:
          name: Integration tests (keystore v1)
          environment:
            TEST_KEYSTORE: v1
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - run:
          name: Integration tests (keystore v2)
          environment:
            TEST_KEYSTORE: v2
          command: |
            .circleci/integration.sh
            if [ -f  $FILEPATH_ERROR_FLAG ]; then cat "$FILEPATH_ERROR_FLAG"; rm "$FILEPATH_ERROR_FLAG"; exit 1; fi
      - store_test_results:
          path: /home/user/tests_output
      - store_artifacts:
          path: /home/user/tests_output

  build_image:
    docker:
      - image: cossacklabs/ci-py-go-themis:latest
    steps:
      # prepare
      - checkout
      # https://circleci.com/docs/2.0/building-docker-images/#docker-version
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="18.09.3"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run: make docker-build

workflows:
  version: 2
  tests:
    jobs:
      - general_validation
      - postgresql
      - postgresql-ssl
      - mysql
      - mysql-ssl
      - mariadb
      - mariadb-ssl
      - build_image
      - postgresql-vault
      - postgresql-vault-ssl
