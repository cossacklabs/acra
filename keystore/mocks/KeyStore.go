// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	acrakeystore "github.com/cossacklabs/acra/keystore"
	keys "github.com/cossacklabs/themis/gothemis/keys"

	mock "github.com/stretchr/testify/mock"
)

// KeyStore is an autogenerated mock type for the KeyStore type
type KeyStore struct {
	mock.Mock
}

// GenerateClientIDSymmetricKey provides a mock function with given fields: id
func (_m *KeyStore) GenerateClientIDSymmetricKey(id []byte) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateDataEncryptionKeys provides a mock function with given fields: clientID
func (_m *KeyStore) GenerateDataEncryptionKeys(clientID []byte) error {
	ret := _m.Called(clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateHmacKey provides a mock function with given fields: id
func (_m *KeyStore) GenerateHmacKey(id []byte) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateLogKey provides a mock function with given fields:
func (_m *KeyStore) GenerateLogKey() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GeneratePoisonSymmetricKey provides a mock function with given fields:
func (_m *KeyStore) GeneratePoisonSymmetricKey() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateZoneIDSymmetricKey provides a mock function with given fields: id
func (_m *KeyStore) GenerateZoneIDSymmetricKey(id []byte) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateZoneKey provides a mock function with given fields:
func (_m *KeyStore) GenerateZoneKey() ([]byte, []byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClientIDEncryptionPublicKey provides a mock function with given fields: clientID
func (_m *KeyStore) GetClientIDEncryptionPublicKey(clientID []byte) (*keys.PublicKey, error) {
	ret := _m.Called(clientID)

	var r0 *keys.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PublicKey); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientIDSymmetricKeys provides a mock function with given fields: id
func (_m *KeyStore) GetClientIDSymmetricKeys(id []byte) ([][]byte, error) {
	ret := _m.Called(id)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func([]byte) [][]byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHMACSecretKey provides a mock function with given fields: id
func (_m *KeyStore) GetHMACSecretKey(id []byte) ([]byte, error) {
	ret := _m.Called(id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogSecretKey provides a mock function with given fields:
func (_m *KeyStore) GetLogSecretKey() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeerPublicKey provides a mock function with given fields: id
func (_m *KeyStore) GetPeerPublicKey(id []byte) (*keys.PublicKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PublicKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoisonKeyPair provides a mock function with given fields:
func (_m *KeyStore) GetPoisonKeyPair() (*keys.Keypair, error) {
	ret := _m.Called()

	var r0 *keys.Keypair
	if rf, ok := ret.Get(0).(func() *keys.Keypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.Keypair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoisonPrivateKeys provides a mock function with given fields:
func (_m *KeyStore) GetPoisonPrivateKeys() ([]*keys.PrivateKey, error) {
	ret := _m.Called()

	var r0 []*keys.PrivateKey
	if rf, ok := ret.Get(0).(func() []*keys.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields: id
func (_m *KeyStore) GetPrivateKey(id []byte) (*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerDecryptionPrivateKey provides a mock function with given fields: id
func (_m *KeyStore) GetServerDecryptionPrivateKey(id []byte) (*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerDecryptionPrivateKeys provides a mock function with given fields: id
func (_m *KeyStore) GetServerDecryptionPrivateKeys(id []byte) ([]*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 []*keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) []*keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneIDSymmetricKeys provides a mock function with given fields: id
func (_m *KeyStore) GetZoneIDSymmetricKeys(id []byte) ([][]byte, error) {
	ret := _m.Called(id)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func([]byte) [][]byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZonePrivateKey provides a mock function with given fields: id
func (_m *KeyStore) GetZonePrivateKey(id []byte) (*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 *keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZonePrivateKeys provides a mock function with given fields: id
func (_m *KeyStore) GetZonePrivateKeys(id []byte) ([]*keys.PrivateKey, error) {
	ret := _m.Called(id)

	var r0 []*keys.PrivateKey
	if rf, ok := ret.Get(0).(func([]byte) []*keys.PrivateKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keys.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZonePublicKey provides a mock function with given fields: zoneID
func (_m *KeyStore) GetZonePublicKey(zoneID []byte) (*keys.PublicKey, error) {
	ret := _m.Called(zoneID)

	var r0 *keys.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *keys.PublicKey); ok {
		r0 = rf(zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keys.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasZonePrivateKey provides a mock function with given fields: id
func (_m *KeyStore) HasZonePrivateKey(id []byte) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListKeys provides a mock function with given fields:
func (_m *KeyStore) ListKeys() ([]acrakeystore.KeyDescription, error) {
	ret := _m.Called()

	var r0 []acrakeystore.KeyDescription
	if rf, ok := ret.Get(0).(func() []acrakeystore.KeyDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]acrakeystore.KeyDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields:
func (_m *KeyStore) Reset() {
	_m.Called()
}

// RotateZoneKey provides a mock function with given fields: zoneID
func (_m *KeyStore) RotateZoneKey(zoneID []byte) ([]byte, error) {
	ret := _m.Called(zoneID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataEncryptionKeys provides a mock function with given fields: clientID, keypair
func (_m *KeyStore) SaveDataEncryptionKeys(clientID []byte, keypair *keys.Keypair) error {
	ret := _m.Called(clientID, keypair)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *keys.Keypair) error); ok {
		r0 = rf(clientID, keypair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveZoneKeypair provides a mock function with given fields: zoneID, keypair
func (_m *KeyStore) SaveZoneKeypair(zoneID []byte, keypair *keys.Keypair) error {
	ret := _m.Called(zoneID, keypair)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *keys.Keypair) error); ok {
		r0 = rf(zoneID, keypair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
