// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	base "github.com/cossacklabs/acra/decryptor/base"
	config "github.com/cossacklabs/acra/encryptor/base/config"

	mock "github.com/stretchr/testify/mock"
)

// BoundValue is an autogenerated mock type for the BoundValue type
type BoundValue struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *BoundValue) Copy() base.BoundValue {
	ret := _m.Called()

	var r0 base.BoundValue
	if rf, ok := ret.Get(0).(func() base.BoundValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.BoundValue)
		}
	}

	return r0
}

// Encode provides a mock function with given fields:
func (_m *BoundValue) Encode() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Format provides a mock function with given fields:
func (_m *BoundValue) Format() base.BoundValueFormat {
	ret := _m.Called()

	var r0 base.BoundValueFormat
	if rf, ok := ret.Get(0).(func() base.BoundValueFormat); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(base.BoundValueFormat)
	}

	return r0
}

// GetData provides a mock function with given fields: setting
func (_m *BoundValue) GetData(setting config.ColumnEncryptionSetting) ([]byte, error) {
	ret := _m.Called(setting)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(config.ColumnEncryptionSetting) []byte); ok {
		r0 = rf(setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(config.ColumnEncryptionSetting) error); ok {
		r1 = rf(setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields:
func (_m *BoundValue) GetType() byte {
	ret := _m.Called()

	var r0 byte
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	return r0
}

// SetData provides a mock function with given fields: newData, setting
func (_m *BoundValue) SetData(newData []byte, setting config.ColumnEncryptionSetting) error {
	ret := _m.Called(newData, setting)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, config.ColumnEncryptionSetting) error); ok {
		r0 = rf(newData, setting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBoundValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoundValue creates a new instance of BoundValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoundValue(t mockConstructorTestingTNewBoundValue) *BoundValue {
	mock := &BoundValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
