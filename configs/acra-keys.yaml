version: 0.91.0
# path to config
config_file: 

# dump config
dump_config: false

# Generate with yaml config markdown text file with descriptions of all args
generate_markdown_args_table: false

# use machine-readable JSON output
json: false

# path to key directory
keys_dir: .acrakeys

# path to key directory for public keys
keys_dir_public: 

# Number of Redis database for keys
redis_db_keys: 0

# <host>:<port> used to connect to Redis
redis_host_port: 

# Password to Redis database
redis_password: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault
vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation
vault_tls_ca_path: 

# Path to client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_tls_client_cert: 

# Path to private key of the client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_tls_client_key: 

# Use TLS to encrypt transport with HashiCorp Vault
vault_tls_transport_enable: false

# export all keys
all: false

# path to output file for exported key bundle
key_bundle_file: 

# path to output file for key encryption keys
key_bundle_secret: 

# export private key data
private_keys: false

# try migration without writing to the output keystore
dry_run: false

# path to key directory (new keystore, destination)
dst_keys_dir: 

# path to key directory for public keys (new keystore, destination)
dst_keys_dir_public: 

# keystore format to use: v1 (current), v2 (new)
dst_keystore: 

# Number of Redis database for keys (new keystore, destination)
dst_redis_db_keys: 0

# <host>:<port> used to connect to Redis (new keystore, destination)
dst_redis_host_port: 

# Password to Redis database (new keystore, destination)
dst_redis_password: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination ACRA_MASTER_KEY)
dst_vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination ACRA_MASTER_KEY)
dst_vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (new keystore, destination ACRA_MASTER_KEY)
dst_vault_tls_ca_path: 

# Path to client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination ACRA_MASTER_KEY)
dst_vault_tls_client_cert: 

# Path to private key of the client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination ACRA_MASTER_KEY)
dst_vault_tls_client_key: 

# Use TLS to encrypt transport with HashiCorp Vault (new keystore, destination ACRA_MASTER_KEY)
dst_vault_tls_transport_enable: false

# write to output keystore even if it exists
force: false

# path to key directory (old keystore, source)
src_keys_dir: 

# path to key directory for public keys (old keystore, source)
src_keys_dir_public: 

# keystore format to use: v1 (current), v2 (new)
src_keystore: 

# Number of Redis database for keys (old keystore, source)
src_redis_db_keys: 0

# <host>:<port> used to connect to Redis (old keystore, source)
src_redis_host_port: 

# Password to Redis database (old keystore, source)
src_redis_password: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source ACRA_MASTER_KEY)
src_vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source ACRA_MASTER_KEY)
src_vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (old keystore, source ACRA_MASTER_KEY)
src_vault_tls_ca_path: 

# Path to client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source ACRA_MASTER_KEY)
src_vault_tls_client_cert: 

# Path to private key of the client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source ACRA_MASTER_KEY)
src_vault_tls_client_key: 

# Use TLS to encrypt transport with HashiCorp Vault (old keystore, source ACRA_MASTER_KEY)
src_vault_tls_transport_enable: false

# read private key of the keypair
private: false

# read public key of the keypair
public: false

# Generate transport keypair for AcraConnector (deprecated since 0.91.0, will be removed soon)
acraconnector_transport_key: false

# Generate transport keypair for AcraServer (deprecated since 0.91.0, will be removed soon)
acraserver_transport_key: false

# Generate transport keypair for AcraTranslator (deprecated since 0.91.0, will be removed soon)
acratranslator_transport_key: false

# Generate symmetric key for log integrity checks
audit_log_symmetric_key: false

# Client ID
client_id: 

# Generate keypair for data encryption/decryption (for a client)
client_storage_key: false

# Generate symmetric key for data encryption (using AcraBlocks)
client_storage_symmetric_key: false

# Keystore format: v1 (current), v2 (new)
keystore: 

# Generate new random master key and save to file
master_key_path: 

# Generate keypair and symmetric key for poison records
poison_record_keys: false

# use machine-readable JSON output
print_json: false

# Generate symmetric key for searchable encryption HMAC
search_hmac_symmetric_key: false

# Path to TLS certificate to use as client_id identifier
tls_cert: 

# Decide which field of TLS certificate to use as ClientID (distinguished_name|serial_number). Default is distinguished_name.
tls_identifier_extractor_type: distinguished_name

# Generate new Acra storage zone
zone: false

# Zone ID
zone_id: 

# Rotate existing Acra zone storage keypair
zone_storage_key: false

# Rotate existing Acra zone symmetric key
zone_symmetric_key: false

