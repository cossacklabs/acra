version: 0.94.0
# path to config
config_file: 

# dump config
dump_config: false

# Generate with yaml config markdown text file with descriptions of all args
generate_markdown_args_table: false

# use machine-readable JSON output
json: false

# path to key directory
keys_dir: .acrakeys

# path to key directory for public keys
keys_dir_public: 

# Keystore encryptor strategy: <env_master_key|kms_encrypted_master_key|vault_master_key|kms_per_client
keystore_encryption_type: env_master_key

# KMS credentials JSON file path
kms_credentials_path: 

# KMS type for using: <aws>
kms_type: 

# Number of Redis database for keys
redis_db_keys: 0

# <host>:<port> used to connect to Redis
redis_host_port: 

# Password to Redis database
redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
redis_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
redis_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
redis_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
redis_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
redis_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
redis_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
redis_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
redis_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
redis_tls_crl_client_url: 

# Use TLS to connect to Redis
redis_tls_enable: false

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
redis_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
redis_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
redis_tls_ocsp_client_required: denyUnknown

# OCSP service URL
redis_tls_ocsp_client_url: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault
vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (deprecated since 0.94.0, use `vault_tls_client_ca`)
vault_tls_ca_path: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
vault_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
vault_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
vault_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
vault_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
vault_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
vault_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
vault_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
vault_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
vault_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
vault_tls_crl_client_url: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
vault_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
vault_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
vault_tls_ocsp_client_required: denyUnknown

# OCSP service URL
vault_tls_ocsp_client_url: 

# Use TLS to encrypt transport with HashiCorp Vault
vault_tls_transport_enable: false

# export all keys
all: false

# path to output file for exported key bundle
key_bundle_file: 

# path to output file for key encryption keys
key_bundle_secret: 

# export private key data (symmetric and private asymmetric keys)
private_keys: false

# try migration without writing to the output keystore
dry_run: false

# path to key directory (new keystore, destination)
dst_keys_dir: 

# path to key directory for public keys (new keystore, destination)
dst_keys_dir_public: 

# keystore format to use: v1 (current), v2 (new)
dst_keystore: 

# Keystore encryptor strategy: <env_master_key|kms_encrypted_master_key|vault_master_key|kms_per_client (new keystore, destination)
dst_keystore_encryption_type: env_master_key

# KMS credentials JSON file path (new keystore, destination)
dst_kms_credentials_path: 

# KMS type for using: <aws (new keystore, destination)>
dst_kms_type: 

# Number of Redis database for keys (new keystore, destination)
dst_redis_db_keys: 0

# <host>:<port> used to connect to Redis (new keystore, destination)
dst_redis_host_port: 

# Password to Redis database (new keystore, destination)
dst_redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
dst_redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
dst_redis_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
dst_redis_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
dst_redis_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
dst_redis_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
dst_redis_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
dst_redis_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
dst_redis_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
dst_redis_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
dst_redis_tls_crl_client_url: 

# Use TLS to connect to Redis (new keystore, destination)
dst_redis_tls_enable: false

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
dst_redis_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
dst_redis_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
dst_redis_tls_ocsp_client_required: denyUnknown

# OCSP service URL
dst_redis_tls_ocsp_client_url: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination)
dst_vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault (new keystore, destination)
dst_vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (deprecated since 0.94.0, use `vault_tls_client_ca`) (new keystore, destination)
dst_vault_tls_ca_path: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
dst_vault_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
dst_vault_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
dst_vault_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
dst_vault_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
dst_vault_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
dst_vault_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
dst_vault_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
dst_vault_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
dst_vault_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
dst_vault_tls_crl_client_url: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
dst_vault_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
dst_vault_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
dst_vault_tls_ocsp_client_required: denyUnknown

# OCSP service URL
dst_vault_tls_ocsp_client_url: 

# Use TLS to encrypt transport with HashiCorp Vault (new keystore, destination)
dst_vault_tls_transport_enable: false

# write to output keystore even if it exists
force: false

# path to key directory (old keystore, source)
src_keys_dir: 

# path to key directory for public keys (old keystore, source)
src_keys_dir_public: 

# keystore format to use: v1 (current), v2 (new)
src_keystore: 

# Keystore encryptor strategy: <env_master_key|kms_encrypted_master_key|vault_master_key|kms_per_client (old keystore, source)
src_keystore_encryption_type: env_master_key

# KMS credentials JSON file path (old keystore, source)
src_kms_credentials_path: 

# KMS type for using: <aws (old keystore, source)>
src_kms_type: 

# Number of Redis database for keys (old keystore, source)
src_redis_db_keys: 0

# <host>:<port> used to connect to Redis (old keystore, source)
src_redis_host_port: 

# Password to Redis database (old keystore, source)
src_redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
src_redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
src_redis_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
src_redis_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
src_redis_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
src_redis_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
src_redis_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
src_redis_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
src_redis_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
src_redis_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
src_redis_tls_crl_client_url: 

# Use TLS to connect to Redis (old keystore, source)
src_redis_tls_enable: false

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
src_redis_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
src_redis_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
src_redis_tls_ocsp_client_required: denyUnknown

# OCSP service URL
src_redis_tls_ocsp_client_url: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source)
src_vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault (old keystore, source)
src_vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (deprecated since 0.94.0, use `vault_tls_client_ca`) (old keystore, source)
src_vault_tls_ca_path: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
src_vault_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
src_vault_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
src_vault_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
src_vault_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
src_vault_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
src_vault_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
src_vault_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
src_vault_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
src_vault_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
src_vault_tls_crl_client_url: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
src_vault_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
src_vault_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
src_vault_tls_ocsp_client_required: denyUnknown

# OCSP service URL
src_vault_tls_ocsp_client_url: 

# Use TLS to encrypt transport with HashiCorp Vault (old keystore, source)
src_vault_tls_transport_enable: false

# read private key of the keypair
private: false

# read public key of the keypair
public: false

# Generate symmetric key for log integrity checks
audit_log_symmetric_key: false

# Client ID
client_id: 

# Generate keypair for data encryption/decryption (for a client)
client_storage_key: false

# Generate symmetric key for data encryption (using AcraBlocks)
client_storage_symmetric_key: false

# Keystore format: v1 (current), v2 (new)
keystore: 

# Generate keypair and symmetric key for poison records
poison_record_keys: false

# use machine-readable JSON output
print_json: false

# Generate symmetric key for searchable encryption HMAC
search_hmac_symmetric_key: false

# Path to TLS certificate to use as client_id identifier
tls_cert: 

# Decide which field of TLS certificate to use as ClientID (distinguished_name|serial_number). Default is distinguished_name.
tls_identifier_extractor_type: distinguished_name

