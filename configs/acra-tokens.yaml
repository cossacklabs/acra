version: 0.95.0
# path to config
config_file: 

# dump config
dump_config: false

# Generate with yaml config markdown text file with descriptions of all args
generate_markdown_args_table: false

# limit action to tokens accessed after specified date
accessed_after: 

# limit action to tokens accessed before specified date
accessed_before: 

# limit action to tokens created after specified date
created_after: 

# limit action to tokens created before specified date
created_before: 

# Number of Redis database for tokens
redis_db_tokens: 0

# <host>:<port> used to connect to Redis
redis_host_port: 

# Password to Redis database
redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
redis_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
redis_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
redis_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
redis_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
redis_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
redis_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
redis_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
redis_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
redis_tls_crl_client_url: 

# Use TLS to connect to Redis
redis_tls_enable: false

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
redis_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
redis_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
redis_tls_ocsp_client_required: denyUnknown

# OCSP service URL
redis_tls_ocsp_client_url: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is tls.RequireAndVerifyClientCert
tls_auth: 4

# Path to root certificate which will be used with system root certificates to validate peer's certificate
tls_ca: 

# Path to certificate
tls_cert: 

# How many CRLs to cache in memory (use 0 to disable caching)
tls_crl_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
tls_crl_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
tls_crl_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
tls_crl_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
tls_crl_url: 

# Path to private key that will be used for TLS connections
tls_key: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
tls_ocsp_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
tls_ocsp_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
tls_ocsp_required: denyUnknown

# OCSP service URL
tls_ocsp_url: 

# path to BoltDB used for token data
token_db: 

# remove all requested tokens within specified date range, regardless of their state (enabled and disabled)
all: false

# do not actually remove tokens, only output status
dry_run: false

# remove only disabled tokens within specified date range
only_disabled: false

