version: 0.93.0
# path to config
config_file: 

# dump config
dump_config: false

# Use filesystem keystore (deprecated, ignored)
fs_keystore_enable: true

# Generate with yaml config markdown text file with descriptions of all args
generate_markdown_args_table: false

# Folder where will be saved generated zone keys
keys_output_dir: .acrakeys

# Keystore encryptor strategy; : <master_key|kms_encrypted_master_key|vault_master_key|kms_per_client
keystore_encryption_type: master_key

# KMS credentials JSON file path
kms_credentials_path: 

# KMS type for using: <aws>
kms_type: 

# Number of Redis database for keys
redis_db_keys: 0

# <host>:<port> used to connect to Redis
redis_host_port: 

# Password to Redis database
redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is tls.RequireAndVerifyClientCert
redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate
redis_tls_client_ca: 

# Path to certificate
redis_tls_client_cert: 

# How many CRLs to cache in memory (use 0 to disable caching)
redis_tls_client_crl_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
redis_tls_client_crl_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
redis_tls_client_crl_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
redis_tls_client_crl_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
redis_tls_client_crl_url: 

# Path to private key that will be used for TLS connections
redis_tls_client_key: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
redis_tls_client_ocsp_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
redis_tls_client_ocsp_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
redis_tls_client_ocsp_required: denyUnknown

# OCSP service URL
redis_tls_client_ocsp_url: 

# Use TLS to connect to Redis
redis_tls_enable: false

# Log to stderr all INFO, WARNING and ERROR logs
v: false

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault
vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation
vault_tls_ca_path: 

# Path to client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_tls_client_cert: 

# Path to private key of the client TLS certificate for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_tls_client_key: 

# Use TLS to encrypt transport with HashiCorp Vault
vault_tls_transport_enable: false

