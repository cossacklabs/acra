version: 0.94.0
# path to config
config_file: 

# Connection string to db
db_connection_string: 

# perform rotation without saving rotated AcraStructs and keys
dry-run: false

# dump config
dump_config: false

# Path to file with map of <ZoneId>: <FilePaths> in json format {"zone_id1": ["filepath1", "filepath2"], "zone_id2": ["filepath1", "filepath2"]} (zones support deprecated since 0.94.0, will map ClientIDs only to file paths)
file_map_config: 

# Generate with yaml config markdown text file with descriptions of all args
generate_markdown_args_table: false

# Folder from which the keys will be loaded
keys_dir: .acrakeys

# Keystore encryptor strategy: <env_master_key|kms_encrypted_master_key|vault_master_key|kms_per_client
keystore_encryption_type: env_master_key

# KMS credentials JSON file path
kms_credentials_path: 

# KMS type for using: <aws>
kms_type: 

# Handle MySQL connections
mysql_enable: false

# Handle Postgresql connections
postgresql_enable: false

# Number of Redis database for keys
redis_db_keys: 0

# <host>:<port> used to connect to Redis
redis_host_port: 

# Password to Redis database
redis_password: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
redis_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
redis_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
redis_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
redis_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
redis_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
redis_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
redis_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
redis_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
redis_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
redis_tls_crl_client_url: 

# Use TLS to connect to Redis
redis_tls_enable: false

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
redis_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
redis_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
redis_tls_ocsp_client_required: denyUnknown

# OCSP service URL
redis_tls_ocsp_client_url: 

# Select query with ? as placeholders where last columns in result must be ClientId/ZoneId and AcraStruct. Other columns will be passed into insert/update query into placeholders (zones support deprecated since 0.94.0 and will be ignored).
sql_select: 

# Insert/Update query with ? as placeholder where into first will be placed rotated AcraStruct
sql_update: 

# Connection string (http://x.x.x.x:yyyy) for loading ACRA_MASTER_KEY from HashiCorp Vault
vault_connection_api_string: 

# KV Secret Path (secret/) for reading ACRA_MASTER_KEY from HashiCorp Vault
vault_secrets_path: secret/

# Path to CA certificate for HashiCorp Vault certificate validation (deprecated since 0.94.0, use `vault_tls_client_ca`)
vault_tls_ca_path: 

# Set authentication mode that will be used in TLS connection. Values in range 0-4 that set auth type (https://golang.org/pkg/crypto/tls/#ClientAuthType). Default is -1 which means NotSpecified and will be used value from tls_auth.
vault_tls_client_auth: -1

# Path to root certificate which will be used with system root certificates to validate peer's certificate. Uses --tls_ca value if not specified.
vault_tls_client_ca: 

# Path to certificate. Uses --tls_cert value if not specified.
vault_tls_client_cert: 

# Path to private key that will be used for TLS connections. Uses --tls_key value if not specified.
vault_tls_client_key: 

# Expected Server Name (SNI) from the service's side.
vault_tls_client_sni: 

# How many CRLs to cache in memory (use 0 to disable caching)
vault_tls_crl_client_cache_size: 16

# How long to keep CRLs cached, in seconds (use 0 to disable caching, maximum: 300 s)
vault_tls_crl_client_cache_time: 0

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using CRL
vault_tls_crl_client_check_only_leaf_certificate: false

# How to treat CRL URL described in certificate itself: <use|trust|prefer|ignore>
vault_tls_crl_client_from_cert: prefer

# URL of the Certificate Revocation List (CRL) to use
vault_tls_crl_client_url: 

# Put 'true' to check only final/last certificate, or 'false' to check the whole certificate chain using OCSP
vault_tls_ocsp_client_check_only_leaf_certificate: false

# How to treat OCSP server described in certificate itself: <use|trust|prefer|ignore>
vault_tls_ocsp_client_from_cert: prefer

# How to treat certificates unknown to OCSP: <denyUnknown|allowUnknown|requireGood>
vault_tls_ocsp_client_required: denyUnknown

# OCSP service URL
vault_tls_ocsp_client_url: 

# Use TLS to encrypt transport with HashiCorp Vault
vault_tls_transport_enable: false

# Rotate acrastructs as it was encrypted with zonemode or without. With zonemode_enable=true will be used zoneID for encryption/decryption. If false then key id will not be used
zonemode_enable: true

