# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2


class ReaderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Decrypt = channel.unary_unary(
                '/grpc_api.Reader/Decrypt',
                request_serializer=api__pb2.DecryptRequest.SerializeToString,
                response_deserializer=api__pb2.DecryptResponse.FromString,
                )


class ReaderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Decrypt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Decrypt': grpc.unary_unary_rpc_method_handler(
                    servicer.Decrypt,
                    request_deserializer=api__pb2.DecryptRequest.FromString,
                    response_serializer=api__pb2.DecryptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.Reader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Decrypt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.Reader/Decrypt',
            api__pb2.DecryptRequest.SerializeToString,
            api__pb2.DecryptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WriterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Encrypt = channel.unary_unary(
                '/grpc_api.Writer/Encrypt',
                request_serializer=api__pb2.EncryptRequest.SerializeToString,
                response_deserializer=api__pb2.EncryptResponse.FromString,
                )


class WriterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Encrypt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WriterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Encrypt': grpc.unary_unary_rpc_method_handler(
                    servicer.Encrypt,
                    request_deserializer=api__pb2.EncryptRequest.FromString,
                    response_serializer=api__pb2.EncryptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.Writer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Writer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Encrypt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.Writer/Encrypt',
            api__pb2.EncryptRequest.SerializeToString,
            api__pb2.EncryptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TokenizatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Tokenize = channel.unary_unary(
                '/grpc_api.Tokenizator/Tokenize',
                request_serializer=api__pb2.TokenizeRequest.SerializeToString,
                response_deserializer=api__pb2.TokenizeResponse.FromString,
                )
        self.Detokenize = channel.unary_unary(
                '/grpc_api.Tokenizator/Detokenize',
                request_serializer=api__pb2.TokenizeRequest.SerializeToString,
                response_deserializer=api__pb2.TokenizeResponse.FromString,
                )


class TokenizatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Tokenize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Detokenize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenizatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Tokenize': grpc.unary_unary_rpc_method_handler(
                    servicer.Tokenize,
                    request_deserializer=api__pb2.TokenizeRequest.FromString,
                    response_serializer=api__pb2.TokenizeResponse.SerializeToString,
            ),
            'Detokenize': grpc.unary_unary_rpc_method_handler(
                    servicer.Detokenize,
                    request_deserializer=api__pb2.TokenizeRequest.FromString,
                    response_serializer=api__pb2.TokenizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.Tokenizator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tokenizator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Tokenize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.Tokenizator/Tokenize',
            api__pb2.TokenizeRequest.SerializeToString,
            api__pb2.TokenizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Detokenize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.Tokenizator/Detokenize',
            api__pb2.TokenizeRequest.SerializeToString,
            api__pb2.TokenizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReaderSymStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecryptSym = channel.unary_unary(
                '/grpc_api.ReaderSym/DecryptSym',
                request_serializer=api__pb2.DecryptSymRequest.SerializeToString,
                response_deserializer=api__pb2.DecryptSymResponse.FromString,
                )


class ReaderSymServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DecryptSym(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReaderSymServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecryptSym': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptSym,
                    request_deserializer=api__pb2.DecryptSymRequest.FromString,
                    response_serializer=api__pb2.DecryptSymResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.ReaderSym', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReaderSym(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DecryptSym(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.ReaderSym/DecryptSym',
            api__pb2.DecryptSymRequest.SerializeToString,
            api__pb2.DecryptSymResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WriterSymStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncryptSym = channel.unary_unary(
                '/grpc_api.WriterSym/EncryptSym',
                request_serializer=api__pb2.EncryptSymRequest.SerializeToString,
                response_deserializer=api__pb2.EncryptSymResponse.FromString,
                )


class WriterSymServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EncryptSym(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WriterSymServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncryptSym': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptSym,
                    request_deserializer=api__pb2.EncryptSymRequest.FromString,
                    response_serializer=api__pb2.EncryptSymResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.WriterSym', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WriterSym(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EncryptSym(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.WriterSym/EncryptSym',
            api__pb2.EncryptSymRequest.SerializeToString,
            api__pb2.EncryptSymResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SearchableEncryptionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncryptSearchable = channel.unary_unary(
                '/grpc_api.SearchableEncryption/EncryptSearchable',
                request_serializer=api__pb2.SearchableEncryptionRequest.SerializeToString,
                response_deserializer=api__pb2.SearchableEncryptionResponse.FromString,
                )
        self.DecryptSearchable = channel.unary_unary(
                '/grpc_api.SearchableEncryption/DecryptSearchable',
                request_serializer=api__pb2.SearchableDecryptionRequest.SerializeToString,
                response_deserializer=api__pb2.SearchableDecryptionResponse.FromString,
                )
        self.EncryptSymSearchable = channel.unary_unary(
                '/grpc_api.SearchableEncryption/EncryptSymSearchable',
                request_serializer=api__pb2.SearchableSymEncryptionRequest.SerializeToString,
                response_deserializer=api__pb2.SearchableSymEncryptionResponse.FromString,
                )
        self.DecryptSymSearchable = channel.unary_unary(
                '/grpc_api.SearchableEncryption/DecryptSymSearchable',
                request_serializer=api__pb2.SearchableSymDecryptionRequest.SerializeToString,
                response_deserializer=api__pb2.SearchableSymDecryptionResponse.FromString,
                )
        self.GenerateQueryHash = channel.unary_unary(
                '/grpc_api.SearchableEncryption/GenerateQueryHash',
                request_serializer=api__pb2.QueryHashRequest.SerializeToString,
                response_deserializer=api__pb2.QueryHashResponse.FromString,
                )


class SearchableEncryptionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EncryptSearchable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptSearchable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptSymSearchable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptSymSearchable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateQueryHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchableEncryptionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncryptSearchable': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptSearchable,
                    request_deserializer=api__pb2.SearchableEncryptionRequest.FromString,
                    response_serializer=api__pb2.SearchableEncryptionResponse.SerializeToString,
            ),
            'DecryptSearchable': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptSearchable,
                    request_deserializer=api__pb2.SearchableDecryptionRequest.FromString,
                    response_serializer=api__pb2.SearchableDecryptionResponse.SerializeToString,
            ),
            'EncryptSymSearchable': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptSymSearchable,
                    request_deserializer=api__pb2.SearchableSymEncryptionRequest.FromString,
                    response_serializer=api__pb2.SearchableSymEncryptionResponse.SerializeToString,
            ),
            'DecryptSymSearchable': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptSymSearchable,
                    request_deserializer=api__pb2.SearchableSymDecryptionRequest.FromString,
                    response_serializer=api__pb2.SearchableSymDecryptionResponse.SerializeToString,
            ),
            'GenerateQueryHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateQueryHash,
                    request_deserializer=api__pb2.QueryHashRequest.FromString,
                    response_serializer=api__pb2.QueryHashResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_api.SearchableEncryption', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchableEncryption(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EncryptSearchable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.SearchableEncryption/EncryptSearchable',
            api__pb2.SearchableEncryptionRequest.SerializeToString,
            api__pb2.SearchableEncryptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptSearchable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.SearchableEncryption/DecryptSearchable',
            api__pb2.SearchableDecryptionRequest.SerializeToString,
            api__pb2.SearchableDecryptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncryptSymSearchable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.SearchableEncryption/EncryptSymSearchable',
            api__pb2.SearchableSymEncryptionRequest.SerializeToString,
            api__pb2.SearchableSymEncryptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptSymSearchable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.SearchableEncryption/DecryptSymSearchable',
            api__pb2.SearchableSymDecryptionRequest.SerializeToString,
            api__pb2.SearchableSymDecryptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateQueryHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_api.SearchableEncryption/GenerateQueryHash',
            api__pb2.QueryHashRequest.SerializeToString,
            api__pb2.QueryHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
