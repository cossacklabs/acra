diff --git a/ast.go b/ast.go
index c3a0d08..a08d488 100644
--- a/ast.go
+++ b/ast.go
@@ -2266,12 +2266,21 @@ const (
 	HexVal
 	ValArg
 	BitVal
+	PgEscapeString
+	Casted
 )
 
 // SQLVal represents a single value.
 type SQLVal struct {
-	Type ValType
-	Val  []byte
+	Type     ValType
+	Val      []byte
+	CastType []byte
+}
+
+// NewCastVal builds new CastVal
+func NewCastVal(val Expr, castType []byte) *SQLVal {
+	v := val.(*SQLVal)
+	return &SQLVal{Type: v.Type, Val: v.Val, CastType: castType}
 }
 
 // NewStrVal builds a new StrVal.
@@ -2299,6 +2308,11 @@ func NewHexVal(in []byte) *SQLVal {
 	return &SQLVal{Type: HexVal, Val: in}
 }
 
+// NewPgEscapeString builds a new PgEscapeString
+func NewPgEscapeString(in []byte) *SQLVal {
+	return &SQLVal{Type: PgEscapeString, Val: in}
+}
+
 // NewBitVal builds a new BitVal containing a bit literal.
 func NewBitVal(in []byte) *SQLVal {
 	return &SQLVal{Type: BitVal, Val: in}
@@ -2322,9 +2336,14 @@ func (node *SQLVal) Format(buf *TrackedBuffer) {
 		buf.Myprintf("B'%s'", []byte(node.Val))
 	case ValArg:
 		buf.WriteArg(string(node.Val))
+	case PgEscapeString:
+		buf.Myprintf("E'%s'", sqltypes.EncodeBytesSQLWithoutQuotes(node.Val))
 	default:
 		panic("unexpected")
 	}
+	if len(node.CastType) > 0 {
+		buf.Myprintf("%s", node.CastType)
+	}
 }
 
 func (node *SQLVal) walkSubtree(visit Visit) error {
diff --git a/dependency/sqltypes/value.go b/dependency/sqltypes/value.go
index a3bceee..453e49f 100644
--- a/dependency/sqltypes/value.go
+++ b/dependency/sqltypes/value.go
@@ -18,6 +18,7 @@ limitations under the License.
 package sqltypes
 
 import (
+	"bytes"
 	"encoding/base64"
 	"encoding/json"
 	"fmt"
@@ -318,9 +319,15 @@ func (v *Value) UnmarshalJSON(b []byte) error {
 	return err
 }
 
+var hexPrefix = []byte{'\\', 'x'}
+
 func encodeBytesSQL(val []byte, b BinWriter) {
 	buf := &bytes2.Buffer{}
 	buf.WriteByte('\'')
+	if len(val) > len(hexPrefix) && bytes.Equal(hexPrefix, val[:2]) {
+		buf.Write(hexPrefix)
+		val = val[len(hexPrefix):]
+	}
 	for _, ch := range val {
 		if encodedChar := SQLEncodeMap[ch]; encodedChar == DontEscape {
 			buf.WriteByte(ch)
@@ -333,6 +340,20 @@ func encodeBytesSQL(val []byte, b BinWriter) {
 	b.Write(buf.Bytes())
 }
 
+// EncodeBytesSQLWithoutQuotes escape special symbols in byte value
+func EncodeBytesSQLWithoutQuotes(val []byte) []byte {
+	buf := &bytes2.Buffer{}
+	for _, ch := range val {
+		if encodedChar := SQLEncodeMap[ch]; encodedChar == DontEscape {
+			buf.WriteByte(ch)
+		} else {
+			buf.WriteByte('\\')
+			buf.WriteByte(encodedChar)
+		}
+	}
+	return buf.Bytes()
+}
+
 func encodeBytesASCII(val []byte, b BinWriter) {
 	buf := &bytes2.Buffer{}
 	buf.WriteByte('\'')
diff --git a/parse_test.go b/parse_test.go
index ac65962..772d643 100644
--- a/parse_test.go
+++ b/parse_test.go
@@ -457,8 +457,8 @@ var (
 	}, {
 		input: "select /* all escapes */ '\\0\\'\\\"\\b\\n\\r\\t\\Z\\\\' from t",
 	}, {
-		input:  "select /* non-escape */ '\\x' from t",
-		output: "select /* non-escape */ 'x' from t",
+		input:  "select /* non-escape */ '\\q' from t",
+		output: "select /* non-escape */ 'q' from t",
 	}, {
 		input: "select /* unescaped backslash */ '\\n' from t",
 	}, {
diff --git a/sql.y b/sql.y
index efbb794..c8f02b7 100644
--- a/sql.y
+++ b/sql.y
@@ -122,7 +122,7 @@ func forceEOF(yylex interface{}) {
 %left <bytes> JOIN STRAIGHT_JOIN LEFT RIGHT INNER OUTER CROSS NATURAL USE FORCE
 %left <bytes> ON USING
 %token <empty> '(' ',' ')'
-%token <bytes> ID HEX STRING INTEGRAL FLOAT HEXNUM VALUE_ARG LIST_ARG COMMENT COMMENT_KEYWORD BIT_LITERAL
+%token <bytes> ID PG_ESCAPE_STRING HEX STRING INTEGRAL FLOAT HEXNUM VALUE_ARG LIST_ARG COMMENT COMMENT_KEYWORD BIT_LITERAL
 %token <bytes> NULL TRUE FALSE
 
 // Precedence dictated by mysql. But the vitess grammar is simplified.
@@ -292,6 +292,7 @@ func forceEOF(yylex interface{}) {
 %type <vindexParams> vindex_param_list vindex_params_opt
 %type <colIdent> vindex_type vindex_type_opt
 %type <bytes> alter_object_type
+%type <bytes> typecast
 
 %start any_command
 
@@ -2549,6 +2550,22 @@ value:
   {
     $$ = &NullVal{}
   }
+| PG_ESCAPE_STRING
+  {
+    $$ = NewPgEscapeString($1)
+  }
+| value typecast
+  {
+    $$ = NewCastVal($1, $2)
+  }
+
+typecast:
+  LIST_ARG
+  {
+    $$ = $1
+  }
+
+
 
 num_val:
   sql_id
diff --git a/token.go b/token.go
index 23efa77..869346d 100644
--- a/token.go
+++ b/token.go
@@ -486,6 +486,12 @@ func (tkn *Tokenizer) Scan() (int, []byte) {
 				return tkn.scanBitLiteral()
 			}
 		}
+		if ch == 'E' || ch == 'e' {
+			if tkn.lastChar == '\'' {
+				tkn.next()
+				return tkn.scanString('\'', PG_ESCAPE_STRING)
+			}
+		}
 		isDbSystemVariable := false
 		if ch == '@' && tkn.lastChar == '@' {
 			isDbSystemVariable = true
@@ -771,7 +777,10 @@ exit:
 
 func (tkn *Tokenizer) scanString(delim uint16, typ int) (int, []byte) {
 	var buffer bytes2.Buffer
+	// start from -1 to allow auto-increment at start of loop
+	index := -1
 	for {
+		index++
 		ch := tkn.lastChar
 		if ch == eofChar {
 			// Unterminated string.
@@ -810,6 +819,14 @@ func (tkn *Tokenizer) scanString(delim uint16, typ int) (int, []byte) {
 				// String terminates mid escape character.
 				return LEX_ERROR, buffer.Bytes()
 			}
+			// specific case for postgresql where binary string encoded as hex with \x prefix then we should skip general
+			// mysql behaviour and escape logic
+			if index == 0 && (tkn.lastChar == 'x' || tkn.lastChar == 'X') {
+				buffer.WriteByte(byte(ch))
+				buffer.WriteByte(byte(tkn.lastChar))
+				tkn.next()
+				continue
+			}
 			if decodedChar := sqltypes.SQLDecodeMap[byte(tkn.lastChar)]; decodedChar == sqltypes.DontEscape {
 				ch = tkn.lastChar
 			} else {
