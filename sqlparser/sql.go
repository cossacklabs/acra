// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const INTERVAL = 57395
const ID = 57396
const PG_ESCAPE_STRING = 57397
const HEX = 57398
const SINGLE_QUOTE_STRING = 57399
const DOUBLE_QUOTE_STRING = 57400
const BACK_QUOTE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const DOLLAR_SIGN = 57409
const LIST_ARG = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const MICROSECOND = 57414
const SECOND = 57415
const MINUTE = 57416
const HOUR = 57417
const DAY = 57418
const WEEK = 57419
const MONTH = 57420
const QUARTER = 57421
const SECOND_MICROSECOND = 57422
const MINUTE_MICROSECOND = 57423
const MINUTE_SECOND = 57424
const HOUR_MICROSECOND = 57425
const HOUR_SECOND = 57426
const HOUR_MINUTE = 57427
const DAY_MICROSECOND = 57428
const DAY_SECOND = 57429
const DAY_MINUTE = 57430
const DAY_HOUR = 57431
const YEAR_MONTH = 57432
const YEAR = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const JSON_EXTRACT_OP = 57459
const JSON_UNQUOTE_EXTRACT_OP = 57460
const CREATE = 57461
const ALTER = 57462
const DROP = 57463
const RENAME = 57464
const ANALYZE = 57465
const ADD = 57466
const SCHEMA = 57467
const TABLE = 57468
const INDEX = 57469
const VIEW = 57470
const TO = 57471
const IGNORE = 57472
const IF = 57473
const UNIQUE = 57474
const PRIMARY = 57475
const COLUMN = 57476
const CONSTRAINT = 57477
const SPATIAL = 57478
const FULLTEXT = 57479
const FOREIGN = 57480
const KEY_BLOCK_SIZE = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const DEALLOCATE = 57506
const PREPARE = 57507
const EXECUTE = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const ISOLATION = 57568
const LEVEL = 57569
const READ = 57570
const WRITE = 57571
const ONLY = 57572
const REPEATABLE = 57573
const COMMITTED = 57574
const UNCOMMITTED = 57575
const SERIALIZABLE = 57576
const CURRENT_TIMESTAMP = 57577
const DATABASE = 57578
const CURRENT_DATE = 57579
const CURRENT_TIME = 57580
const LOCALTIME = 57581
const LOCALTIMESTAMP = 57582
const UTC_DATE = 57583
const UTC_TIME = 57584
const UTC_TIMESTAMP = 57585
const REPLACE = 57586
const CONVERT = 57587
const CAST = 57588
const SUBSTR = 57589
const SUBSTRING = 57590
const GROUP_CONCAT = 57591
const SEPARATOR = 57592
const MATCH = 57593
const AGAINST = 57594
const BOOLEAN = 57595
const LANGUAGE = 57596
const WITH = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const RETURNING = 57601

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	174, 273,
	175, 273,
	-2, 263,
	-1, 250,
	133, 626,
	-2, 524,
	-1, 251,
	133, 628,
	-2, 523,
	-1, 252,
	133, 629,
	-2, 622,
	-1, 253,
	133, 630,
	-2, 623,
	-1, 325,
	105, 808,
	-2, 62,
	-1, 326,
	105, 769,
	-2, 63,
	-1, 331,
	105, 753,
	-2, 588,
	-1, 333,
	105, 790,
	-2, 590,
	-1, 552,
	71, 523,
	133, 628,
	-2, 456,
	-1, 603,
	52, 45,
	54, 45,
	-2, 47,
	-1, 754,
	133, 632,
	-2, 625,
	-1, 985,
	5, 31,
	-2, 421,
	-1, 1010,
	5, 30,
	-2, 560,
	-1, 1244,
	5, 31,
	-2, 561,
	-1, 1291,
	5, 30,
	-2, 563,
	-1, 1354,
	5, 31,
	-2, 564,
}

const yyPrivate = 57344

const yyLast = 12194

var yyAct = [...]int{

	285, 53, 1345, 924, 679, 500, 255, 840, 1302, 858,
	876, 549, 1176, 1148, 880, 1149, 229, 1250, 1073, 882,
	1145, 284, 598, 918, 879, 59, 24, 548, 3, 220,
	904, 1014, 712, 841, 1121, 791, 1030, 779, 977, 1076,
	1064, 330, 613, 596, 890, 1019, 627, 788, 828, 756,
	478, 484, 914, 427, 53, 324, 612, 600, 836, 585,
	498, 238, 234, 959, 490, 321, 319, 58, 316, 1239,
	1374, 1364, 1372, 312, 1352, 1370, 221, 222, 223, 224,
	311, 228, 925, 1363, 1140, 1236, 431, 1038, 233, 1351,
	1037, 1311, 259, 1039, 1170, 256, 248, 1171, 1172, 871,
	565, 242, 186, 182, 183, 184, 872, 873, 614, 466,
	615, 310, 1327, 514, 513, 523, 524, 516, 517, 518,
	519, 520, 521, 522, 515, 707, 235, 525, 54, 29,
	30, 468, 452, 790, 621, 622, 623, 1183, 1184, 63,
	709, 1055, 897, 1187, 1262, 905, 1185, 710, 1224, 440,
	1277, 1222, 225, 219, 463, 464, 1371, 1369, 1346, 1097,
	315, 838, 1303, 476, 441, 859, 861, 65, 66, 67,
	68, 69, 434, 837, 179, 180, 180, 717, 1305, 687,
	621, 622, 623, 678, 1029, 1332, 1028, 1027, 429, 437,
	197, 253, 1309, 181, 1094, 1247, 892, 1108, 941, 892,
	1096, 993, 458, 458, 458, 458, 971, 458, 877, 525,
	537, 538, 940, 185, 728, 458, 505, 447, 454, 515,
	456, 951, 525, 763, 725, 82, 1101, 474, 1049, 194,
	497, 1337, 194, 1201, 1017, 53, 616, 761, 762, 760,
	945, 495, 1142, 194, 829, 453, 455, 892, 682, 1191,
	534, 939, 898, 496, 495, 536, 990, 497, 486, 194,
	194, 82, 487, 860, 540, 194, 1304, 82, 1053, 1328,
	497, 787, 1340, 547, 492, 1356, 428, 518, 519, 520,
	521, 522, 515, 457, 1278, 525, 551, 433, 554, 555,
	556, 557, 558, 559, 560, 561, 905, 564, 566, 566,
	566, 566, 566, 566, 566, 566, 574, 575, 576, 577,
	838, 1350, 891, 1310, 1308, 891, 1095, 597, 1093, 1268,
	936, 933, 934, 1192, 932, 952, 1186, 1100, 451, 496,
	495, 203, 1267, 1335, 443, 444, 445, 496, 495, 731,
	732, 829, 894, 1000, 1144, 1068, 497, 535, 619, 943,
	946, 746, 748, 749, 497, 1067, 214, 541, 542, 543,
	544, 545, 546, 891, 56, 435, 436, 895, 889, 887,
	178, 194, 888, 194, 1179, 488, 747, 1056, 1178, 194,
	1050, 55, 759, 553, 927, 604, 938, 782, 610, 194,
	727, 693, 692, 82, 82, 82, 82, 477, 82, 567,
	568, 569, 570, 571, 572, 573, 82, 683, 937, 315,
	496, 495, 968, 969, 970, 681, 676, 194, 516, 517,
	518, 519, 520, 521, 522, 515, 726, 497, 525, 1315,
	198, 458, 1084, 449, 442, 200, 82, 309, 428, 458,
	227, 1314, 206, 202, 780, 942, 1188, 621, 622, 623,
	458, 458, 458, 458, 458, 458, 458, 458, 944, 1360,
	477, 1082, 1295, 1343, 458, 458, 1015, 496, 495, 204,
	1040, 793, 209, 621, 622, 623, 865, 207, 606, 989,
	60, 988, 1295, 477, 497, 1242, 460, 461, 462, 696,
	465, 582, 718, 718, 621, 622, 623, 26, 470, 713,
	713, 194, 199, 733, 1295, 1296, 719, 1200, 194, 194,
	194, 694, 1259, 1258, 82, 1167, 477, 1246, 477, 983,
	82, 721, 496, 495, 1198, 1197, 459, 1194, 1195, 201,
	757, 210, 211, 212, 213, 217, 1016, 53, 1111, 497,
	216, 215, 1194, 1193, 56, 781, 995, 754, 1083, 607,
	735, 1016, 551, 1088, 1085, 1078, 1079, 1086, 1081, 1080,
	750, 983, 477, 953, 477, 821, 824, 582, 477, 752,
	1087, 830, 793, 477, 626, 625, 1090, 1146, 582, 795,
	1015, 983, 1196, 316, 316, 316, 316, 316, 842, 994,
	608, 1042, 606, 1015, 992, 870, 327, 983, 597, 955,
	862, 758, 609, 729, 755, 235, 316, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 82, 833, 56, 795, 826, 26, 194, 194,
	82, 1272, 194, 783, 786, 194, 680, 991, 899, 194,
	581, 82, 82, 82, 82, 82, 82, 82, 82, 866,
	919, 734, 56, 855, 1290, 82, 82, 844, 845, 863,
	847, 194, 864, 843, 582, 868, 846, 194, 869, 26,
	1161, 906, 907, 908, 56, 315, 315, 315, 315, 315,
	884, 82, 458, 1045, 458, 194, 1020, 1021, 817, 818,
	315, 82, 458, 1008, 825, 915, 1009, 910, 315, 920,
	909, 71, 922, 475, 472, 244, 1181, 1146, 832, 1069,
	834, 835, 792, 794, 677, 473, 56, 587, 590, 591,
	592, 588, 686, 589, 593, 916, 917, 1020, 1021, 1023,
	831, 690, 469, 697, 698, 699, 700, 701, 702, 703,
	704, 741, 1026, 1025, 852, 849, 56, 705, 706, 853,
	1122, 848, 239, 240, 972, 587, 590, 591, 592, 588,
	857, 589, 593, 850, 854, 1368, 591, 592, 851, 1362,
	754, 194, 1107, 956, 194, 194, 194, 194, 194, 1124,
	491, 960, 757, 1367, 961, 1012, 194, 966, 965, 194,
	479, 1060, 624, 194, 489, 450, 1052, 194, 194, 1273,
	1342, 82, 480, 1341, 1288, 1046, 1240, 929, 689, 1105,
	973, 595, 236, 237, 1126, 491, 1130, 82, 1125, 1123,
	1132, 964, 230, 1320, 1128, 231, 60, 1319, 1275, 963,
	1016, 493, 1329, 1127, 1263, 724, 62, 1011, 64, 1013,
	715, 7, 716, 6, 714, 5, 1129, 1131, 605, 327,
	57, 1, 267, 758, 266, 796, 722, 1238, 974, 975,
	976, 539, 926, 1072, 1010, 935, 316, 1344, 1301, 1175,
	194, 886, 878, 82, 967, 82, 999, 426, 70, 194,
	1336, 885, 194, 82, 954, 1307, 1261, 893, 900, 901,
	902, 903, 1024, 1054, 1043, 896, 1032, 1041, 1034, 1180,
	1339, 1051, 632, 631, 911, 912, 913, 629, 630, 1033,
	628, 634, 633, 1035, 720, 1059, 205, 1061, 1062, 1063,
	322, 594, 617, 982, 458, 921, 494, 72, 1092, 1065,
	1065, 1057, 1058, 1047, 1048, 1091, 481, 485, 931, 1099,
	708, 950, 467, 208, 533, 962, 980, 1036, 328, 458,
	1153, 1066, 981, 506, 730, 483, 1318, 1084, 315, 985,
	997, 1075, 1274, 998, 562, 928, 827, 930, 258, 745,
	271, 268, 272, 1089, 270, 949, 269, 736, 1007, 507,
	257, 986, 987, 246, 314, 578, 1082, 586, 584, 996,
	583, 550, 1022, 1018, 1002, 313, 1003, 1004, 1005, 1006,
	1104, 563, 1110, 1235, 1326, 740, 80, 28, 61, 781,
	1151, 241, 53, 1115, 23, 842, 1147, 1154, 22, 1120,
	1114, 21, 842, 1141, 19, 1134, 18, 1133, 1163, 1164,
	1165, 1150, 753, 17, 20, 754, 16, 15, 14, 1152,
	1156, 32, 329, 13, 12, 11, 10, 9, 432, 1157,
	1155, 8, 4, 232, 82, 25, 2, 194, 1168, 1174,
	0, 0, 0, 0, 0, 1169, 0, 1173, 1189, 1190,
	0, 82, 1182, 1083, 0, 1117, 1118, 0, 1088, 1085,
	1078, 1079, 1086, 1081, 1080, 0, 0, 0, 1135, 1136,
	0, 1138, 1139, 0, 0, 1087, 0, 280, 273, 784,
	785, 1077, 275, 276, 277, 278, 1202, 0, 274, 281,
	0, 279, 316, 0, 82, 82, 0, 82, 0, 1204,
	1209, 0, 1207, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 713, 1225, 0, 0, 327, 0, 1211, 0,
	82, 1234, 1212, 194, 194, 0, 1119, 194, 0, 0,
	1220, 0, 881, 0, 194, 1213, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 1241, 0,
	0, 0, 0, 1249, 329, 329, 329, 329, 0, 329,
	0, 1252, 1253, 1254, 0, 1257, 0, 329, 1043, 1255,
	0, 0, 0, 0, 1166, 0, 0, 0, 0, 0,
	458, 743, 744, 82, 315, 82, 0, 1071, 0, 0,
	0, 0, 0, 1215, 1265, 0, 1271, 504, 0, 1270,
	0, 0, 0, 0, 1264, 0, 1266, 0, 0, 0,
	0, 0, 1098, 0, 82, 0, 82, 82, 0, 0,
	0, 0, 0, 1151, 0, 0, 1292, 0, 0, 1276,
	0, 1287, 1293, 1294, 0, 753, 1285, 550, 1289, 0,
	0, 194, 819, 820, 1150, 1300, 0, 0, 0, 82,
	0, 0, 1306, 1291, 1317, 1312, 0, 1313, 1214, 0,
	0, 0, 82, 194, 0, 1216, 0, 0, 0, 82,
	1316, 1151, 0, 53, 0, 329, 0, 1226, 1227, 1228,
	82, 618, 1231, 194, 1330, 0, 0, 0, 0, 0,
	1334, 0, 1150, 0, 0, 1243, 1244, 1245, 0, 1248,
	1331, 0, 875, 0, 0, 1338, 1279, 1280, 0, 1281,
	1282, 1283, 1348, 0, 0, 0, 842, 1353, 1355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 82, 0, 82, 82, 82, 194, 82,
	1357, 0, 1365, 1366, 0, 82, 0, 0, 0, 0,
	0, 0, 1373, 0, 0, 1217, 1218, 0, 1219, 0,
	0, 1221, 0, 1223, 0, 0, 0, 0, 0, 0,
	0, 82, 82, 82, 0, 0, 0, 0, 0, 1284,
	0, 0, 0, 329, 0, 0, 881, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 1297, 1298, 1299, 0,
	0, 0, 329, 329, 329, 329, 329, 329, 329, 329,
	1260, 0, 957, 958, 0, 485, 329, 329, 82, 82,
	0, 0, 1321, 1322, 1323, 1324, 1325, 0, 0, 0,
	0, 82, 1074, 0, 0, 0, 0, 26, 27, 54,
	29, 30, 737, 0, 82, 0, 0, 0, 0, 0,
	1375, 0, 504, 0, 0, 0, 45, 0, 329, 0,
	0, 31, 0, 1269, 0, 0, 0, 82, 0, 0,
	1349, 0, 0, 0, 0, 1354, 0, 0, 1113, 984,
	40, 0, 0, 0, 56, 0, 0, 0, 1359, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1137, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 822, 822, 0, 0, 1001, 1116, 822, 82, 1377,
	1378, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 822, 0, 514, 513, 523, 524,
	516, 517, 518, 519, 520, 521, 522, 515, 0, 881,
	525, 881, 0, 0, 0, 0, 0, 649, 0, 320,
	0, 0, 329, 0, 430, 0, 0, 33, 34, 36,
	35, 38, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 482, 0, 0, 0, 0, 0, 0, 39, 46,
	47, 0, 0, 48, 49, 37, 513, 523, 524, 516,
	517, 518, 519, 520, 521, 522, 515, 41, 42, 525,
	43, 44, 50, 51, 52, 1113, 0, 0, 0, 189,
	0, 654, 218, 523, 524, 516, 517, 518, 519, 520,
	521, 522, 515, 226, 329, 525, 329, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 245, 0, 189,
	189, 0, 0, 0, 0, 189, 0, 0, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	438, 0, 439, 0, 0, 0, 0, 0, 446, 0,
	881, 329, 0, 0, 0, 0, 1143, 650, 448, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 1159, 0, 0, 1160, 1074, 881, 1162,
	0, 664, 665, 666, 667, 668, 669, 670, 0, 671,
	672, 673, 674, 675, 651, 652, 653, 635, 636, 663,
	0, 638, 0, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 655, 656, 657, 658, 659, 660, 661,
	662, 0, 0, 0, 0, 1232, 477, 0, 0, 0,
	0, 189, 1233, 189, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 1210, 514, 513,
	523, 524, 516, 517, 518, 519, 520, 521, 522, 515,
	580, 0, 525, 0, 0, 0, 0, 471, 0, 603,
	0, 0, 1230, 0, 0, 1031, 0, 514, 513, 523,
	524, 516, 517, 518, 519, 520, 521, 522, 515, 0,
	1237, 525, 329, 978, 0, 0, 0, 550, 797, 798,
	799, 800, 801, 802, 803, 804, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 805, 0, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 0, 0, 525, 0, 1070, 329, 0, 329, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 189, 0, 525, 0, 0, 0, 0, 189, 602,
	189, 329, 0, 0, 0, 0, 0, 1229, 477, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 0, 0, 525, 329, 550, 0, 684, 685, 0,
	0, 688, 0, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 514, 513,
	523, 524, 516, 517, 518, 519, 520, 521, 522, 515,
	711, 822, 525, 0, 504, 0, 1031, 0, 822, 514,
	513, 523, 524, 516, 517, 518, 519, 520, 521, 522,
	515, 0, 0, 525, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 0, 329, 1177, 0,
	0, 0, 0, 0, 0, 1347, 550, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 189, 189,
	0, 0, 189, 0, 0, 189, 0, 0, 0, 695,
	1203, 514, 513, 523, 524, 516, 517, 518, 519, 520,
	521, 522, 515, 1205, 0, 525, 0, 0, 0, 0,
	1208, 189, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 509, 0, 512, 0, 0, 695, 0, 0,
	526, 527, 528, 529, 530, 531, 532, 867, 510, 511,
	508, 514, 513, 523, 524, 516, 517, 518, 519, 520,
	521, 522, 515, 0, 1251, 525, 1251, 1251, 1251, 0,
	1256, 0, 0, 0, 0, 0, 329, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 245, 245, 0, 0,
	823, 823, 245, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 329, 329, 329, 0, 245, 245, 245, 245,
	0, 189, 0, 823, 189, 189, 189, 189, 189, 923,
	477, 0, 0, 0, 0, 0, 856, 0, 947, 189,
	0, 948, 0, 602, 0, 0, 0, 189, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 504,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 514, 513, 523, 524, 516, 517, 518, 519, 520,
	521, 522, 515, 0, 0, 525, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	1199, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	415, 405, 0, 377, 417, 355, 369, 425, 370, 371,
	398, 341, 385, 131, 367, 0, 358, 336, 364, 337,
	356, 379, 99, 382, 354, 407, 388, 113, 423, 115,
	393, 189, 148, 124, 0, 0, 381, 409, 383, 403,
	376, 399, 346, 392, 418, 368, 396, 419, 0, 0,
	0, 378, 81, 189, 0, 621, 622, 623, 883, 0,
	0, 0, 0, 92, 0, 0, 0, 395, 414, 366,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	397, 335, 394, 0, 339, 342, 424, 412, 361, 362,
	1044, 0, 0, 0, 0, 0, 0, 380, 384, 400,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 391, 0, 0, 0, 343, 340, 0, 602, 0,
	0, 345, 0, 360, 401, 0, 334, 404, 410, 375,
	195, 413, 373, 372, 416, 137, 0, 0, 151, 104,
	103, 112, 408, 357, 365, 95, 363, 143, 133, 163,
	390, 134, 142, 116, 155, 138, 162, 196, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	338, 0, 149, 165, 177, 353, 411, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 349, 352, 347,
	348, 386, 387, 420, 421, 422, 402, 344, 0, 350,
	351, 0, 406, 389, 83, 0, 114, 175, 139, 101,
	166, 0, 0, 0, 0, 0, 415, 405, 0, 377,
	417, 355, 369, 425, 370, 371, 398, 341, 385, 131,
	367, 823, 358, 336, 364, 337, 356, 379, 99, 382,
	354, 407, 388, 113, 423, 115, 393, 0, 148, 124,
	0, 0, 381, 409, 383, 403, 376, 399, 346, 392,
	418, 368, 396, 419, 0, 0, 0, 378, 81, 0,
	0, 621, 622, 623, 883, 0, 0, 0, 0, 92,
	0, 0, 0, 395, 414, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 335, 394, 0,
	339, 342, 424, 412, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 380, 384, 400, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 391, 0, 0,
	0, 343, 340, 0, 0, 0, 0, 345, 0, 360,
	401, 0, 334, 404, 410, 375, 195, 413, 373, 372,
	416, 137, 0, 0, 151, 104, 103, 112, 408, 357,
	365, 95, 363, 143, 133, 163, 390, 134, 142, 116,
	155, 138, 162, 196, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 338, 0, 149, 165,
	177, 353, 411, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 349, 352, 347, 348, 386, 387, 420,
	421, 422, 402, 344, 0, 350, 351, 0, 406, 389,
	83, 0, 114, 175, 139, 101, 166, 415, 405, 0,
	377, 417, 355, 369, 425, 370, 371, 398, 341, 385,
	131, 367, 0, 358, 336, 364, 337, 356, 379, 99,
	382, 354, 407, 388, 113, 423, 115, 393, 0, 148,
	124, 0, 0, 381, 409, 383, 403, 376, 399, 346,
	392, 418, 368, 396, 419, 0, 0, 0, 378, 252,
	0, 0, 192, 190, 191, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 395, 414, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 335, 394,
	0, 339, 342, 424, 412, 361, 362, 0, 0, 0,
	0, 0, 0, 0, 380, 384, 400, 374, 0, 0,
	0, 0, 0, 0, 751, 0, 359, 0, 391, 0,
	0, 0, 343, 340, 0, 0, 0, 0, 345, 0,
	360, 401, 0, 334, 404, 410, 375, 195, 413, 373,
	372, 416, 137, 0, 0, 151, 104, 103, 112, 408,
	357, 365, 95, 363, 143, 133, 163, 390, 134, 142,
	116, 155, 138, 162, 196, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 338, 0, 149,
	165, 177, 353, 411, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 349, 352, 347, 348, 386, 387,
	420, 421, 422, 402, 344, 0, 350, 351, 0, 406,
	389, 83, 0, 114, 175, 139, 101, 166, 415, 405,
	0, 377, 417, 355, 369, 425, 370, 371, 398, 341,
	385, 131, 367, 0, 358, 336, 364, 337, 356, 379,
	99, 382, 354, 407, 388, 113, 423, 115, 393, 0,
	148, 124, 0, 0, 381, 409, 383, 403, 376, 399,
	346, 392, 418, 368, 396, 419, 0, 0, 0, 378,
	252, 0, 0, 192, 190, 191, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 395, 414, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 397, 335,
	394, 0, 339, 342, 424, 412, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 380, 384, 400, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 391,
	0, 0, 0, 343, 340, 0, 0, 0, 0, 345,
	0, 360, 401, 0, 334, 404, 410, 375, 195, 413,
	373, 372, 416, 137, 0, 0, 151, 104, 103, 112,
	408, 357, 365, 95, 363, 143, 133, 163, 390, 134,
	142, 116, 155, 138, 162, 196, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 338, 0,
	149, 165, 177, 353, 411, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 349, 352, 347, 348, 386,
	387, 420, 421, 422, 402, 344, 0, 350, 351, 0,
	406, 389, 83, 0, 114, 175, 139, 101, 166, 415,
	405, 0, 377, 417, 355, 369, 425, 370, 371, 398,
	341, 385, 131, 367, 0, 358, 336, 364, 337, 356,
	379, 99, 382, 354, 407, 388, 113, 423, 115, 393,
	0, 148, 124, 0, 0, 381, 409, 383, 403, 376,
	399, 346, 392, 418, 368, 396, 419, 0, 0, 0,
	378, 193, 0, 0, 192, 190, 191, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 395, 414, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	335, 394, 0, 339, 342, 424, 412, 361, 362, 0,
	0, 0, 0, 0, 0, 0, 380, 384, 400, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 359, 0,
	391, 0, 0, 0, 343, 340, 0, 0, 0, 0,
	345, 0, 360, 401, 0, 334, 404, 410, 375, 195,
	413, 373, 372, 416, 137, 0, 0, 151, 104, 103,
	112, 408, 357, 365, 95, 363, 143, 133, 163, 390,
	134, 142, 116, 155, 138, 162, 196, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 338,
	0, 149, 165, 177, 353, 411, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 349, 352, 347, 348,
	386, 387, 420, 421, 422, 402, 344, 0, 350, 351,
	0, 406, 389, 83, 0, 114, 175, 139, 101, 166,
	415, 405, 0, 377, 417, 355, 369, 425, 370, 371,
	398, 341, 385, 131, 367, 0, 358, 336, 364, 337,
	356, 379, 99, 382, 354, 407, 388, 113, 423, 115,
	393, 0, 148, 124, 0, 0, 381, 409, 383, 403,
	376, 399, 346, 392, 418, 368, 396, 419, 56, 0,
	0, 378, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 395, 414, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	397, 335, 394, 0, 339, 342, 424, 412, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 380, 384, 400,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 391, 0, 0, 0, 343, 340, 0, 0, 0,
	0, 345, 0, 360, 401, 0, 334, 404, 410, 375,
	195, 413, 373, 372, 416, 137, 0, 0, 151, 104,
	103, 112, 408, 357, 365, 95, 363, 143, 133, 163,
	390, 134, 142, 116, 155, 138, 162, 196, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	338, 0, 149, 165, 177, 353, 411, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 349, 352, 347,
	348, 386, 387, 420, 421, 422, 402, 344, 0, 350,
	351, 0, 406, 389, 83, 0, 114, 175, 139, 101,
	166, 415, 405, 0, 377, 417, 355, 369, 425, 370,
	371, 398, 341, 385, 131, 367, 0, 358, 336, 364,
	337, 356, 379, 99, 382, 354, 407, 388, 113, 423,
	115, 393, 0, 148, 124, 0, 0, 381, 409, 383,
	403, 376, 399, 346, 392, 418, 368, 396, 419, 0,
	0, 0, 378, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 395, 414,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 335, 394, 0, 339, 342, 424, 412, 361,
	362, 0, 0, 0, 0, 0, 0, 0, 380, 384,
	400, 374, 0, 0, 0, 0, 0, 0, 1112, 0,
	359, 0, 391, 0, 0, 0, 343, 340, 0, 0,
	0, 0, 345, 0, 360, 401, 0, 334, 404, 410,
	375, 195, 413, 373, 372, 416, 137, 0, 0, 151,
	104, 103, 112, 408, 357, 365, 95, 363, 143, 133,
	163, 390, 134, 142, 116, 155, 138, 162, 196, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 338, 0, 149, 165, 177, 353, 411, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 349, 352,
	347, 348, 386, 387, 420, 421, 422, 402, 344, 0,
	350, 351, 0, 406, 389, 83, 0, 114, 175, 139,
	101, 166, 415, 405, 0, 377, 417, 355, 369, 425,
	370, 371, 398, 341, 385, 131, 367, 0, 358, 336,
	364, 337, 356, 379, 99, 382, 354, 407, 388, 113,
	423, 115, 393, 0, 148, 124, 0, 0, 381, 409,
	383, 403, 376, 399, 346, 392, 418, 368, 396, 419,
	0, 0, 0, 378, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 395,
	414, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 335, 394, 0, 339, 342, 424, 412,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 380,
	384, 400, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 0, 391, 0, 0, 0, 343, 340, 0,
	0, 0, 0, 345, 0, 360, 401, 0, 334, 404,
	410, 375, 195, 413, 373, 372, 416, 137, 0, 0,
	151, 104, 103, 112, 408, 357, 365, 95, 363, 143,
	133, 163, 390, 134, 142, 116, 155, 138, 162, 196,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 338, 0, 149, 165, 177, 353, 411, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 349,
	352, 347, 348, 386, 387, 420, 421, 422, 402, 344,
	0, 350, 351, 0, 406, 389, 83, 0, 114, 175,
	139, 101, 166, 415, 405, 0, 377, 417, 355, 369,
	425, 370, 371, 398, 341, 385, 131, 367, 0, 358,
	336, 364, 337, 356, 379, 99, 382, 354, 407, 388,
	113, 423, 115, 393, 0, 148, 124, 0, 0, 381,
	409, 383, 403, 376, 399, 346, 392, 418, 368, 396,
	419, 0, 0, 0, 378, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	395, 414, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 335, 394, 0, 339, 342, 424,
	412, 361, 362, 0, 0, 0, 0, 0, 0, 0,
	380, 384, 400, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 0, 391, 0, 0, 0, 343, 340,
	0, 0, 0, 0, 345, 0, 360, 401, 0, 334,
	404, 410, 375, 195, 413, 373, 372, 416, 137, 0,
	0, 151, 104, 103, 112, 408, 357, 365, 95, 363,
	143, 133, 163, 390, 134, 142, 116, 155, 138, 162,
	196, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 332, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 338, 0, 149, 165, 177, 353, 411,
	171, 172, 173, 174, 0, 0, 0, 333, 331, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	349, 352, 347, 348, 386, 387, 420, 421, 422, 402,
	344, 0, 350, 351, 0, 406, 389, 83, 0, 114,
	175, 139, 101, 166, 415, 405, 0, 377, 417, 355,
	369, 425, 370, 371, 398, 341, 385, 131, 367, 0,
	358, 336, 364, 337, 356, 379, 99, 382, 354, 407,
	388, 113, 423, 115, 393, 0, 148, 124, 0, 0,
	381, 409, 383, 403, 376, 399, 346, 392, 418, 368,
	396, 419, 0, 0, 0, 378, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 395, 414, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 397, 335, 394, 0, 339, 342,
	424, 412, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 380, 384, 400, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 391, 0, 0, 0, 343,
	340, 0, 0, 0, 0, 345, 0, 360, 401, 0,
	334, 404, 410, 375, 195, 413, 373, 372, 416, 137,
	0, 0, 151, 104, 103, 112, 408, 357, 365, 95,
	363, 143, 133, 163, 390, 134, 142, 116, 155, 138,
	162, 196, 170, 153, 169, 84, 152, 611, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 332, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 338, 0, 149, 165, 177, 353,
	411, 171, 172, 173, 174, 0, 0, 0, 333, 331,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 349, 352, 347, 348, 386, 387, 420, 421, 422,
	402, 344, 0, 350, 351, 0, 406, 389, 83, 0,
	114, 175, 139, 101, 166, 415, 405, 0, 377, 417,
	355, 369, 425, 370, 371, 398, 341, 385, 131, 367,
	0, 358, 336, 364, 337, 356, 379, 99, 382, 354,
	407, 388, 113, 423, 115, 393, 0, 148, 124, 0,
	0, 381, 409, 383, 403, 376, 399, 346, 392, 418,
	368, 396, 419, 0, 0, 0, 378, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 395, 414, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 335, 394, 0, 339,
	342, 424, 412, 361, 362, 0, 0, 0, 0, 0,
	0, 0, 380, 384, 400, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 0, 391, 0, 0, 0,
	343, 340, 0, 0, 0, 0, 345, 0, 360, 401,
	0, 334, 404, 410, 375, 195, 413, 373, 372, 416,
	137, 0, 0, 151, 104, 103, 112, 408, 357, 365,
	95, 363, 143, 133, 163, 390, 134, 142, 116, 155,
	138, 162, 196, 170, 153, 169, 84, 152, 323, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 332, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 338, 0, 149, 165, 177,
	353, 411, 171, 172, 173, 174, 0, 0, 0, 333,
	331, 326, 325, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 349, 352, 347, 348, 386, 387, 420, 421,
	422, 402, 344, 0, 350, 351, 0, 406, 389, 83,
	0, 114, 175, 139, 101, 166, 131, 0, 0, 789,
	0, 254, 0, 0, 0, 99, 0, 249, 0, 0,
	113, 296, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 286, 252, 280, 273, 251, 250,
	191, 275, 276, 277, 278, 0, 92, 274, 281, 0,
	279, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 265, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	243, 0, 0, 0, 307, 0, 264, 0, 0, 260,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 305, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	196, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	297, 306, 303, 304, 301, 302, 300, 299, 298, 308,
	289, 290, 291, 292, 294, 0, 293, 83, 0, 114,
	175, 139, 101, 166, 131, 0, 0, 0, 0, 254,
	0, 0, 0, 99, 0, 249, 0, 0, 113, 296,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 286, 252, 280, 273, 251, 250, 191, 275,
	276, 277, 278, 0, 92, 274, 281, 0, 279, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 247, 265, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 1286, 0,
	0, 0, 307, 0, 264, 0, 0, 260, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 305, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 196, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 297, 306,
	303, 304, 301, 302, 300, 299, 298, 308, 289, 290,
	291, 292, 294, 0, 293, 83, 0, 114, 175, 139,
	101, 166, 131, 0, 0, 0, 0, 254, 0, 0,
	0, 99, 0, 249, 0, 0, 113, 296, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 477,
	286, 252, 280, 273, 251, 250, 191, 275, 276, 277,
	278, 0, 92, 274, 281, 0, 279, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 265, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 0, 0,
	307, 0, 264, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 305, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 196, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 297, 306, 303, 304,
	301, 302, 300, 299, 298, 308, 289, 290, 291, 292,
	294, 0, 293, 83, 0, 114, 175, 139, 101, 166,
	131, 0, 0, 0, 0, 254, 0, 0, 0, 99,
	0, 249, 0, 0, 113, 296, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 286, 252,
	280, 273, 251, 250, 191, 275, 276, 277, 278, 0,
	92, 274, 281, 0, 279, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	265, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 243, 0, 0, 0, 307, 0,
	264, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	305, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 196, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 297, 306, 303, 304, 301, 302,
	300, 299, 298, 308, 289, 290, 291, 292, 294, 0,
	293, 83, 0, 114, 175, 139, 101, 166, 131, 0,
	0, 0, 0, 254, 0, 0, 0, 99, 0, 249,
	0, 0, 113, 296, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 874, 0, 56, 0, 0, 286, 252, 280, 273,
	251, 250, 191, 275, 276, 277, 278, 0, 92, 274,
	281, 0, 279, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 265, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 0, 0, 307, 0, 264, 0,
	0, 260, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 305, 0,
	137, 0, 0, 151, 104, 103, 112, 0, 0, 0,
	95, 0, 143, 133, 163, 0, 134, 142, 116, 155,
	138, 162, 196, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 149, 165, 177,
	0, 0, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 297, 306, 303, 304, 301, 302, 300, 299,
	298, 308, 289, 290, 291, 292, 294, 26, 293, 83,
	0, 114, 175, 139, 101, 166, 0, 0, 0, 131,
	0, 0, 0, 0, 254, 0, 0, 0, 99, 0,
	249, 0, 0, 113, 296, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 286, 252, 280,
	273, 251, 250, 191, 275, 276, 277, 278, 0, 92,
	274, 281, 0, 279, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 265,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 0, 0, 307, 0, 264,
	0, 0, 260, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 305,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 196, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 297, 306, 303, 304, 301, 302, 300,
	299, 298, 308, 289, 290, 291, 292, 294, 0, 293,
	83, 0, 114, 175, 139, 101, 166, 131, 0, 0,
	0, 0, 254, 0, 0, 0, 99, 0, 249, 0,
	0, 113, 296, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 286, 252, 280, 273, 251,
	250, 191, 275, 276, 277, 278, 0, 92, 274, 281,
	0, 279, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 265, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 0, 0, 307, 0, 264, 0, 0,
	260, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 305, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 196, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 297, 306, 303, 304, 301, 302, 300, 299, 298,
	308, 289, 290, 291, 292, 294, 131, 293, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 296, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 286, 252, 280, 273, 251, 250,
	191, 275, 276, 277, 278, 0, 92, 274, 281, 0,
	279, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 0, 0, 307, 0, 264, 0, 0, 260,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 305, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 1376, 134, 142, 116, 155, 138, 162,
	196, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	297, 306, 303, 304, 301, 302, 300, 299, 298, 308,
	289, 290, 291, 292, 294, 131, 293, 83, 0, 114,
	175, 139, 101, 166, 99, 0, 0, 0, 0, 113,
	296, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 286, 252, 280, 273, 251, 250, 191,
	275, 276, 277, 278, 0, 92, 274, 281, 0, 279,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 0, 0, 307, 0, 264, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 305, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 196,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 297,
	306, 303, 304, 301, 302, 300, 299, 298, 308, 289,
	290, 291, 292, 294, 131, 293, 83, 0, 114, 175,
	139, 101, 166, 99, 0, 0, 0, 0, 113, 296,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 286, 252, 280, 273, 552, 250, 191, 275,
	276, 277, 278, 0, 92, 274, 281, 0, 279, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 307, 0, 264, 0, 0, 260, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 305, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 196, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 297, 306,
	303, 304, 301, 302, 300, 299, 298, 308, 289, 290,
	291, 292, 294, 0, 293, 83, 0, 114, 175, 139,
	101, 166, 131, 0, 0, 0, 499, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 501, 502, 503, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 496,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 196, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	81, 0, 0, 501, 502, 503, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 196, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 0, 193,
	0, 0, 192, 190, 191, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 196, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 83, 0, 114, 175, 139, 101, 166, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 73, 0, 0, 0,
	79, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 75, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 114, 175, 139, 101, 166, 131, 0, 0,
	0, 601, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 192,
	190, 191, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 196, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 193, 0, 0, 192, 190,
	191, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	196, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 83, 0, 114,
	175, 139, 101, 166, 99, 0, 620, 0, 0, 113,
	0, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 621, 622, 623,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 196,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 114, 175,
	139, 101, 166, 131, 0, 0, 0, 601, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 113, 0, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 192, 190, 191, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 599, 142, 116, 155, 138, 162, 196, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 83, 0, 114, 175, 139, 101,
	166, 579, 99, 0, 0, 0, 0, 113, 0, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 192, 190, 191, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 196, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 0, 0, 0, 0,
	0, 0, 131, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 192, 190, 191, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 196, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 192, 190, 191, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 195, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 196, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 501, 502, 503, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 196, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 83, 0, 114, 175, 139, 101, 166, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 0,
	0, 192, 190, 191, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 196, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	83, 0, 114, 175, 139, 101, 166, 99, 0, 0,
	0, 0, 113, 0, 115, 0, 0, 148, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	192, 190, 191, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	137, 0, 0, 151, 104, 103, 112, 0, 0, 0,
	95, 0, 143, 133, 163, 0, 134, 142, 116, 155,
	138, 162, 196, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 149, 165, 177,
	0, 0, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 83,
	0, 114, 175, 139, 101, 166, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 738, 0, 0, 739, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 196, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 83, 0,
	114, 175, 139, 101, 166, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	196, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 114,
	175, 139, 101, 166,
}
var yyPact = [...]int{

	1451, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 811, 831, -1000, -1000, -1000, -1000,
	-1000, -1000, 648, 8911, 29, 50, -40, 10673, 47, 299,
	11420, -1000, -25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-30, 11420, 383, 491, -1000, -1000, -1000, -1000, -1000, 805,
	809, 599, 792, 713, -1000, 6382, 28, 9418, 10424, 5350,
	-1000, 381, 44, 11420, -175, 11918, 24, 24, 24, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46, 11420,
	-1000, 11420, 16, 377, 16, 16, 16, 11420, -1000, 84,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11420, 376, 765,
	75, 3995, 3995, 3995, 3995, -20, 3995, -134, -106, 681,
	-1000, -1000, -1000, -1000, 3995, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11420, 693, 651, 342, 771,
	7159, 7159, 811, -1000, 491, -1000, -1000, -1000, 759, -1000,
	-1000, 207, 820, -1000, 8164, 83, -1000, 7159, 2005, 571,
	-1000, -1000, -1000, -1000, 571, 76, 193, -1000, -1000, -1000,
	7657, 7657, 7657, 7657, 7657, 7657, -1000, -1000, -1000, -1000,
	-1000, -1000, 571, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6901, 7906, 571, 571, 571,
	571, 571, 571, 571, 571, 7159, 571, 571, 571, 571,
	571, 571, 571, 571, 571, 571, 571, 571, 571, 10175,
	610, 714, -1000, -1000, -1000, 789, 8662, 9925, 11420, 538,
	-1000, 548, 5079, -135, -1000, -1000, -1000, 131, 9667, -1000,
	-1000, -1000, 762, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 520, -1000, 1547, 359,
	3995, 38, 584, 358, 151, 350, 11420, 11420, 3995, 33,
	11420, 785, 680, 11420, 335, 334, -1000, 3724, -1000, 3995,
	3995, 3995, 3995, 3995, 3995, 3995, 3995, -1000, -1000, -1000,
	-1000, -1000, -1000, 3995, 3995, -1000, -119, -91, -1000, 11420,
	-1000, -1000, 120, 120, 1547, 11420, -1000, -1000, -1000, 826,
	109, 372, 81, 549, -1000, 315, 805, 342, 713, 11669,
	699, -1000, -1000, 11420, -1000, 7159, 7159, 279, -1000, 10922,
	-1000, -1000, -1000, -1000, -1000, 3182, 118, 7657, 311, 124,
	7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657,
	7657, 7657, 7657, 7657, 7657, 387, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 330, -1000, 491, 1039, 1039, 200,
	-1000, 79, 79, 79, 79, 79, 79, 5608, 342, 518,
	158, 6901, -1000, 1783, 6382, 6382, 7159, 7159, 11171, 11171,
	6382, 794, 143, 158, 11171, -1000, 342, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6382, 6382, 6382, 6382, 144, 11420,
	-1000, 11171, 9418, 9418, 9418, 9418, 9418, -1000, 710, 704,
	-1000, 722, 703, 723, 11420, -1000, 513, 8662, 116, 571,
	-1000, 11420, -1000, -5, 424, 9418, 11420, -1000, -1000, 4808,
	548, -135, 541, -1000, -145, -140, 6640, 78, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2911, 219, 270, -86, -1000,
	-1000, -1000, -1000, 585, -1000, 585, 585, 585, 585, -58,
	-58, -58, -58, -1000, -1000, -1000, -1000, -1000, 647, 644,
	-1000, 585, 585, 585, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 642, 642, 642, 597, 597, 650, -1000, 11420, -190,
	327, 3995, 784, 3995, -1000, 183, -1000, 11420, -1000, -1000,
	11420, 3995, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	509, -1000, 545, -1000, -1000, 736, 7159, 7159, 3453, 7159,
	-1000, -1000, -1000, 771, -1000, 794, 810, -1000, 755, 754,
	6382, -1000, -1000, 118, 145, -1000, -1000, 340, -1000, -1000,
	-1000, -1000, 73, 571, -1000, 1852, -1000, -1000, -1000, -1000,
	311, 7657, 7657, 7657, 1692, 1852, 1935, 1525, 1499, 79,
	155, 155, 92, 92, 92, 92, 92, 298, 298, -1000,
	-1000, -1000, 342, 193, -1000, -1000, 193, -1000, 342, 6382,
	543, -1000, -1000, 7159, -1000, 342, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 507, 507, 427,
	234, 583, -1000, 68, 535, 507, 6382, 240, -1000, 7159,
	342, -1000, 507, 342, 507, 507, 663, 752, 571, -1000,
	539, -1000, 129, 714, 635, 678, 676, -1000, -1000, -1000,
	-1000, 702, -1000, 701, -1000, -1000, -1000, -1000, -1000, 43,
	42, 40, 11918, -1000, 818, 9418, 524, -1000, -1000, 541,
	-135, -158, -1000, -1000, -1000, 158, -1000, 413, 537, 2635,
	-1000, -1000, -1000, -1000, -1000, -1000, 630, 777, 168, 171,
	323, -1000, -1000, 767, -1000, 196, -88, -1000, -1000, 314,
	-58, -58, -1000, -1000, 78, 761, 78, 78, 78, 434,
	434, -1000, -1000, -1000, -1000, 292, -1000, -1000, -1000, 282,
	-1000, 658, 11918, 3995, -1000, 4537, -1000, -1000, -1000, -1000,
	-1000, -1000, 929, 404, 172, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -7, -1000, 3995, -1000,
	214, 11420, 11420, 1547, 787, 11420, 734, 158, 158, 64,
	-1000, -1000, 11420, -1000, -1000, -1000, -1000, 527, -1000, -1000,
	-1000, 4266, 6382, -1000, 1692, 1852, 1440, -1000, 7657, 7657,
	-1000, -1000, 507, 6382, 158, -1000, -1000, -1000, 619, 387,
	619, 7657, 7657, 3453, 7657, 7657, -185, 465, 138, -1000,
	7159, 242, -1000, -1000, -1000, -1000, -1000, 656, 11171, 571,
	-1000, 8413, -1000, 11918, 811, 11171, 7159, 7159, -1000, -1000,
	7159, 617, -1000, 7159, -1000, -1000, -1000, 571, 571, 571,
	461, -1000, 811, 524, -1000, -1000, -1000, -151, -152, -1000,
	-1000, -1000, 2911, -1000, 2911, 11918, -1000, 321, 317, -1000,
	-1000, 655, 74, -1000, -1000, -1000, 391, 78, 78, -1000,
	192, -1000, -1000, -1000, 488, -1000, 473, 528, 470, 11420,
	-1000, -1000, 453, -1000, 128, -1000, -1000, 11918, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11918, 11420, -1000, -1000, -1000, -1000, -1000, 11918, -1000, -1000,
	434, 7159, -1000, -1000, -1000, 120, -1000, -1000, 4537, -1000,
	818, 9418, -1000, -1000, 342, -1000, 7657, 1852, 1852, -1000,
	-1000, 342, 585, 585, -1000, 585, 597, -1000, 585, -38,
	585, -41, 571, 342, 342, 1873, 1813, -1000, 1721, 1763,
	571, -182, -1000, 158, 7159, -207, 779, 526, 431, -1000,
	-1000, 6124, 342, 463, 62, 461, 805, -1000, 158, 158,
	158, 11918, 158, 11918, 11918, 11918, 9169, 11918, 805, -1000,
	-1000, -1000, -1000, 2635, -1000, 458, -1000, 585, -1000, -1000,
	-81, 825, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -58, 434, -58, 269, -1000, 256, 3995,
	4537, 2911, -1000, 578, -1000, -1000, -1000, -1000, 773, -1000,
	158, -1000, 815, 437, -1000, 1852, -1000, -1000, 93, -1000,
	-1000, -1000, -1000, -1000, -1000, 221, -1000, -1000, -1000, 7657,
	7657, -1000, 7657, 7657, 7657, 342, 434, 158, -1000, 5866,
	776, -1000, 571, -1000, -1000, 621, 10922, 10922, -1000, -1000,
	450, -1000, 428, 428, 428, 116, -1000, -1000, 110, 11918,
	-1000, 164, -1000, -161, 78, -1000, 78, 386, 374, -1000,
	-1000, -1000, 11918, 571, 813, 807, -1000, -1000, 342, 2135,
	2135, 2135, 2135, -3, -1000, -1000, -1000, 417, 823, -1000,
	571, -1000, 491, 52, -1000, 11918, -1000, -1000, -1000, -1000,
	-1000, 110, -1000, 276, 126, 434, -1000, 204, 775, -1000,
	772, -1000, -1000, -1000, -1000, -1000, 408, -8, -1000, 7159,
	7159, -1000, -1000, -1000, -1000, -1000, 342, 41, -199, 11171,
	431, 342, 10922, -1000, -1000, -1000, 212, -1000, -1000, -1000,
	434, -1000, -1000, 584, 405, -1000, 11918, 158, 417, -1000,
	731, -188, -203, 412, -1000, -1000, -1000, -1000, -190, -1000,
	-8, 750, -1000, 727, -1000, -1000, -1000, -11, -197, -13,
	-201, 571, -204, 7408, -1000, 2135, 342, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1056, 27, 26, 1055, 1053, 1052, 844, 842, 840,
	1051, 1047, 1046, 1045, 1044, 1043, 1041, 1038, 1037, 1036,
	1034, 1033, 1026, 1024, 1021, 1018, 1014, 139, 1011, 1008,
	1007, 64, 1005, 61, 1004, 1003, 38, 133, 47, 35,
	705, 1002, 43, 80, 73, 995, 45, 993, 992, 66,
	990, 59, 988, 987, 1510, 985, 984, 9, 31, 983,
	980, 979, 978, 95, 96, 977, 976, 974, 971, 970,
	969, 49, 11, 13, 21, 15, 968, 92, 6, 966,
	48, 964, 963, 962, 956, 25, 955, 51, 954, 16,
	50, 950, 17, 58, 36, 20, 7, 65, 56, 948,
	33, 55, 42, 947, 945, 370, 944, 943, 942, 941,
	940, 939, 149, 287, 938, 935, 928, 927, 41, 191,
	972, 526, 60, 926, 925, 5, 922, 1601, 63, 57,
	22, 921, 29, 283, 37, 920, 916, 34, 914, 46,
	912, 911, 910, 908, 907, 903, 902, 252, 901, 900,
	899, 30, 10, 895, 893, 52, 23, 887, 886, 885,
	40, 53, 881, 44, 880, 878, 877, 872, 24, 14,
	871, 12, 869, 8, 868, 867, 2, 865, 18, 863,
	3, 862, 4, 39, 861, 857, 32, 856, 855, 19,
	854, 852, 851, 850, 0, 163, 848, 838, 100,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 196, 196, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 135, 135, 11, 11, 11, 11, 11, 11,
	11, 182, 182, 181, 180, 180, 179, 179, 178, 16,
	165, 166, 166, 166, 161, 138, 138, 139, 139, 139,
	139, 139, 146, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 143, 143, 143,
	143, 143, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 160, 160, 147, 147, 155,
	155, 156, 156, 156, 153, 153, 154, 154, 157, 157,
	157, 148, 148, 148, 148, 148, 148, 148, 150, 150,
	158, 158, 151, 151, 151, 152, 152, 152, 159, 159,
	159, 159, 159, 149, 149, 162, 162, 174, 174, 173,
	173, 173, 164, 164, 170, 170, 170, 170, 170, 163,
	163, 172, 172, 171, 167, 167, 167, 168, 168, 168,
	169, 169, 169, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 177, 175, 175, 176, 176, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 110, 110, 107, 107, 108, 108, 109, 109, 109,
	111, 111, 111, 136, 136, 136, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 24, 25, 25,
	25, 186, 186, 186, 186, 186, 186, 26, 26, 187,
	187, 197, 27, 28, 28, 29, 29, 29, 33, 33,
	33, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 123, 123, 123, 125, 125, 125, 125,
	122, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	56, 56, 92, 92, 94, 94, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 131, 131, 130, 130,
	130, 129, 50, 50, 50, 52, 51, 51, 51, 51,
	53, 53, 55, 55, 54, 54, 57, 57, 57, 57,
	58, 58, 40, 40, 40, 40, 40, 40, 40, 106,
	106, 60, 60, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 70, 70, 70, 70, 70, 70, 61,
	61, 61, 61, 61, 61, 61, 36, 36, 71, 71,
	71, 77, 72, 72, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 191, 190, 68, 68,
	68, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 67, 67, 67, 67,
	67, 67, 67, 67, 198, 198, 69, 69, 69, 69,
	34, 34, 34, 34, 34, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 81, 81, 35, 35, 79, 79, 80, 82, 82,
	78, 78, 78, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 184, 184, 65, 65, 65,
	83, 83, 84, 84, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 89, 90, 90, 90, 62,
	62, 62, 62, 62, 62, 91, 91, 91, 91, 95,
	95, 73, 73, 75, 75, 74, 76, 185, 185, 185,
	96, 96, 100, 97, 97, 101, 101, 101, 99, 99,
	99, 126, 126, 126, 104, 104, 112, 112, 113, 113,
	105, 105, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 116, 116, 117, 117, 117,
	124, 124, 120, 120, 121, 121, 127, 127, 127, 127,
	127, 128, 128, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 189, 189, 189, 194, 195, 132, 133, 133,
	133,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 4, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 4, 4,
	7, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	3, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 1, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	4, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 0, 2, 2,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 136, 137, 139, 138, 164, 140, 157,
	49, 176, 177, 179, 180, 25, 158, 159, 162, 163,
	181, 182, 183, -194, 8, 261, 53, -193, 277, -85,
	15, -29, 5, -27, -197, -27, -27, -27, -27, -27,
	-165, 53, -117, 145, 95, 172, 253, 142, 143, 149,
	-120, 57, -119, 269, 176, 190, 184, 210, 202, 200,
	203, 240, 68, 179, 249, 160, 199, 195, 193, 27,
	215, 274, 194, 155, 154, 216, 220, 241, 188, 189,
	243, 214, 156, 32, 271, 34, 168, 244, 218, 213,
	209, 212, 187, 208, 38, 222, 221, 223, 239, 205,
	196, 18, 247, 163, 166, 217, 219, 150, 170, 273,
	245, 192, 167, 162, 248, 180, 242, 251, 37, 227,
	186, 153, 177, 174, 206, 169, 197, 198, 211, 185,
	207, 178, 171, 164, 250, 228, 275, 204, 201, 175,
	173, 232, 233, 234, 235, 272, 246, 229, -105, 145,
	147, 143, 143, 144, 145, 253, 142, 143, -54, -127,
	61, 62, 60, 57, -119, 145, 172, 143, 131, 203,
	136, 230, 144, 32, 170, -136, 143, 178, -107, 173,
	232, 233, 234, 235, 57, 242, 241, 236, -127, 178,
	-132, -132, -132, -132, -132, 182, -127, 57, -2, -89,
	17, 16, -5, -3, -194, 6, 20, 21, -33, 39,
	40, -28, -39, 122, -40, -127, -59, 97, -64, 29,
	61, 60, 57, -119, 23, -78, -63, -60, -76, -77,
	131, 132, 120, 121, 128, 98, -190, -191, -68, -66,
	-67, -69, -120, 59, 69, 63, 64, 65, 66, 72,
	58, 70, 73, 74, -74, -194, 56, 43, 44, 262,
	263, 264, 265, 268, 266, 100, 33, 252, 260, 259,
	258, 256, 257, 254, 255, 148, 253, 126, 261, -105,
	-42, -43, -44, -45, -56, -77, -194, -54, 11, -49,
	-54, -97, -135, 178, -101, 242, 241, -121, -99, -120,
	-118, 240, 203, 239, 141, 96, 22, 24, 225, 99,
	131, 16, 100, 130, 262, 136, 47, 254, 255, 252,
	264, 265, 253, 230, 29, 10, 25, 158, 21, 124,
	138, 103, 104, 161, 23, 159, 74, 19, 50, 11,
	13, 14, 148, 147, 115, 144, 45, 8, 56, 26,
	112, 41, 28, 43, 113, 17, 256, 257, 31, 268,
	165, 126, 48, 35, 97, 72, 51, 95, 15, 46,
	114, 139, 261, 44, 142, 6, 267, 30, 157, 42,
	143, 231, 102, 146, 73, 5, 149, 9, 49, 52,
	258, 259, 260, 33, 101, 12, -166, -161, 57, 144,
	-54, 261, -120, -113, 148, -113, -113, 143, -54, -54,
	-112, 148, 57, -112, -112, -112, -54, 133, -54, 57,
	30, 253, 57, 170, 143, 171, 145, -133, -194, -121,
	-133, -133, -133, 174, 175, -133, 243, -108, 237, 51,
	-133, -127, 11, 22, -194, 52, -195, 55, -90, 19,
	31, -40, -127, -86, -87, -40, -85, -2, -27, 35,
	-31, 21, 67, 11, -123, 96, 95, 112, -122, 22,
	-125, 60, 61, 62, -120, 133, -40, -61, 115, 97,
	113, 114, 99, 117, 116, 127, 120, 121, 122, 123,
	124, 125, 126, 118, 119, 130, 105, 106, 107, 108,
	109, 110, 111, -106, -194, -77, -194, 134, 135, -184,
	71, -64, -64, -64, -64, -64, -64, -194, -2, -72,
	-40, -194, 60, -64, -194, -194, -194, -194, -194, -194,
	-194, -194, -81, -40, -194, -198, -194, -198, -198, -198,
	-198, -198, -198, -198, -194, -194, -194, -194, -55, 26,
	-54, 30, 54, -50, -52, -51, -53, 41, 45, 47,
	42, 43, 44, 48, -131, 22, -42, -194, -130, 166,
	-129, 22, -127, -54, -49, -196, 54, 11, 52, 54,
	-97, 178, -98, -102, 243, 245, 105, -126, -120, -189,
	29, 60, 61, 62, 30, 55, 54, -139, -142, -144,
	-143, -145, -146, -140, -141, 200, 201, 131, 204, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 30,
	160, 197, 198, 199, 94, 216, 217, 218, 219, 220,
	221, 222, 223, 202, 184, 185, 186, 187, 188, 189,
	190, 192, 193, 194, 195, 196, 57, -133, 145, -182,
	52, 57, 97, 57, -54, -54, -133, 146, -54, 23,
	51, -54, 57, 57, -128, -127, -118, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, 244, -110, 231,
	238, -54, -186, -3, -7, -9, -8, 57, -189, -186,
	-138, -139, -187, -127, 9, 115, 54, 18, 133, 54,
	-88, 24, 25, -89, -195, -33, -65, -120, 63, 66,
	-32, 42, -54, -40, -40, -70, 72, 97, 73, 74,
	-122, 122, -128, -121, -118, -64, -71, -74, -77, 71,
	115, 113, 114, 99, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -134,
	57, -189, 57, -63, 60, 61, -63, 71, -38, 21,
	-37, -39, -195, 54, -195, -2, -188, 75, 76, 77,
	78, 79, 80, 81, 82, 94, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, -37, -37, -40,
	-40, -78, -120, -127, -78, -37, -31, -79, -80, 101,
	-78, -195, -37, -38, -37, -37, -93, 29, 166, -54,
	-96, -100, -78, -43, -44, -44, -43, -44, 41, 41,
	41, 46, 41, 46, 41, -51, -127, -195, -57, 49,
	147, 50, -194, -129, -93, 52, -42, -54, -101, -98,
	54, 244, 246, 247, 51, -40, -152, 130, -167, -168,
	-169, -121, -189, 63, -161, -162, -170, 150, 153, 149,
	-163, 144, 28, -157, 72, 97, -153, 228, -147, 53,
	-147, -147, -147, -147, -151, 203, -151, -151, -151, 53,
	53, -147, -147, -147, -155, 53, -155, -155, -156, 53,
	-156, -124, 52, -54, -180, 272, -181, 57, -133, 23,
	-133, -114, 141, 138, 139, -177, 137, 225, 203, 68,
	29, 15, 262, 166, 275, 57, 167, -54, -54, -133,
	-109, 11, 115, 54, -195, 54, 37, -40, -40, -128,
	-87, -90, -104, 19, 11, 33, 33, -37, 72, 73,
	74, 133, -194, -71, -64, -64, -64, -36, 161, 96,
	-195, -195, -37, 54, -40, -195, -195, -195, 54, 52,
	22, 54, 11, 133, 54, 11, -195, -37, -82, -80,
	103, -40, -195, -195, -195, -195, -195, -62, 30, 33,
	-2, -194, 33, -194, -58, 54, 12, 105, -47, -46,
	51, 52, -48, 51, -46, 41, 41, 144, 144, 144,
	-94, -120, -58, -42, -58, -102, -103, 248, 245, 251,
	57, -189, 54, -169, 105, 53, 28, -163, -163, 57,
	57, -148, 29, 72, -154, 229, 63, -151, -151, -152,
	30, -152, -152, -152, -160, -189, -160, 63, 63, 51,
	-120, -133, -179, -178, -121, -132, -183, 172, 151, 152,
	155, 154, 57, 144, 28, 150, 153, 166, 149, -183,
	172, -115, -116, 146, 22, 144, 28, 166, -133, -111,
	113, 12, -127, -127, -139, 22, -127, 38, 133, -54,
	-41, 11, 122, -121, -38, -36, 96, -64, -64, -195,
	-39, -137, 131, 200, 160, 199, 195, 214, 205, 227,
	197, 228, 201, -134, -137, -64, -64, -121, -64, -64,
	269, -85, 104, -40, 102, -95, 51, -96, -73, -75,
	-74, -194, -2, -91, -125, -94, -85, -100, -40, -40,
	-40, 53, -40, -194, -194, -194, -195, 54, -85, -58,
	245, 249, 250, -168, -169, -172, -171, -120, 57, 57,
	-150, 51, -189, 63, 64, 72, 252, 69, 55, -152,
	-152, 57, 131, 55, 54, 55, 54, 55, 54, -54,
	54, 105, -132, -120, -132, -120, -54, -132, -120, -189,
	-40, -186, -58, -42, -195, -64, -195, -147, -147, -147,
	-156, -147, 189, -147, 189, -194, -195, -195, -195, 54,
	19, -195, 54, 19, -194, -35, 267, -40, -185, 276,
	27, -95, 54, -195, -195, -195, 54, 133, -195, -89,
	-92, -120, -92, -92, -92, -130, -120, -89, 55, 54,
	-147, -158, 225, 9, -151, -189, -151, 63, 63, -133,
	-178, -169, 53, 26, -83, 13, -151, 57, 63, -64,
	-64, -64, -64, -64, -195, -189, 122, -72, 28, -75,
	33, -2, -194, -125, -125, 54, 55, -195, -195, -195,
	-57, -174, -173, 52, 156, 68, -171, -159, 150, 28,
	149, 252, -152, -152, 55, 55, -92, -194, -84, 14,
	16, -195, -195, -195, -195, -195, -34, 115, 272, 9,
	-73, -2, 133, -120, -173, 57, -164, 105, -189, -149,
	68, 28, 28, 55, -175, -176, 166, -40, -72, -195,
	270, 48, 273, -96, -195, -125, 63, -189, -182, -195,
	54, -120, 38, 271, 274, -180, -176, 33, 38, 168,
	272, 169, 273, -194, 274, -64, 165, -195, -195,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 544, 0, 301, 301, 301, 301,
	301, 301, 0, 617, 600, 0, 0, 0, 0, -2,
	277, 278, 0, 280, 281, 847, 847, 847, 847, 847,
	0, 0, 0, 0, 37, 38, 845, 1, 3, 552,
	0, 0, 305, 308, 303, 0, 600, 0, 0, 0,
	64, 0, 0, 832, 0, 833, 598, 598, 598, 618,
	619, 622, 623, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	834, 835, 836, 837, 838, 839, 840, 841, 0, 0,
	601, 0, 596, 0, 596, 596, 596, 0, 235, 374,
	626, 627, 628, 629, 630, 832, 833, 0, 0, 0,
	0, 848, 848, 848, 848, 0, 848, 0, 265, 254,
	256, 257, 258, 259, 848, 274, 275, 264, 276, 279,
	282, 283, 284, 285, 286, 0, 0, 297, 30, 556,
	0, 0, 544, 32, 0, 301, 306, 307, 311, 309,
	310, 302, 0, 319, 323, 0, 382, 0, 387, 389,
	-2, -2, -2, -2, 0, 424, 425, 426, 427, 428,
	0, 0, 0, 0, 0, 0, 450, 451, 452, 453,
	454, 455, 520, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 391, 392, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 0, 484, 484, 484,
	484, 484, 484, 484, 484, 0, 0, 0, 0, 0,
	0, 333, 335, 336, 337, 356, 0, 358, 0, 0,
	45, 49, 0, 823, 583, -2, -2, 0, 0, 624,
	625, -2, 752, -2, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 0, 81, 0, 0,
	848, 0, 71, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 0, 0, 234, 0, 236, 848,
	848, 848, 848, 848, 848, 848, 848, 245, 849, 850,
	246, 247, 248, 848, 848, 250, 0, 0, 266, 0,
	260, 287, 0, 0, 0, 0, 31, 846, 25, 0,
	0, 553, 0, 545, 546, 549, 552, 30, 308, 0,
	313, 312, 304, 0, 320, 0, 0, 0, 324, 0,
	330, 326, 327, 328, 329, 0, 385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 409, 410, 411, 412,
	413, 414, 415, 388, 0, 402, 0, 0, 0, 534,
	535, 444, 445, 446, 447, 448, 449, 315, 30, 0,
	422, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 512, 0, 476, 0, 477, 478, 479,
	480, 481, 482, 483, 0, 315, 0, 0, 47, 0,
	373, 0, 0, 0, 0, 0, 0, 362, 0, 0,
	365, 0, 0, 0, 0, 357, 0, 0, 376, 796,
	359, 0, 361, -2, 0, 0, 0, 43, 44, 0,
	50, 823, 52, 53, 0, 0, 0, 165, 591, 592,
	593, 842, 843, 844, 589, 194, 0, 148, 144, 88,
	89, 90, 91, 137, 94, 137, 137, 137, 137, 162,
	162, 162, 162, 120, 121, 122, 123, 124, 0, 0,
	107, 137, 137, 137, 111, 127, 128, 129, 130, 131,
	132, 133, 134, 92, 95, 96, 97, 98, 99, 100,
	101, 139, 139, 139, 141, 141, 620, 66, 0, 74,
	0, 848, 0, 848, 79, 0, 210, 0, 229, 597,
	0, 848, 232, 233, 375, 631, 632, 237, 238, 239,
	240, 241, 242, 243, 244, 249, 253, 251, 267, 261,
	262, 255, 288, 291, 292, 293, 294, 295, 296, 289,
	0, 85, 298, 299, 557, 0, 0, 0, 0, 0,
	548, 550, 551, 556, 33, 311, 0, 537, 0, 0,
	0, 314, 28, 383, 384, 386, 403, 0, 405, 407,
	325, 321, 0, 521, -2, 393, 394, 418, 419, 420,
	0, 0, 0, 0, 416, 398, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 443,
	495, 496, 0, 441, 523, 524, 442, 536, 0, 0,
	316, 317, 421, 0, 575, 30, 457, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 0, 0, 0,
	0, 0, 520, 0, 0, 0, 0, 518, 515, 0,
	0, 485, 0, 0, 0, 0, 0, 0, 0, 372,
	380, 580, 0, 334, 352, 354, 0, 349, 363, 364,
	366, 0, 368, 0, 370, 371, 338, 339, 340, 0,
	0, 0, 0, 360, 380, 0, 380, 46, 584, 51,
	0, 0, 56, 57, 585, 586, 587, 0, 80, 195,
	197, 200, 201, 202, 82, 83, 0, 0, 0, 0,
	0, 189, 190, 151, 149, 0, 146, 145, 93, 0,
	162, 162, 114, 115, 165, 0, 165, 165, 165, 0,
	0, 108, 109, 110, 102, 0, 103, 104, 105, 0,
	106, 0, 0, 848, 68, 0, 72, 73, 69, 599,
	70, 847, 0, 0, 612, 211, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 0, 228, 848, 231,
	270, 0, 0, 0, 0, 0, 0, 554, 555, 0,
	547, 26, 0, 594, 595, 538, 539, 331, 404, 406,
	408, 0, 315, 395, 416, 399, 0, 396, 0, 0,
	390, 458, 0, 0, 423, -2, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 0, 516,
	0, 0, 475, 486, 487, 488, 489, 569, 0, 0,
	-2, 0, 36, 0, 544, 0, 0, 0, 346, 353,
	0, 0, 347, 0, 348, 367, 369, 0, 0, 0,
	0, 344, 544, 380, 42, 54, 55, 0, 0, 61,
	166, 167, 0, 198, 0, 0, 184, 0, 0, 187,
	188, 158, 0, 150, 87, 147, 0, 165, 165, 116,
	0, 117, 118, 119, 0, 135, 0, 0, 0, 0,
	621, 67, 75, 76, 0, 203, 847, 0, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 847,
	0, 0, 847, 613, 614, 615, 616, 0, 230, 252,
	0, 0, 268, 269, 86, 0, 300, 558, 0, 27,
	380, 0, 322, 522, 0, 397, 0, 417, 400, 459,
	318, 0, 137, 137, 500, 137, 141, 503, 137, 505,
	137, 508, 0, 0, 0, 0, 0, 521, 0, 0,
	0, 513, 474, 519, 0, 577, 0, 569, 559, 571,
	573, 0, 30, 0, 565, 0, 552, 581, 381, 582,
	350, 0, 355, 0, 0, 0, 358, 0, 552, 41,
	58, 59, 60, 196, 199, 0, 191, 137, 185, 186,
	160, 0, 152, 153, 154, 155, 156, 157, 138, 112,
	113, 163, 164, 162, 0, 162, 0, 142, 0, 848,
	0, 0, 204, 0, 205, 207, 208, 209, 0, 271,
	272, 290, 540, 332, 460, 401, 463, 497, 162, 501,
	502, 504, 506, 507, 509, 0, 465, 464, 466, 0,
	0, 469, 0, 0, 0, 0, 0, 517, 34, 0,
	0, 35, 0, 574, -2, 0, 0, 0, 48, 39,
	0, 342, 0, 0, 0, 376, 345, 40, 176, 0,
	193, 168, 161, 0, 165, 136, 165, 0, 0, 65,
	77, 78, 0, 0, 542, 0, 498, 499, 0, 0,
	0, 0, 0, 490, 473, 514, 578, 579, 0, 572,
	0, -2, 0, 567, 566, 0, 351, 377, 378, 379,
	341, 175, 177, 0, 182, 0, 192, 173, 0, 170,
	172, 159, 125, 126, 140, 143, 0, 0, 29, 0,
	0, 510, 467, 468, 470, 471, 0, 0, 0, 0,
	562, 30, 0, 343, 178, 179, 0, 183, 181, 84,
	0, 169, 171, 71, 0, 224, 0, 543, 541, 472,
	0, 0, 0, 570, -2, 568, 180, 174, 74, 223,
	0, 0, 491, 0, 494, 206, 225, 0, 492, 0,
	0, 0, 0, 0, 493, 0, 0, 226, 227,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 133, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 277,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:327
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:332
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:363
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:381
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:428
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:438
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:487
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:572
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:617
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:645
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:674
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:917
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:930
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:938
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:942
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:948
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1082
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1127
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1237
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1241
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1264
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1269
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1274
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1278
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1313
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1317
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1329
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1337
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1342
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1436
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1490
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = "extended "
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.str = "full "
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1530
		{
			yyVAL.showFilter = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1548
		{
			yyVAL.str = SessionStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1552
		{
			yyVAL.str = GlobalStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &Begin{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Commit{}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Rollback{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &OtherRead{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1681
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			setAllowComments(yylex, true)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.bytes2 = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = UnionStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.str = UnionAllStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.str = UnionDistinctStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = SQLCacheStr
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = DistinctStr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = StraightJoinHint
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1750
		{
			yyVAL.selectExprs = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1754
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1764
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1787
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1821
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1863
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1896
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1908
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1914
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1916
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1926
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1931
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = JoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = JoinStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = JoinStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1968
		{
			yyVAL.str = StraightJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.str = LeftJoinStr
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = LeftJoinStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = RightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = RightJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = NaturalJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2020
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2025
		{
			yyVAL.indexHints = nil
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2029
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2033
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2037
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2060
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2110
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2114
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2130
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = IsNullStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = IsNotNullStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = IsTrueStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2156
		{
			yyVAL.str = IsNotTrueStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = IsFalseStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = IsNotFalseStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = EqualStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2174
		{
			yyVAL.str = LessThanStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = GreaterThanStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = LessEqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = GreaterEqualStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = NotEqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2217
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = BooleanModeStr
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2559
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.str = QueryExpansionStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2651
		{
			yyVAL.str = string("")
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2671
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2694
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = &NullVal{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2760
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2765
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2791
		{
			yyVAL.exprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2809
		{
			yyVAL.orderBy = nil
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2834
		{
			yyVAL.str = AscScr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.str = AscScr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.str = DescScr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2847
		{
			yyVAL.limit = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2855
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2859
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2864
		{
			yyVAL.str = ""
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = ForUpdateStr
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = ShareModeStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2898
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2902
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2906
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2925
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2930
		{
			yyVAL.updateExprs = nil
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2934
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2975
		{
			yyVAL.returning = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3002
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3008
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3026
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3033
		{
			yyVAL.bytes = []byte("charset")
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &Default{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3057
		{
			yyVAL.byt = 0
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.byt = 1
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3067
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = IgnoreStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3094
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3114
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			decNesting(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3427
		{
			forceEOF(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3432
		{
			forceEOF(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			forceEOF(yylex)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
