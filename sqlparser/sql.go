// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const REGEXP = 57452
const IN = 57453
const SHIFT_LEFT = 57454
const SHIFT_RIGHT = 57455
const DIV = 57456
const MOD = 57457
const UNARY = 57458
const COLLATE = 57459
const BINARY = 57460
const UNDERSCORE_BINARY = 57461
const JSON_EXTRACT_OP = 57462
const JSON_UNQUOTE_EXTRACT_OP = 57463
const CREATE = 57464
const ALTER = 57465
const DROP = 57466
const RENAME = 57467
const ANALYZE = 57468
const ADD = 57469
const SCHEMA = 57470
const TABLE = 57471
const INDEX = 57472
const VIEW = 57473
const TO = 57474
const IGNORE = 57475
const IF = 57476
const UNIQUE = 57477
const PRIMARY = 57478
const COLUMN = 57479
const CONSTRAINT = 57480
const SPATIAL = 57481
const FULLTEXT = 57482
const FOREIGN = 57483
const KEY_BLOCK_SIZE = 57484
const SHOW = 57485
const DESCRIBE = 57486
const EXPLAIN = 57487
const DATE = 57488
const ESCAPE = 57489
const REPAIR = 57490
const OPTIMIZE = 57491
const TRUNCATE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const VINDEX = 57500
const VINDEXES = 57501
const STATUS = 57502
const VARIABLES = 57503
const BEGIN = 57504
const START = 57505
const TRANSACTION = 57506
const COMMIT = 57507
const ROLLBACK = 57508
const DEALLOCATE = 57509
const PREPARE = 57510
const EXECUTE = 57511
const BIT = 57512
const TINYINT = 57513
const SMALLINT = 57514
const MEDIUMINT = 57515
const INT = 57516
const INTEGER = 57517
const BIGINT = 57518
const INTNUM = 57519
const REAL = 57520
const DOUBLE = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const DATABASES = 57558
const TABLES = 57559
const VITESS_KEYSPACES = 57560
const VITESS_SHARDS = 57561
const VITESS_TABLETS = 57562
const VSCHEMA_TABLES = 57563
const EXTENDED = 57564
const FULL = 57565
const PROCESSLIST = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const LOCAL = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const RETURNING = 57605

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	177, 281,
	178, 281,
	-2, 269,
	-1, 253,
	74, 548,
	100, 548,
	102, 548,
	108, 548,
	109, 548,
	110, 548,
	111, 548,
	112, 548,
	113, 548,
	114, 548,
	116, 548,
	117, 548,
	118, 548,
	119, 548,
	120, 548,
	121, 548,
	122, 548,
	123, 548,
	124, 548,
	125, 548,
	126, 548,
	127, 548,
	128, 548,
	129, 548,
	130, 548,
	133, 548,
	-2, 397,
	-1, 254,
	56, 533,
	74, 537,
	136, 645,
	137, 533,
	138, 533,
	-2, 527,
	-1, 255,
	136, 647,
	-2, 536,
	-1, 256,
	136, 648,
	-2, 534,
	-1, 257,
	136, 649,
	-2, 535,
	-1, 333,
	108, 800,
	-2, 65,
	-1, 334,
	108, 828,
	-2, 66,
	-1, 335,
	108, 788,
	-2, 67,
	-1, 339,
	108, 772,
	149, 772,
	-2, 609,
	-1, 341,
	108, 810,
	149, 810,
	-2, 611,
	-1, 565,
	74, 536,
	136, 647,
	-2, 463,
	-1, 616,
	55, 45,
	57, 45,
	-2, 47,
	-1, 774,
	136, 651,
	-2, 644,
	-1, 775,
	136, 645,
	-2, 533,
	-1, 1008,
	5, 31,
	-2, 429,
	-1, 1036,
	5, 30,
	-2, 580,
	-1, 1274,
	5, 31,
	-2, 581,
	-1, 1320,
	5, 30,
	-2, 583,
	-1, 1383,
	5, 31,
	-2, 584,
}

const yyPrivate = 57344

const yyLast = 12130

var yyAct = [...]int{
	280, 53, 1374, 947, 695, 1331, 561, 279, 1178, 1099,
	1206, 1179, 1280, 941, 899, 879, 224, 903, 1175, 730,
	512, 24, 611, 609, 861, 902, 1056, 560, 3, 1151,
	233, 1040, 800, 816, 862, 813, 927, 1102, 1003, 913,
	643, 628, 338, 1045, 849, 263, 496, 777, 489, 937,
	1090, 627, 613, 435, 53, 598, 331, 317, 502, 921,
	857, 510, 238, 225, 226, 227, 228, 316, 321, 242,
	276, 983, 327, 326, 58, 324, 1269, 59, 1403, 1393,
	1401, 232, 1381, 237, 815, 1399, 948, 1392, 1380, 578,
	1170, 315, 1266, 439, 1340, 1201, 1202, 1200, 239, 246,
	54, 29, 30, 188, 184, 185, 186, 1064, 893, 725,
	1063, 460, 629, 1065, 630, 964, 477, 248, 479, 638,
	737, 639, 1213, 1214, 894, 895, 727, 1081, 1217, 963,
	920, 1215, 1292, 728, 1356, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 928, 1254, 537,
	448, 63, 735, 1252, 229, 638, 737, 639, 626, 223,
	968, 474, 475, 905, 1307, 472, 473, 1400, 1398, 487,
	1375, 962, 1123, 858, 859, 880, 882, 449, 442, 65,
	66, 67, 68, 69, 526, 525, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 182, 462, 537, 464,
	1338, 181, 1120, 182, 466, 466, 466, 466, 1122, 703,
	466, 1332, 631, 915, 694, 187, 915, 1055, 466, 205,
	1054, 1053, 437, 445, 461, 463, 199, 1334, 183, 1004,
	915, 485, 549, 550, 1361, 1277, 900, 1134, 1019, 53,
	959, 956, 957, 997, 955, 1075, 748, 217, 517, 455,
	527, 537, 744, 537, 546, 509, 1221, 974, 1366, 548,
	784, 1127, 436, 508, 507, 1231, 499, 507, 1043, 966,
	969, 632, 441, 881, 782, 783, 781, 1172, 850, 262,
	509, 563, 564, 509, 567, 568, 569, 570, 571, 572,
	573, 574, 1357, 577, 579, 579, 579, 579, 579, 579,
	579, 579, 587, 588, 589, 590, 961, 257, 459, 698,
	928, 1379, 1216, 859, 498, 1333, 1079, 850, 1015, 1026,
	1014, 200, 610, 1369, 1339, 1337, 202, 1121, 960, 1119,
	1222, 917, 914, 209, 204, 914, 559, 451, 452, 453,
	808, 83, 504, 1385, 1152, 196, 1308, 320, 196, 914,
	443, 444, 492, 497, 912, 910, 918, 55, 911, 196,
	206, 508, 507, 212, 975, 1126, 965, 1298, 210, 518,
	994, 995, 996, 1154, 56, 196, 196, 83, 509, 967,
	1297, 196, 1094, 83, 580, 581, 582, 583, 584, 585,
	586, 500, 780, 201, 1093, 1016, 1082, 1364, 562, 617,
	1209, 625, 624, 1208, 508, 507, 1076, 950, 1156, 576,
	1160, 1174, 1155, 1153, 1162, 803, 1110, 1041, 1158, 709,
	203, 509, 213, 214, 215, 216, 221, 1157, 751, 752,
	708, 219, 218, 220, 638, 737, 639, 699, 697, 466,
	1159, 1161, 766, 768, 769, 692, 457, 466, 1108, 530,
	531, 532, 533, 534, 527, 450, 436, 537, 466, 466,
	466, 466, 466, 466, 466, 466, 180, 767, 231, 488,
	746, 508, 507, 466, 466, 466, 466, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 509, 196,
	537, 196, 467, 1389, 488, 1324, 1372, 196, 712, 1324,
	488, 635, 508, 507, 738, 731, 731, 196, 1344, 745,
	810, 83, 83, 83, 83, 488, 465, 83, 801, 509,
	1343, 638, 737, 639, 1218, 83, 740, 710, 778, 753,
	1324, 1325, 886, 314, 619, 1109, 1176, 196, 547, 1041,
	1114, 1111, 1104, 1105, 1112, 1107, 1106, 1289, 1288, 53,
	508, 507, 1197, 488, 1276, 488, 83, 1113, 1228, 1227,
	774, 1272, 336, 1116, 563, 1224, 1225, 509, 1224, 1223,
	755, 1011, 488, 770, 976, 488, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 620, 772,
	537, 812, 595, 488, 810, 488, 321, 321, 321, 321,
	321, 320, 528, 529, 530, 531, 532, 533, 534, 527,
	281, 610, 537, 883, 642, 641, 1042, 842, 845, 321,
	804, 807, 196, 851, 854, 763, 764, 1141, 60, 196,
	196, 196, 621, 847, 619, 26, 83, 1042, 812, 1011,
	863, 26, 887, 1021, 80, 83, 1066, 736, 736, 638,
	737, 639, 838, 839, 865, 866, 1018, 868, 846, 1034,
	595, 595, 876, 864, 1230, 1035, 867, 884, 26, 754,
	1011, 1319, 853, 1011, 855, 856, 594, 885, 891, 889,
	332, 562, 1041, 1226, 1068, 56, 440, 840, 841, 1020,
	892, 56, 239, 929, 930, 931, 907, 978, 466, 483,
	466, 802, 1017, 595, 623, 943, 622, 749, 466, 56,
	484, 923, 924, 925, 926, 1302, 922, 942, 56, 1191,
	1071, 469, 470, 471, 938, 1110, 476, 934, 935, 936,
	809, 811, 1046, 1047, 481, 933, 932, 71, 939, 940,
	696, 1211, 56, 1176, 56, 945, 83, 486, 1095, 852,
	898, 1052, 196, 196, 83, 1049, 196, 1108, 706, 196,
	480, 761, 1051, 196, 870, 83, 83, 83, 83, 83,
	83, 83, 83, 873, 998, 869, 243, 244, 874, 878,
	83, 83, 83, 83, 875, 871, 604, 605, 196, 778,
	872, 774, 1397, 1391, 196, 1133, 984, 979, 1396, 1038,
	779, 503, 987, 992, 600, 603, 604, 605, 601, 83,
	602, 606, 991, 196, 468, 468, 468, 468, 501, 83,
	468, 336, 1137, 1138, 1135, 1136, 986, 985, 468, 999,
	600, 603, 604, 605, 601, 490, 602, 606, 252, 1086,
	1046, 1047, 640, 458, 1109, 993, 1078, 491, 1371, 1114,
	1111, 1104, 1105, 1112, 1107, 1106, 1370, 1317, 1037, 516,
	1039, 1072, 1270, 980, 981, 982, 1113, 497, 1303, 952,
	705, 1131, 1103, 608, 503, 320, 320, 320, 320, 320,
	240, 241, 747, 990, 234, 1036, 1349, 321, 1348, 235,
	320, 989, 60, 1025, 1305, 1042, 505, 1358, 320, 1010,
	196, 1293, 743, 196, 196, 196, 196, 196, 62, 977,
	1059, 1050, 733, 7, 64, 196, 618, 1058, 196, 1060,
	1069, 57, 196, 734, 6, 1, 196, 196, 1007, 271,
	83, 270, 1023, 817, 1061, 732, 5, 741, 1268, 332,
	558, 949, 1085, 1098, 1087, 1088, 1089, 466, 634, 83,
	958, 1073, 1074, 1373, 1330, 693, 1205, 909, 901, 434,
	1083, 1084, 70, 702, 1365, 908, 1336, 1291, 1027, 916,
	1080, 1101, 466, 1006, 713, 714, 715, 716, 717, 718,
	719, 720, 1008, 1009, 1092, 919, 1210, 1368, 1077, 721,
	722, 723, 724, 648, 1115, 647, 645, 646, 644, 650,
	649, 739, 196, 208, 328, 83, 207, 83, 1012, 1013,
	773, 196, 329, 607, 196, 83, 1022, 1130, 633, 944,
	506, 1028, 72, 1029, 1030, 1031, 1032, 1118, 1117, 954,
	1125, 726, 973, 478, 1144, 211, 1181, 545, 53, 1145,
	988, 1062, 337, 1180, 1183, 1150, 1164, 750, 1163, 468,
	495, 1347, 1304, 1024, 1193, 1194, 1195, 468, 1184, 1177,
	575, 779, 774, 848, 1067, 1182, 1185, 261, 468, 468,
	468, 468, 468, 468, 468, 468, 1187, 765, 275, 272,
	863, 274, 273, 468, 468, 468, 468, 863, 1204, 259,
	756, 1199, 1033, 519, 1203, 260, 1091, 1091, 1219, 1220,
	250, 1171, 319, 551, 553, 554, 555, 556, 557, 591,
	599, 597, 757, 596, 1048, 336, 1044, 318, 1186, 1232,
	1140, 566, 516, 1265, 1355, 760, 28, 61, 468, 245,
	23, 22, 1234, 21, 904, 1237, 1198, 19, 18, 17,
	20, 16, 321, 15, 1173, 14, 32, 13, 12, 11,
	10, 1241, 9, 731, 8, 4, 236, 25, 2, 0,
	1188, 1189, 0, 1255, 1190, 1243, 320, 1192, 0, 0,
	1250, 1264, 1242, 0, 0, 0, 0, 0, 0, 802,
	1149, 0, 843, 843, 0, 0, 0, 0, 843, 0,
	0, 83, 0, 0, 196, 0, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 1282, 1283, 1284, 0,
	83, 0, 1247, 1248, 951, 1249, 953, 1279, 1251, 1285,
	1253, 1069, 0, 0, 972, 0, 1196, 0, 0, 1287,
	466, 552, 0, 468, 0, 0, 0, 0, 0, 0,
	1300, 773, 1212, 0, 0, 1240, 0, 0, 0, 1301,
	0, 0, 468, 83, 83, 322, 83, 0, 0, 0,
	1294, 0, 1296, 312, 305, 805, 806, 1290, 307, 308,
	309, 310, 0, 1181, 306, 313, 1321, 311, 0, 83,
	1180, 0, 196, 196, 1318, 1306, 196, 0, 0, 0,
	1239, 0, 1267, 190, 0, 736, 196, 1322, 1323, 562,
	1335, 1329, 0, 1320, 1346, 83, 0, 0, 468, 1341,
	468, 1342, 0, 0, 1244, 1345, 0, 0, 468, 0,
	1181, 1246, 53, 0, 325, 0, 0, 1180, 1359, 438,
	0, 0, 0, 1256, 1257, 1258, 1363, 0, 1261, 0,
	0, 0, 0, 0, 0, 83, 0, 83, 0, 1360,
	0, 1273, 1274, 1275, 1316, 1278, 1377, 0, 776, 468,
	0, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 83, 1387, 83, 83,
	0, 0, 1384, 1382, 0, 0, 0, 0, 1295, 0,
	0, 1394, 1395, 0, 0, 904, 0, 0, 0, 0,
	0, 1402, 0, 196, 863, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 83, 196, 0, 0, 0, 0,
	1315, 83, 0, 0, 0, 1314, 0, 446, 0, 447,
	0, 1100, 83, 0, 0, 454, 0, 0, 0, 196,
	0, 0, 1326, 1327, 1328, 456, 0, 0, 0, 0,
	0, 0, 890, 1097, 0, 0, 1376, 562, 0, 0,
	896, 0, 0, 0, 0, 0, 494, 0, 1350, 1351,
	1352, 1353, 1354, 0, 0, 0, 0, 0, 1124, 0,
	1143, 0, 0, 0, 1057, 0, 0, 0, 1367, 83,
	0, 83, 83, 83, 196, 83, 0, 0, 0, 0,
	0, 83, 1167, 468, 191, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 230, 0,
	1383, 0, 0, 1386, 0, 0, 0, 83, 83, 83,
	0, 0, 249, 1388, 191, 191, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 1096, 468, 0, 468,
	0, 904, 0, 904, 0, 0, 0, 0, 0, 0,
	593, 1262, 488, 0, 1406, 1407, 0, 0, 0, 616,
	0, 0, 468, 0, 83, 83, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 0, 83, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 468, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 1001, 1002, 0, 0, 0, 1143, 0, 0,
	468, 0, 83, 526, 525, 535, 536, 528, 529, 530,
	531, 532, 533, 534, 527, 843, 0, 537, 516, 0,
	1057, 0, 843, 0, 0, 0, 0, 0, 191, 0,
	191, 0, 0, 0, 0, 0, 191, 0, 0, 83,
	1263, 0, 0, 0, 0, 0, 191, 0, 0, 468,
	0, 468, 1207, 83, 0, 0, 1259, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	700, 701, 0, 0, 704, 0, 482, 707, 0, 0,
	0, 0, 0, 0, 1233, 1260, 0, 0, 26, 27,
	54, 29, 30, 1100, 904, 0, 0, 1235, 0, 0,
	0, 0, 0, 0, 1238, 0, 729, 45, 0, 0,
	0, 0, 31, 0, 0, 468, 1299, 0, 526, 525,
	535, 536, 528, 529, 530, 531, 532, 533, 534, 527,
	0, 762, 537, 0, 40, 0, 0, 0, 56, 0,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 191, 615,
	191, 0, 1281, 0, 1281, 1281, 1281, 0, 1286, 0,
	0, 0, 0, 0, 468, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	468, 468, 468, 1147, 1148, 0, 0, 0, 860, 0,
	0, 33, 34, 36, 35, 38, 1165, 1166, 0, 1168,
	1169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 46, 47, 888, 0, 48, 49, 37,
	0, 0, 0, 0, 0, 0, 0, 516, 516, 0,
	0, 41, 42, 0, 43, 44, 50, 51, 52, 0,
	1207, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 0, 1281, 0, 0, 0, 0, 0, 0,
	0, 191, 191, 0, 0, 191, 0, 0, 191, 0,
	0, 0, 711, 0, 0, 1362, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 191, 0, 970,
	0, 0, 971, 742, 0, 0, 0, 0, 0, 843,
	0, 666, 516, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 191, 0, 0, 1245, 1390, 0, 0, 0,
	0, 0, 0, 0, 711, 680, 681, 682, 683, 684,
	685, 686, 0, 687, 688, 689, 690, 691, 667, 668,
	669, 651, 652, 679, 0, 654, 0, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 671, 672, 673,
	674, 675, 676, 677, 678, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 249, 249, 0, 0, 844, 844,
	249, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 249, 249, 249, 0, 191,
	0, 844, 191, 191, 191, 191, 191, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 191, 0, 0,
	0, 615, 0, 0, 0, 191, 191, 0, 1309, 1310,
	0, 1311, 1312, 1313, 818, 819, 820, 821, 822, 823,
	824, 825, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 826, 526, 525, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 521, 0, 524, 0,
	191, 0, 0, 191, 538, 539, 540, 541, 542, 543,
	544, 0, 522, 523, 520, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 1404, 1005, 0, 1139, 0, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 0, 0,
	537, 0, 526, 525, 535, 536, 528, 529, 530, 531,
	532, 533, 534, 527, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 1129, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 413,
	0, 385, 425, 363, 377, 433, 378, 379, 406, 349,
	393, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 415, 396, 114, 0, 0, 0, 431,
	116, 401, 0, 150, 126, 0, 249, 389, 417, 391,
	411, 384, 407, 354, 400, 426, 376, 404, 427, 0,
	0, 0, 386, 82, 0, 0, 638, 637, 639, 906,
	0, 0, 0, 0, 93, 0, 0, 0, 403, 422,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 343, 402, 0, 347, 350, 432, 420, 369,
	370, 1070, 0, 0, 0, 0, 0, 0, 388, 392,
	408, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 844, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 409, 0, 342, 412, 418,
	383, 197, 421, 381, 380, 424, 139, 0, 0, 153,
	105, 104, 113, 416, 365, 373, 96, 371, 145, 135,
	165, 398, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 419, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 394, 395, 428, 429, 430, 410, 352,
	0, 358, 359, 0, 414, 397, 84, 0, 115, 177,
	141, 102, 168, 423, 413, 0, 385, 425, 363, 377,
	433, 378, 379, 406, 349, 393, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 415, 396,
	114, 0, 0, 0, 431, 116, 401, 0, 150, 126,
	0, 0, 389, 417, 391, 411, 384, 407, 354, 400,
	426, 376, 404, 427, 0, 0, 0, 386, 82, 0,
	0, 638, 637, 639, 906, 0, 0, 0, 0, 93,
	0, 0, 0, 403, 422, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 343, 402, 0,
	347, 350, 432, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 408, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	409, 0, 342, 412, 418, 383, 197, 421, 381, 380,
	424, 139, 0, 0, 153, 105, 104, 113, 416, 365,
	373, 96, 371, 145, 135, 165, 398, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 419, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 394, 395,
	428, 429, 430, 410, 352, 0, 358, 359, 0, 414,
	397, 84, 0, 115, 177, 141, 102, 168, 423, 413,
	0, 385, 425, 363, 377, 433, 378, 379, 406, 349,
	393, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 415, 396, 114, 0, 0, 0, 431,
	116, 401, 0, 150, 126, 0, 0, 389, 417, 391,
	411, 384, 407, 354, 400, 426, 376, 404, 427, 0,
	0, 0, 386, 256, 0, 0, 194, 775, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 403, 422,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 343, 402, 0, 347, 350, 432, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	408, 382, 0, 0, 0, 0, 0, 0, 771, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 409, 0, 342, 412, 418,
	383, 197, 421, 381, 380, 424, 139, 0, 0, 153,
	105, 104, 113, 416, 365, 373, 96, 371, 145, 135,
	165, 398, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 419, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 394, 395, 428, 429, 430, 410, 352,
	0, 358, 359, 0, 414, 397, 84, 0, 115, 177,
	141, 102, 168, 423, 413, 0, 385, 425, 363, 377,
	433, 378, 379, 406, 349, 393, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 415, 396,
	114, 0, 0, 0, 431, 116, 401, 0, 150, 126,
	0, 0, 389, 417, 391, 411, 384, 407, 354, 400,
	426, 376, 404, 427, 0, 0, 0, 386, 256, 0,
	0, 194, 775, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 403, 422, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 343, 402, 0,
	347, 350, 432, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 408, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	409, 0, 342, 412, 418, 383, 197, 421, 381, 380,
	424, 139, 0, 0, 153, 105, 104, 113, 416, 365,
	373, 96, 371, 145, 135, 165, 398, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 419, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 394, 395,
	428, 429, 430, 410, 352, 0, 358, 359, 0, 414,
	397, 84, 0, 115, 177, 141, 102, 168, 423, 413,
	0, 385, 425, 363, 377, 433, 378, 379, 406, 349,
	393, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 415, 396, 114, 0, 0, 0, 431,
	116, 401, 0, 150, 126, 0, 0, 389, 417, 391,
	411, 384, 407, 354, 400, 426, 376, 404, 427, 0,
	0, 0, 386, 195, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 403, 422,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 343, 402, 0, 347, 350, 432, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	408, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 409, 0, 342, 412, 418,
	383, 197, 421, 381, 380, 424, 139, 0, 0, 153,
	105, 104, 113, 416, 365, 373, 96, 371, 145, 135,
	165, 398, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 419, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 394, 395, 428, 429, 430, 410, 352,
	0, 358, 359, 0, 414, 397, 84, 0, 115, 177,
	141, 102, 168, 423, 413, 0, 385, 425, 363, 377,
	433, 378, 379, 406, 349, 393, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 415, 396,
	114, 0, 0, 0, 431, 116, 401, 0, 150, 126,
	0, 0, 389, 417, 391, 411, 384, 407, 354, 400,
	426, 376, 404, 427, 56, 0, 0, 386, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 403, 422, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 343, 402, 0,
	347, 350, 432, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 408, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	409, 0, 342, 412, 418, 383, 197, 421, 381, 380,
	424, 139, 0, 0, 153, 105, 104, 113, 416, 365,
	373, 96, 371, 145, 135, 165, 398, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 419, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 394, 395,
	428, 429, 430, 410, 352, 0, 358, 359, 0, 414,
	397, 84, 0, 115, 177, 141, 102, 168, 423, 413,
	0, 385, 425, 363, 377, 433, 378, 379, 406, 349,
	393, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 415, 396, 114, 0, 0, 0, 431,
	116, 401, 0, 150, 126, 0, 0, 389, 417, 391,
	411, 384, 407, 354, 400, 426, 376, 404, 427, 0,
	0, 0, 386, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 403, 422,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 343, 402, 0, 347, 350, 432, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	408, 382, 0, 0, 0, 0, 0, 0, 1142, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 409, 0, 342, 412, 418,
	383, 197, 421, 381, 380, 424, 139, 0, 0, 153,
	105, 104, 113, 416, 365, 373, 96, 371, 145, 135,
	165, 398, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 419, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 394, 395, 428, 429, 430, 410, 352,
	0, 358, 359, 0, 414, 397, 84, 0, 115, 177,
	141, 102, 168, 423, 413, 0, 385, 425, 363, 377,
	433, 378, 379, 406, 349, 393, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 415, 396,
	114, 0, 0, 0, 431, 116, 401, 0, 150, 126,
	0, 0, 389, 417, 391, 411, 384, 407, 354, 400,
	426, 376, 404, 427, 0, 0, 0, 386, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 403, 422, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 343, 402, 0,
	347, 350, 432, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 408, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	409, 0, 342, 412, 418, 383, 197, 421, 381, 380,
	424, 139, 0, 0, 153, 105, 104, 113, 416, 365,
	373, 96, 371, 145, 135, 165, 398, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 419, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 394, 395,
	428, 429, 430, 410, 352, 0, 358, 359, 0, 414,
	397, 84, 0, 115, 177, 141, 102, 168, 423, 413,
	0, 385, 425, 363, 377, 433, 378, 379, 406, 349,
	393, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 415, 396, 114, 0, 0, 0, 431,
	116, 401, 0, 150, 126, 0, 0, 389, 417, 391,
	411, 384, 407, 354, 400, 426, 376, 404, 427, 0,
	0, 0, 386, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 403, 422,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 343, 402, 0, 347, 350, 432, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	408, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 409, 0, 342, 412, 418,
	383, 197, 421, 381, 380, 424, 139, 0, 0, 153,
	105, 104, 113, 416, 365, 373, 96, 371, 145, 135,
	165, 398, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 340,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 419, 173, 174,
	175, 176, 0, 0, 0, 341, 339, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 394, 395, 428, 429, 430, 410, 352,
	0, 358, 359, 0, 414, 397, 84, 0, 115, 177,
	141, 102, 168, 423, 413, 0, 385, 425, 363, 377,
	433, 378, 379, 406, 349, 393, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 415, 396,
	114, 0, 0, 0, 431, 116, 401, 0, 150, 126,
	0, 0, 389, 417, 391, 411, 384, 407, 354, 400,
	426, 376, 404, 427, 0, 0, 0, 386, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 403, 422, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 343, 402, 0,
	347, 350, 432, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 408, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	409, 0, 342, 412, 418, 383, 197, 421, 381, 380,
	424, 139, 0, 0, 153, 105, 104, 113, 416, 365,
	373, 96, 371, 145, 135, 165, 398, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 330,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 340, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 419, 173, 174, 175, 176, 0, 0, 0,
	341, 339, 335, 334, 333, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 394, 395,
	428, 429, 430, 410, 352, 0, 358, 359, 0, 414,
	397, 84, 0, 115, 177, 141, 102, 168, 133, 0,
	0, 814, 0, 258, 0, 0, 0, 100, 0, 253,
	0, 0, 114, 0, 0, 0, 292, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 282,
	256, 312, 305, 255, 254, 193, 307, 308, 309, 310,
	0, 93, 306, 313, 0, 311, 277, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 269, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 247, 0, 0, 0, 303,
	0, 268, 0, 0, 264, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 301, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 293, 302, 299, 300,
	297, 298, 296, 295, 294, 304, 285, 286, 287, 288,
	290, 0, 289, 84, 0, 115, 177, 141, 102, 168,
	133, 0, 0, 0, 0, 258, 0, 0, 0, 100,
	0, 253, 0, 0, 114, 0, 0, 0, 292, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 282, 256, 312, 305, 255, 254, 193, 307, 308,
	309, 310, 0, 93, 306, 313, 0, 311, 277, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 269, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 247, 0, 0,
	0, 303, 0, 268, 0, 0, 264, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 301, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 293, 302,
	299, 300, 297, 298, 296, 295, 294, 304, 285, 286,
	287, 288, 290, 0, 289, 84, 0, 115, 177, 141,
	102, 168, 133, 0, 0, 0, 0, 258, 0, 0,
	0, 100, 0, 253, 0, 0, 114, 0, 0, 0,
	292, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 488, 282, 256, 312, 305, 255, 254, 193,
	307, 308, 309, 310, 0, 93, 306, 313, 0, 311,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 269, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 0,
	0, 0, 0, 303, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 301, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	293, 302, 299, 300, 297, 298, 296, 295, 294, 304,
	285, 286, 287, 288, 290, 0, 289, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 0, 258,
	0, 0, 0, 100, 0, 253, 0, 0, 114, 0,
	0, 0, 292, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 0, 0,
	897, 0, 56, 0, 0, 282, 256, 312, 305, 255,
	254, 193, 307, 308, 309, 310, 0, 93, 306, 313,
	0, 311, 277, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 269, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 303, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 301, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 293, 302, 299, 300, 297, 298, 296, 295,
	294, 304, 285, 286, 287, 288, 290, 26, 289, 84,
	0, 115, 177, 141, 102, 168, 0, 0, 0, 133,
	0, 0, 0, 0, 258, 0, 0, 0, 100, 0,
	253, 0, 0, 114, 0, 0, 0, 292, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	282, 256, 312, 305, 255, 254, 193, 307, 308, 309,
	310, 0, 93, 306, 313, 0, 311, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 269, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	303, 0, 268, 0, 0, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 301, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 293, 302, 299,
	300, 297, 298, 296, 295, 294, 304, 285, 286, 287,
	288, 290, 0, 289, 84, 0, 115, 177, 141, 102,
	168, 133, 0, 493, 0, 0, 258, 0, 0, 0,
	100, 0, 253, 0, 0, 114, 0, 0, 0, 292,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 282, 256, 312, 305, 255, 254, 193, 307,
	308, 309, 310, 0, 93, 306, 313, 0, 311, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 269, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 267, 0, 0,
	0, 0, 303, 0, 268, 0, 0, 264, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 301, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 293,
	302, 299, 300, 297, 298, 296, 295, 294, 304, 285,
	286, 287, 288, 290, 0, 289, 84, 0, 115, 177,
	141, 102, 168, 133, 0, 0, 0, 0, 258, 0,
	0, 0, 100, 0, 253, 0, 0, 114, 0, 0,
	0, 292, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 282, 256, 312, 305, 255, 254,
	193, 307, 308, 309, 310, 0, 93, 306, 313, 0,
	311, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 269, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 267,
	0, 0, 0, 0, 303, 0, 268, 0, 0, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 301, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 293, 302, 299, 300, 297, 298, 296, 295, 294,
	304, 285, 286, 287, 288, 290, 133, 289, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 552, 0, 0,
	114, 0, 0, 0, 292, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 282, 256, 312,
	305, 255, 254, 193, 307, 308, 309, 310, 0, 93,
	306, 313, 0, 311, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 267, 0, 0, 0, 0, 303, 0, 268,
	0, 0, 264, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 301,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 1405, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 293, 302, 299, 300, 297, 298,
	296, 295, 294, 304, 285, 286, 287, 288, 290, 133,
	289, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	552, 0, 0, 114, 0, 0, 0, 292, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	282, 256, 312, 305, 255, 254, 193, 307, 308, 309,
	310, 0, 93, 306, 313, 0, 311, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	303, 0, 268, 0, 0, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 301, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 293, 302, 299,
	300, 297, 298, 296, 295, 294, 304, 285, 286, 287,
	288, 290, 133, 289, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 552, 0, 0, 114, 0, 0, 0,
	292, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 282, 256, 312, 305, 565, 254, 193,
	307, 308, 309, 310, 0, 93, 306, 313, 0, 311,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 0,
	0, 0, 0, 303, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 301, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	293, 302, 299, 300, 297, 298, 296, 295, 294, 304,
	285, 286, 287, 288, 290, 0, 289, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 511, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 513,
	514, 515, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 73, 0, 0,
	0, 79, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 75, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 76, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 82, 0, 0, 513, 514, 515, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 177, 141, 102, 168, 133, 0, 0, 0, 614,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	195, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 636, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 638, 637, 639, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 115, 177,
	141, 102, 168, 133, 0, 0, 0, 614, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 612, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 84, 0,
	115, 177, 141, 102, 168, 592, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 0, 0, 0, 0,
	133, 0, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 513, 514, 515, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 194, 775, 193, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 758, 0, 0, 759, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 177, 141, 102, 168,
}

var yyPact = [...]int{
	1712, -1000, -207, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 877, 903, -1000, -1000, -1000, -1000,
	-1000, -1000, 681, 8289, 53, 82, -42, 10585, 80, 187,
	11344, -1000, -22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-31, 11344, 408, 662, -1000, -1000, -1000, -1000, -1000, 867,
	873, 686, 860, 734, -1000, 5702, 46, 9310, 10332, 5178,
	-1000, 396, 75, 11344, -172, 11850, 27, 27, 27, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	77, 11344, -1000, 11344, 26, 395, 26, 26, 26, 11344,
	-1000, 113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11344,
	386, 813, 51, 4078, 4078, 4078, 4078, -12, -16, 4078,
	-131, -122, 706, -1000, -1000, -1000, -1000, 4078, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11344,
	688, 692, 411, 816, 6753, 7015, 877, -1000, 662, -1000,
	-1000, -1000, 780, -1000, -1000, 272, 885, -1000, 8036, 112,
	-1000, 7015, 2076, 653, -1000, -1000, -1000, -1000, 653, -1000,
	-1000, -1000, -1000, 95, 7521, 7521, 7521, 7521, 7521, 7521,
	-1000, -1000, -1000, -1000, -1000, -1000, 262, -1000, -1000, -1000,
	6491, 653, 7774, 653, 653, 653, 653, 653, 653, 653,
	653, 7015, 653, 653, 653, 653, 653, 653, 653, 653,
	653, 653, 653, 653, 653, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10079, 646, 760, -1000, -1000, -1000,
	851, 8795, 9825, 11344, 577, -1000, 649, 647, 4903, -23,
	-135, -1000, 63, -1000, -1000, -1000, 163, 9563, -1000, -1000,
	812, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 557, -1000, 1808, 385, 4078, 66,
	685, 378, 209, 377, 11344, 11344, 4078, 60, 11344, 847,
	704, 11344, 370, 359, -1000, 3803, -1000, 4078, 4078, 4078,
	4078, 4078, 4078, 4078, 4078, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4078, 4078, 4078, 4078, -1000, -139, -108, -1000,
	11344, -1000, -1000, 92, 92, 1808, 11344, -1000, -1000, -1000,
	893, 134, 452, 864, 110, 650, -1000, 404, 867, 411,
	734, 11597, 716, -1000, -1000, 11344, -1000, 7015, 7015, 367,
	-1000, 10838, -1000, -1000, -1000, -1000, -1000, 3253, 140, 7521,
	318, 158, 7521, 7521, 7521, 7521, 7521, 7521, 7521, 7521,
	7521, 7521, 7521, 7521, 7521, 7521, 7521, 458, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 355, -1000, 662, 1202,
	1202, 118, -1000, 118, 118, 118, 118, 118, 266, -1000,
	411, 537, 165, 6491, 5440, -1000, 2026, 5702, 5702, 7015,
	7015, 11091, 11091, 5702, 853, 174, 165, 11091, -1000, 411,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5702, 5702, 5702,
	5702, 144, 11344, -1000, 11091, 9310, 9310, 9310, 9310, 9310,
	-1000, 731, 720, -1000, 741, 729, 740, 11344, -1000, 535,
	8795, 123, 653, -1000, 11344, -1000, 5, 477, 9310, 11344,
	-1000, -1000, 4903, 7521, 649, 647, -135, 633, -1000, -140,
	-126, 7521, 6226, 103, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2978, 202, 256, -101, -1000, -1000, -1000, -1000, 660,
	-1000, 660, 660, 660, 660, -59, -59, -59, -59, -1000,
	-1000, -1000, -1000, -1000, 680, 679, -1000, 660, 660, 660,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 668, 668, 668,
	661, 661, 690, -1000, 11344, -190, 347, 4078, 846, 4078,
	-1000, 100, -1000, 11344, -1000, -1000, 11344, 4078, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 246, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517,
	-1000, 640, -1000, -1000, 757, 7015, 7015, 7015, 3528, 7015,
	-1000, 794, 793, 816, -1000, 853, 872, -1000, 776, 767,
	5702, -1000, -1000, 140, 168, -1000, -1000, 295, -1000, -1000,
	-1000, -1000, 107, 653, -1000, -1000, 2005, -1000, -1000, -1000,
	-1000, 318, 7521, 7521, 7521, 65, 2005, 2143, 1465, 357,
	118, 324, 324, 120, 120, 120, 120, 120, 479, 479,
	-1000, -1000, -1000, 411, 262, -1000, -1000, 262, -1000, -1000,
	7015, -1000, 411, 411, 5702, 582, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 514, 514,
	263, 373, 645, -1000, 102, 632, 514, 5702, 213, -1000,
	7015, 411, -1000, 514, 411, 514, 514, 629, 763, 653,
	-1000, 625, -1000, 160, 760, 678, 701, 786, -1000, -1000,
	-1000, -1000, 718, -1000, 707, -1000, -1000, -1000, -1000, -1000,
	74, 73, 70, 11850, -1000, 883, 9310, 604, -1000, -1000,
	2005, 633, -135, -142, -1000, -1000, 2005, -1000, 165, -1000,
	586, 627, 2703, -1000, -1000, -1000, -1000, -1000, -1000, 664,
	833, 188, 185, 346, -1000, -1000, 817, -1000, 241, -105,
	-1000, -1000, 330, -59, -59, -1000, -1000, 103, 809, 103,
	103, 103, 371, 371, -1000, -1000, -1000, -1000, 328, -1000,
	-1000, -1000, 316, -1000, 694, 11850, 4078, -1000, 4628, -1000,
	-1000, -1000, -1000, -1000, -1000, 697, 388, 180, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3,
	-1000, 4078, -1000, 249, 11344, 11344, 1808, 849, 11344, 754,
	165, 165, 165, 101, -1000, 790, 788, -1000, 11344, -1000,
	-1000, -1000, -1000, 616, -1000, -1000, -1000, 4353, 5702, -1000,
	65, 2005, 2127, -1000, 7521, 7521, -1000, 165, -1000, -1000,
	514, 5702, -1000, -1000, 210, 458, 210, 7521, 7521, 3528,
	7521, 7521, -183, 613, 170, -1000, 7015, 306, -1000, -1000,
	-1000, -1000, -1000, 689, 11091, 653, -1000, 8542, -1000, 11850,
	877, 11091, 7015, 7015, -1000, -1000, 7015, 663, -1000, 7015,
	-1000, -1000, -1000, 653, 653, 653, 495, -1000, 877, 604,
	-1000, -1000, -1000, -152, -158, -1000, -1000, -1000, 2978, -1000,
	2978, 11850, -1000, 343, 340, -1000, -1000, 687, 56, -1000,
	-1000, -1000, 466, 103, 103, -1000, 196, -1000, -1000, -1000,
	511, -1000, 508, 626, 501, 11344, -1000, -1000, 607, -1000,
	157, -1000, -1000, 11850, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11850, 11344, -1000, -1000,
	-1000, -1000, -1000, 11850, -1000, -1000, 371, 7015, -1000, -1000,
	-1000, 92, -1000, -1000, 4628, -1000, -1000, -1000, -1000, -1000,
	883, 9310, -1000, -1000, 411, -1000, 7521, 2005, 2005, -1000,
	-1000, 411, 660, 660, -1000, 660, 661, -1000, 660, -39,
	660, -44, 653, 411, 411, 1629, 1696, -1000, 1514, 1651,
	653, -179, -1000, 165, 7015, -204, 835, 482, 504, -1000,
	-1000, 5964, 411, 497, 99, 495, 867, -1000, 165, 165,
	165, 11850, 165, 11850, 11850, 11850, 9057, 11850, 867, -1000,
	-1000, -1000, -1000, 2703, -1000, 490, -1000, 660, -1000, -1000,
	-96, 892, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -59, 371, -59, 314, -1000, 301, 4078,
	4628, 2978, -1000, 659, -1000, -1000, -1000, -1000, 842, -1000,
	165, -1000, 881, 603, -1000, 2005, -1000, -1000, 104, -1000,
	-1000, -1000, -1000, -1000, -1000, 280, -1000, -1000, -1000, 7521,
	7521, -1000, 7521, 7521, 7521, 411, 371, 165, -1000, 5702,
	829, -1000, 653, -1000, -1000, 635, 10838, 10838, -1000, -1000,
	473, -1000, 442, 442, 442, 123, -1000, -1000, 156, 11850,
	-1000, 172, -1000, -162, 103, -1000, 103, 462, 450, -1000,
	-1000, -1000, 11850, 653, 874, 870, -1000, -1000, 411, 457,
	457, 457, 457, 16, -1000, -1000, 582, 888, -1000, 653,
	-1000, 662, 98, -1000, 11850, -1000, -1000, -1000, -1000, -1000,
	156, -1000, 337, 150, 371, -1000, 252, 828, -1000, 820,
	-1000, -1000, -1000, -1000, -1000, 438, 1, -1000, 7015, 7015,
	-1000, -1000, -1000, -1000, -1000, 411, 37, -195, 11091, 504,
	411, 10838, -1000, -1000, -1000, 277, -1000, -1000, -1000, 371,
	-1000, -1000, 685, 436, -1000, 11850, 165, 453, -1000, 752,
	-188, -199, 360, -1000, -1000, -1000, -1000, -190, -1000, 1,
	762, -1000, 751, -1000, -1000, -1000, -3, -191, -5, -197,
	653, -200, 7268, -1000, 457, 411, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1158, 27, 21, 1157, 1156, 1155, 935, 923, 912,
	1154, 1152, 1150, 1149, 1148, 1147, 1146, 1145, 1143, 1141,
	1140, 1139, 1138, 1137, 1133, 1131, 1130, 151, 1129, 1127,
	1126, 58, 1125, 69, 1124, 1123, 38, 84, 35, 33,
	117, 1120, 23, 67, 57, 1117, 43, 1116, 1114, 75,
	1113, 55, 1111, 1110, 1255, 1109, 1102, 15, 31, 1100,
	1095, 1093, 1092, 70, 838, 1090, 1089, 1082, 1081, 1079,
	1078, 1077, 47, 6, 8, 7, 11, 1067, 279, 45,
	1063, 44, 1060, 1053, 1052, 1051, 77, 1050, 46, 1047,
	30, 48, 1044, 12, 60, 26, 18, 24, 73, 51,
	72, 1042, 34, 56, 41, 1041, 1040, 466, 1037, 1035,
	1033, 1032, 1031, 1030, 150, 272, 1029, 1028, 1027, 1022,
	42, 307, 610, 492, 61, 1020, 1019, 20, 1018, 1476,
	71, 52, 22, 1013, 16, 516, 32, 1012, 1006, 1004,
	1003, 29, 1001, 40, 1000, 999, 998, 997, 996, 995,
	993, 59, 988, 987, 986, 36, 14, 985, 970, 49,
	13, 969, 967, 966, 50, 53, 965, 39, 964, 962,
	959, 958, 25, 17, 957, 10, 956, 5, 954, 953,
	2, 950, 9, 943, 3, 941, 4, 37, 940, 938,
	19, 937, 933, 163, 931, 929, 925, 921, 0, 169,
	916, 914, 89,
}

var yyR1 = [...]int{
	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 200, 200, 49, 49, 94, 94, 10,
	10, 10, 10, 10, 10, 99, 99, 104, 104, 104,
	105, 105, 105, 105, 139, 139, 137, 137, 11, 11,
	11, 11, 11, 11, 11, 186, 186, 185, 184, 184,
	183, 183, 182, 16, 169, 170, 170, 170, 165, 142,
	142, 143, 143, 143, 143, 143, 150, 146, 146, 144,
	144, 144, 144, 144, 144, 144, 145, 145, 145, 145,
	145, 147, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 149, 149, 149, 149, 149, 149, 149, 149, 164,
	164, 151, 151, 159, 159, 160, 160, 160, 157, 157,
	158, 158, 161, 161, 161, 152, 152, 152, 152, 152,
	152, 152, 154, 154, 162, 162, 155, 155, 155, 156,
	156, 156, 163, 163, 163, 163, 163, 153, 153, 166,
	166, 178, 178, 177, 177, 177, 168, 168, 174, 174,
	174, 174, 174, 167, 167, 176, 176, 175, 171, 171,
	171, 172, 172, 172, 173, 173, 173, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 181, 179, 179,
	180, 180, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 112, 112, 109,
	109, 110, 110, 111, 111, 111, 113, 113, 113, 140,
	140, 138, 138, 138, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 190,
	190, 190, 190, 190, 190, 26, 26, 191, 191, 201,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 125, 125, 125, 127, 127, 127, 127, 124, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	93, 93, 95, 95, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 133, 133, 132, 132, 132, 131,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 108, 108, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 71, 71, 71, 71, 71, 71, 61, 61, 61,
	61, 61, 61, 61, 36, 36, 72, 72, 72, 78,
	73, 73, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 195, 194, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 202, 202, 70, 70, 70, 70, 34, 34, 34,
	34, 34, 136, 136, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 82, 82,
	35, 35, 80, 80, 81, 83, 83, 66, 66, 66,
	79, 79, 79, 122, 122, 122, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 188,
	188, 65, 65, 65, 84, 84, 85, 85, 86, 86,
	87, 87, 88, 89, 89, 89, 89, 89, 89, 89,
	90, 90, 90, 90, 90, 90, 91, 91, 91, 62,
	62, 62, 62, 62, 62, 92, 92, 92, 92, 96,
	96, 74, 74, 76, 76, 75, 77, 189, 189, 97,
	97, 102, 98, 98, 100, 100, 103, 103, 103, 101,
	101, 101, 128, 128, 128, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 119, 119,
	119, 126, 126, 123, 123, 129, 129, 129, 129, 129,
	130, 130, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 193, 193, 193, 198, 199, 134, 135, 135,
	135,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 4, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 3, 3,
	0, 2, 2, 4, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 0, 2, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 139, 140, 142, 141, 167, 143, 160,
	52, 179, 180, 182, 183, 25, 161, 162, 165, 166,
	184, 185, 186, -198, 8, 265, 56, -197, 281, -86,
	15, -29, 5, -27, -201, -27, -27, -27, -27, -27,
	-169, 56, -119, 148, 98, 175, 257, 145, 146, 152,
	-122, 64, 60, -121, 273, 179, 193, 187, 213, 205,
	203, 206, 243, 71, 182, 253, 163, 202, 198, 196,
	27, 218, 278, 197, 158, 157, 219, 223, 244, 191,
	192, 247, 217, 159, 32, 275, 37, 171, 248, 221,
	246, 216, 212, 215, 190, 211, 41, 225, 224, 226,
	242, 208, 199, 18, 251, 166, 169, 220, 222, 153,
	173, 277, 249, 195, 170, 165, 252, 183, 245, 255,
	40, 230, 189, 156, 180, 177, 209, 172, 200, 201,
	214, 188, 210, 181, 174, 167, 254, 231, 279, 207,
	204, 178, 176, 235, 236, 237, 238, 276, 250, 232,
	-107, 148, 150, 146, 146, 147, 148, 257, 145, 146,
	-54, -129, 64, 65, 63, 60, -121, 148, 175, 146,
	134, 206, 139, 233, 147, 32, 173, -138, -140, 146,
	181, -109, 176, 235, 236, 237, 238, 60, 245, 244,
	246, 239, -129, 181, -134, -134, -134, -134, -134, 185,
	-129, 60, -2, -90, 17, 16, -5, -3, -198, 6,
	20, 21, -33, 42, 43, -28, -39, 125, -40, -129,
	-59, 100, -64, 29, 64, 63, 60, -121, 23, -66,
	-60, -77, -78, -79, 134, 135, 123, 124, 131, 101,
	-194, -195, -69, -67, -68, -70, -63, 76, 77, -75,
	-198, -122, 59, 46, 47, 266, 267, 268, 269, 272,
	270, 103, 36, 256, 264, 263, 262, 260, 261, 258,
	259, 151, 257, 129, 265, 62, 72, 66, 67, 68,
	69, 75, 61, 73, -107, -42, -43, -44, -45, -56,
	-78, -198, -54, 11, -49, -54, -98, -100, -139, -137,
	181, -103, -122, 246, 245, 244, -123, -101, -120, 243,
	206, 242, 144, 99, 22, 24, 228, 102, 134, 16,
	103, 133, 266, 139, 50, 258, 259, 256, 268, 269,
	257, 233, 29, 10, 25, 161, 21, 127, 141, 106,
	107, 164, 23, 162, 77, 19, 53, 11, 13, 14,
	151, 150, 118, 147, 48, 8, 59, 26, 115, 44,
	28, 46, 116, 17, 260, 261, 31, 272, 168, 129,
	51, 38, 100, 75, 54, 98, 15, 49, 117, 142,
	265, 47, 145, 6, 271, 30, 160, 45, 146, 234,
	105, 149, 76, 5, 152, 9, 52, 55, 262, 263,
	264, 36, 104, 12, -170, -165, 60, 147, -54, 265,
	-122, -115, 151, -115, -115, 146, -54, -54, -114, 151,
	60, -114, -114, -114, -54, 136, -54, 60, 30, 257,
	60, 173, 146, 174, 148, -135, -198, -123, -122, -135,
	-135, -135, 177, 178, 177, 178, -135, 247, -110, 240,
	54, -135, -129, 11, 22, -198, 55, -199, 58, -91,
	19, 31, -40, 20, -129, -87, -88, -40, -86, -2,
	-27, 38, -31, 21, 70, 11, -125, 99, 98, 115,
	-124, 22, -127, 63, 64, 65, -122, 136, -40, -61,
	118, 100, 116, 117, 102, 120, 119, 130, 123, 124,
	125, 126, 127, 128, 129, 121, 122, 133, 108, 109,
	110, 111, 112, 113, 114, -108, -198, -78, -198, 137,
	138, -64, 29, -64, -64, -64, -64, -64, -188, 74,
	-2, -73, -40, -198, -198, 63, -64, -198, -198, -198,
	-198, -198, -198, -198, -198, -82, -40, -198, -202, -198,
	-202, -202, -202, -202, -202, -202, -202, -198, -198, -198,
	-198, -55, 26, -54, 30, 57, -50, -52, -51, -53,
	44, 48, 50, 45, 46, 47, 51, -133, 22, -42,
	-198, -132, 169, -131, 22, -129, -54, -49, -200, 57,
	11, 55, 57, 57, -98, -100, 181, -99, -104, 247,
	249, 149, 108, -128, -122, -193, 29, 64, 63, 65,
	30, 58, 57, -143, -146, -148, -147, -149, -150, -144,
	-145, 203, 204, 134, 207, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 30, 163, 200, 201, 202,
	97, 219, 220, 221, 222, 223, 224, 225, 226, 205,
	187, 188, 189, 190, 191, 192, 193, 195, 196, 197,
	198, 199, 60, -135, 148, -186, 55, 60, 100, 60,
	-54, -54, -135, 149, -54, 23, 54, -54, 60, 60,
	-130, -129, -120, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, 248, -112, 234, 241, -54,
	-190, -3, -7, -9, -8, 60, -193, 64, -190, -142,
	-143, -191, -129, 9, 118, 57, 18, 18, 136, 57,
	-89, 24, 25, -90, -199, -33, -65, -122, 66, 69,
	-32, 45, -54, -40, -40, -71, 75, 100, 76, 77,
	-124, 125, -130, -123, -120, 64, -64, -72, -75, -78,
	74, 118, 116, 117, 102, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-136, 60, -193, 60, -63, 63, 64, -63, 74, -199,
	57, -199, -2, -38, 21, -37, -39, -192, 78, 79,
	80, 81, 82, 83, 84, 85, 97, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, -37, -37,
	-40, -40, -79, -122, -129, -79, -37, -31, -80, -81,
	104, -79, -199, -37, -38, -37, -37, -94, 29, 169,
	-54, -97, -102, -79, -43, -44, -44, -43, -44, 44,
	44, 44, 49, 44, 49, 44, -51, -129, -199, -57,
	52, 150, 53, -198, -131, -94, 55, -42, -54, -103,
	-64, -99, 57, 248, 250, 251, -64, 54, -40, -156,
	133, -171, -172, -173, -123, -193, 66, -165, -166, -174,
	153, 156, 152, -167, 147, 28, -161, 75, 100, -157,
	231, -151, 56, -151, -151, -151, -151, -155, 206, -155,
	-155, -155, 56, 56, -151, -151, -151, -159, 56, -159,
	-159, -160, 56, -160, -126, 55, -54, -184, 276, -185,
	60, -135, 23, -135, -116, 144, 141, 142, -181, 140,
	228, 206, 71, 29, 15, 266, 169, 279, 60, 170,
	-54, -54, -135, -111, 11, 118, 57, -199, 57, 40,
	-40, -40, -40, -130, -88, 33, 33, -91, -106, 19,
	11, 36, 36, -37, 75, 76, 77, 136, -198, -72,
	-64, -64, -64, -36, 164, 99, -199, -40, -199, -199,
	-37, 57, -199, -199, 57, 55, 22, 57, 11, 136,
	57, 11, -199, -37, -83, -81, 106, -40, -199, -199,
	-199, -199, -199, -62, 30, 36, -2, -198, 36, -198,
	-58, 57, 12, 108, -47, -46, 54, 55, -48, 54,
	-46, 44, 44, 147, 147, 147, -95, -122, -58, -42,
	-58, -104, -105, 252, 249, 255, 60, -193, 57, -173,
	108, 56, 28, -167, -167, 60, 60, -152, 29, 75,
	-158, 232, 66, -155, -155, -156, 30, -156, -156, -156,
	-164, -193, -164, 66, 66, 54, -122, -135, -183, -182,
	-123, -134, -187, 175, 154, 155, 158, 157, 60, 147,
	28, 153, 156, 169, 152, -187, 175, -117, -118, 149,
	22, 147, 28, 169, -135, -113, 116, 12, -129, -129,
	-143, 22, -129, 41, 136, 34, 35, 34, 35, -54,
	-41, 11, 125, -123, -38, -36, 99, -64, -64, -199,
	-39, -141, 134, 203, 163, 202, 198, 217, 208, 230,
	200, 231, 204, -136, -141, -64, -64, -123, -64, -64,
	273, -86, 107, -40, 105, -96, 54, -97, -74, -76,
	-75, -198, -2, -92, -127, -95, -86, -102, -40, -40,
	-40, 56, -40, -198, -198, -198, -199, 57, -86, -58,
	249, 253, 254, -172, -173, -176, -175, -122, 60, 60,
	-154, 54, -193, 66, 67, 75, 256, 72, 58, -156,
	-156, 60, 134, 58, 57, 58, 57, 58, 57, -54,
	57, 108, -134, -122, -134, -122, -54, -134, -122, -193,
	-40, -190, -58, -42, -199, -64, -199, -151, -151, -151,
	-160, -151, 192, -151, 192, -198, -199, -199, -199, 57,
	19, -199, 57, 19, -198, -35, 271, -40, -189, 280,
	27, -96, 57, -199, -199, -199, 57, 136, -199, -90,
	-93, -122, -93, -93, -93, -132, -122, -90, 58, 57,
	-151, -162, 228, 9, -155, -193, -155, 66, 66, -135,
	-182, -173, 56, 26, -84, 13, -155, 60, 66, -64,
	-64, -64, -64, -64, -199, -193, -37, 28, -76, 36,
	-2, -198, -127, -127, 57, 58, -199, -199, -199, -57,
	-178, -177, 55, 159, 71, -175, -163, 153, 28, 152,
	256, -156, -156, 58, 58, -93, -198, -85, 14, 16,
	-199, -199, -199, -199, -199, -34, 118, 276, 9, -74,
	-2, 136, -122, -177, 60, -168, 108, -193, -153, 71,
	28, 28, 58, -179, -180, 169, -40, -73, -199, 274,
	51, 277, -97, -199, -127, 66, -193, -186, -199, 57,
	-122, 41, 275, 278, -184, -180, 36, 41, 171, 276,
	172, 277, -198, 278, -64, 168, -199, -199,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 558, 0, 309, 309, 309, 309,
	309, 309, 0, 638, 621, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 867, 867, 867, 867, 867,
	0, 0, 0, 0, 37, 38, 865, 1, 3, 570,
	0, 0, 313, 316, 311, 0, 621, 0, 0, 0,
	68, 0, 0, 852, 0, 853, 619, 619, 619, 639,
	640, 533, 534, 535, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 854, 855, 856, 857, 858, 859, 860, 861,
	0, 0, 622, 0, 617, 0, 617, 617, 617, 0,
	239, 382, 645, 646, 647, 648, 649, 852, 853, 0,
	0, 0, 0, 868, 868, 868, 868, 0, 0, 868,
	0, 271, 260, 262, 263, 264, 265, 868, 282, 283,
	280, 270, 284, 287, 290, 291, 292, 293, 294, 0,
	0, 305, 30, 576, 0, 0, 558, 32, 0, 309,
	314, 315, 319, 317, 318, 310, 0, 327, 331, 0,
	390, 0, 395, -2, -2, -2, -2, -2, 0, 432,
	433, 434, 435, 528, 0, 0, 0, 0, 0, 0,
	457, 458, 459, 460, 461, 462, 529, 399, 400, 596,
	0, 530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 491, 491, 491, 491, 491, 491, 491,
	491, 0, 0, 0, 0, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 0, 0, 341, 343, 344, 345,
	364, 0, 366, 0, 0, 45, 49, 50, 0, 64,
	843, 602, 643, -2, -2, -2, 0, 0, 644, -2,
	771, -2, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 0, 85, 0, 0, 868, 0,
	75, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 240, 868, 868, 868,
	868, 868, 868, 868, 868, 249, 869, 870, 643, 250,
	251, 252, 868, 868, 868, 868, 255, 0, 0, 272,
	0, 266, 295, 0, 0, 0, 0, 31, 866, 25,
	0, 0, 571, 572, 0, 559, 560, 563, 570, 30,
	316, 0, 321, 320, 312, 0, 328, 0, 0, 0,
	332, 0, 338, 334, 335, 336, 337, 0, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 417, 418,
	419, 420, 421, 422, 423, 396, 0, 410, 0, 0,
	0, 451, 548, 452, 453, 454, 455, 456, 547, 549,
	30, 0, 430, 0, 323, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 519, 0, 483, 0,
	484, 485, 486, 487, 488, 489, 490, 0, 323, 0,
	0, 47, 0, 381, 0, 0, 0, 0, 0, 0,
	370, 0, 0, 373, 0, 0, 0, 0, 365, 0,
	0, 384, 816, 367, 0, 369, -2, 0, 0, 0,
	43, 44, 0, 0, 51, 52, 0, 54, 55, 0,
	0, 0, 0, 169, 612, 613, 614, 533, 862, 864,
	610, 198, 0, 152, 148, 92, 93, 94, 95, 141,
	98, 141, 141, 141, 141, 166, 166, 166, 166, 124,
	125, 126, 127, 128, 0, 0, 111, 141, 141, 141,
	115, 131, 132, 133, 134, 135, 136, 137, 138, 96,
	99, 100, 101, 102, 103, 104, 105, 143, 143, 143,
	145, 145, 641, 70, 0, 78, 0, 868, 0, 868,
	83, 0, 214, 0, 233, 618, 0, 868, 236, 237,
	383, 650, 651, 241, 242, 243, 244, 245, 246, 247,
	248, 253, 258, 254, 259, 256, 273, 267, 268, 261,
	296, 299, 300, 301, 302, 303, 304, 863, 297, 0,
	89, 306, 307, 577, 0, 0, 0, 0, 0, 0,
	562, 564, 565, 576, 33, 319, 0, 551, 0, 0,
	0, 322, 28, 391, 392, 394, 411, 0, 413, 415,
	333, 329, 0, 531, -2, -2, 401, 402, 426, 427,
	428, 0, 0, 0, 0, 424, 406, 0, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	450, 502, 503, 0, 448, 536, 537, 449, 550, 429,
	0, 595, 30, 0, 0, 324, 325, 464, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 0, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 525, 522,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 0,
	380, 388, 599, 0, 342, 360, 362, 0, 357, 371,
	372, 374, 0, 376, 0, 378, 379, 346, 347, 348,
	0, 0, 0, 0, 368, 388, 0, 388, 46, 603,
	605, 53, 0, 0, 58, 59, 604, 606, 607, 608,
	0, 84, 199, 201, 204, 205, 206, 86, 87, 0,
	0, 0, 0, 0, 193, 194, 155, 153, 0, 150,
	149, 97, 0, 166, 166, 118, 119, 169, 0, 169,
	169, 169, 0, 0, 112, 113, 114, 106, 0, 107,
	108, 109, 0, 110, 0, 0, 868, 72, 0, 76,
	77, 73, 620, 74, 867, 0, 0, 633, 215, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 0,
	232, 868, 235, 276, 0, 0, 0, 0, 0, 0,
	573, 574, 575, 0, 561, 0, 0, 26, 0, 615,
	616, 552, 553, 339, 412, 414, 416, 0, 323, 403,
	424, 407, 0, 404, 0, 0, 398, 431, -2, 465,
	0, 0, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 0, 523, 0, 0, 482, 493,
	494, 495, 496, 589, 0, 0, -2, 0, 36, 0,
	558, 0, 0, 0, 354, 361, 0, 0, 355, 0,
	356, 375, 377, 0, 0, 0, 0, 352, 558, 388,
	42, 56, 57, 0, 0, 63, 170, 171, 0, 202,
	0, 0, 188, 0, 0, 191, 192, 162, 0, 154,
	91, 151, 0, 169, 169, 120, 0, 121, 122, 123,
	0, 139, 0, 0, 0, 0, 642, 71, 79, 80,
	0, 207, 867, 0, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 867, 0, 0, 867, 634,
	635, 636, 637, 0, 234, 257, 0, 0, 274, 275,
	90, 0, 308, 578, 0, 568, 569, 566, 567, 27,
	388, 0, 330, 532, 0, 405, 0, 425, 408, 466,
	326, 0, 141, 141, 507, 141, 145, 510, 141, 512,
	141, 515, 0, 0, 0, 0, 0, 531, 0, 0,
	0, 520, 481, 526, 0, 597, 0, 589, 579, 591,
	593, 0, 30, 0, 585, 0, 570, 600, 389, 601,
	358, 0, 363, 0, 0, 0, 366, 0, 570, 41,
	60, 61, 62, 200, 203, 0, 195, 141, 189, 190,
	164, 0, 156, 157, 158, 159, 160, 161, 142, 116,
	117, 167, 168, 166, 0, 166, 0, 146, 0, 868,
	0, 0, 208, 0, 209, 211, 212, 213, 0, 277,
	278, 298, 554, 340, 467, 409, 470, 504, 166, 508,
	509, 511, 513, 514, 516, 0, 472, 471, 473, 0,
	0, 476, 0, 0, 0, 0, 0, 524, 34, 0,
	0, 35, 0, 594, -2, 0, 0, 0, 48, 39,
	0, 350, 0, 0, 0, 384, 353, 40, 180, 0,
	197, 172, 165, 0, 169, 140, 169, 0, 0, 69,
	81, 82, 0, 0, 556, 0, 505, 506, 0, 0,
	0, 0, 0, 497, 480, 521, 598, 0, 592, 0,
	-2, 0, 587, 586, 0, 359, 385, 386, 387, 349,
	179, 181, 0, 186, 0, 196, 177, 0, 174, 176,
	163, 129, 130, 144, 147, 0, 0, 29, 0, 0,
	517, 474, 475, 477, 478, 0, 0, 0, 0, 582,
	30, 0, 351, 182, 183, 0, 187, 185, 88, 0,
	173, 175, 75, 0, 228, 0, 557, 555, 479, 0,
	0, 0, 590, -2, 588, 184, 178, 78, 227, 0,
	0, 498, 0, 501, 210, 229, 0, 499, 0, 0,
	0, 0, 0, 500, 0, 0, 230, 231,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 128, 120, 3,
	56, 58, 125, 123, 57, 124, 136, 126, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 281,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 130, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 131,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	121, 122, 127, 129, 132, 133, 134, 135, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:589
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:634
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:691
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1281
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1324
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1330
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1334
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1354
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1359
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1895
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2069
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2355
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2363
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2410
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2578
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.str = BooleanModeStr
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2586
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2590
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.str = QueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = string("")
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2698
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2740
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &NullVal{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &Default{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2856
		{
			yyVAL.exprs = nil
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2860
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = nil
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2874
		{
			yyVAL.orderBy = nil
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = AscScr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = AscScr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.str = DescScr
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = DescNullsLastScr
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.str = AscNullsLastScr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.limit = nil
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2932
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2940
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2944
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2953
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.str = ForUpdateStr
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2961
		{
			yyVAL.str = ShareModeStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2987
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2991
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2995
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3014
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3019
		{
			yyVAL.updateExprs = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3023
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3033
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3043
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3049
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3066
		{
			yyVAL.returning = nil
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3104
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3118
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3122
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3129
		{
			yyVAL.bytes = []byte("charset")
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = &Default{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3163
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = IgnoreStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3210
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3501
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			decNesting(yylex)
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3515
		{
			forceEOF(yylex)
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3520
		{
			forceEOF(yylex)
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			forceEOF(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
