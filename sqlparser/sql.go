// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const INTERVAL = 57395
const ID = 57396
const PG_ESCAPE_STRING = 57397
const HEX = 57398
const SINGLE_QUOTE_STRING = 57399
const DOUBLE_QUOTE_STRING = 57400
const BACK_QUOTE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const DOLLAR_SIGN = 57409
const LIST_ARG = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const MICROSECOND = 57414
const SECOND = 57415
const MINUTE = 57416
const HOUR = 57417
const DAY = 57418
const WEEK = 57419
const MONTH = 57420
const QUARTER = 57421
const SECOND_MICROSECOND = 57422
const MINUTE_MICROSECOND = 57423
const MINUTE_SECOND = 57424
const HOUR_MICROSECOND = 57425
const HOUR_SECOND = 57426
const HOUR_MINUTE = 57427
const DAY_MICROSECOND = 57428
const DAY_SECOND = 57429
const DAY_MINUTE = 57430
const DAY_HOUR = 57431
const YEAR_MONTH = 57432
const YEAR = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const JSON_EXTRACT_OP = 57459
const JSON_UNQUOTE_EXTRACT_OP = 57460
const CREATE = 57461
const ALTER = 57462
const DROP = 57463
const RENAME = 57464
const ANALYZE = 57465
const ADD = 57466
const SCHEMA = 57467
const TABLE = 57468
const INDEX = 57469
const VIEW = 57470
const TO = 57471
const IGNORE = 57472
const IF = 57473
const UNIQUE = 57474
const PRIMARY = 57475
const COLUMN = 57476
const CONSTRAINT = 57477
const SPATIAL = 57478
const FULLTEXT = 57479
const FOREIGN = 57480
const KEY_BLOCK_SIZE = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const DEALLOCATE = 57506
const PREPARE = 57507
const EXECUTE = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const ISOLATION = 57568
const LEVEL = 57569
const READ = 57570
const WRITE = 57571
const ONLY = 57572
const REPEATABLE = 57573
const COMMITTED = 57574
const UNCOMMITTED = 57575
const SERIALIZABLE = 57576
const CURRENT_TIMESTAMP = 57577
const DATABASE = 57578
const CURRENT_DATE = 57579
const CURRENT_TIME = 57580
const LOCALTIME = 57581
const LOCALTIMESTAMP = 57582
const UTC_DATE = 57583
const UTC_TIME = 57584
const UTC_TIMESTAMP = 57585
const REPLACE = 57586
const CONVERT = 57587
const CAST = 57588
const SUBSTR = 57589
const SUBSTRING = 57590
const GROUP_CONCAT = 57591
const SEPARATOR = 57592
const MATCH = 57593
const AGAINST = 57594
const BOOLEAN = 57595
const LANGUAGE = 57596
const WITH = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const RETURNING = 57601

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	174, 273,
	175, 273,
	-2, 263,
	-1, 251,
	53, 622,
	133, 627,
	134, 622,
	135, 622,
	-2, 524,
	-1, 252,
	133, 629,
	-2, 523,
	-1, 253,
	133, 630,
	-2, 623,
	-1, 254,
	133, 631,
	-2, 624,
	-1, 326,
	105, 809,
	-2, 62,
	-1, 327,
	105, 770,
	-2, 63,
	-1, 332,
	105, 754,
	-2, 588,
	-1, 334,
	105, 791,
	-2, 590,
	-1, 553,
	71, 523,
	133, 629,
	-2, 456,
	-1, 604,
	52, 45,
	54, 45,
	-2, 47,
	-1, 756,
	133, 633,
	-2, 626,
	-1, 757,
	133, 627,
	-2, 622,
	-1, 988,
	5, 31,
	-2, 421,
	-1, 1013,
	5, 30,
	-2, 560,
	-1, 1247,
	5, 31,
	-2, 561,
	-1, 1294,
	5, 30,
	-2, 563,
	-1, 1357,
	5, 31,
	-2, 564,
}

const yyPrivate = 57344

const yyLast = 12031

var yyAct = [...]int{
	286, 53, 1348, 927, 1305, 1151, 861, 680, 550, 1152,
	501, 1179, 1148, 1253, 1124, 24, 843, 256, 844, 885,
	713, 285, 599, 882, 1017, 230, 549, 3, 921, 59,
	1076, 1033, 794, 782, 597, 614, 907, 879, 331, 980,
	791, 221, 628, 1079, 1067, 1022, 893, 831, 759, 485,
	479, 613, 325, 428, 53, 839, 601, 917, 586, 491,
	499, 901, 235, 257, 239, 962, 320, 312, 317, 322,
	944, 883, 58, 1242, 1377, 1367, 1375, 234, 1355, 1373,
	229, 313, 928, 1366, 943, 1143, 1239, 432, 222, 223,
	224, 225, 1354, 236, 1314, 54, 29, 30, 243, 615,
	566, 616, 311, 1174, 1175, 623, 720, 624, 1186, 1187,
	1041, 1173, 948, 1040, 1190, 874, 1042, 1188, 708, 187,
	183, 184, 185, 942, 1330, 515, 514, 524, 525, 517,
	518, 519, 520, 521, 522, 523, 516, 875, 876, 526,
	467, 63, 260, 710, 718, 477, 469, 623, 720, 624,
	711, 1058, 900, 1265, 908, 441, 453, 1227, 1225, 220,
	226, 464, 465, 1374, 1372, 1349, 1280, 1100, 841, 65,
	66, 67, 68, 69, 515, 514, 524, 525, 517, 518,
	519, 520, 521, 522, 523, 516, 862, 864, 526, 840,
	442, 254, 939, 936, 937, 435, 935, 180, 1312, 181,
	181, 1032, 688, 459, 459, 459, 459, 1097, 459, 895,
	316, 1306, 204, 1099, 679, 1031, 459, 895, 1030, 981,
	430, 946, 949, 438, 198, 83, 182, 1308, 475, 195,
	186, 1335, 195, 1250, 1111, 895, 53, 215, 1052, 538,
	539, 996, 455, 195, 457, 974, 730, 793, 506, 448,
	880, 535, 516, 1194, 526, 526, 537, 766, 941, 195,
	195, 83, 488, 487, 429, 195, 727, 83, 498, 454,
	456, 764, 765, 763, 548, 954, 1340, 729, 1204, 1020,
	940, 1331, 617, 1104, 863, 832, 1145, 552, 683, 555,
	556, 557, 558, 559, 560, 561, 562, 1189, 565, 567,
	567, 567, 567, 567, 567, 567, 567, 575, 576, 577,
	578, 199, 908, 728, 1353, 1307, 201, 945, 598, 1313,
	1311, 497, 496, 207, 203, 894, 841, 1195, 1147, 1098,
	947, 1096, 992, 894, 991, 832, 541, 1003, 498, 1056,
	790, 444, 445, 446, 1343, 1359, 993, 1281, 55, 620,
	205, 894, 452, 210, 497, 496, 892, 890, 208, 56,
	891, 524, 525, 517, 518, 519, 520, 521, 522, 523,
	516, 498, 195, 526, 195, 497, 496, 762, 489, 955,
	195, 493, 478, 200, 1103, 1271, 605, 1338, 1270, 434,
	195, 1071, 498, 611, 83, 83, 83, 83, 536, 83,
	568, 569, 570, 571, 572, 573, 574, 83, 1070, 1125,
	202, 1059, 211, 212, 213, 214, 218, 1182, 195, 497,
	496, 217, 216, 517, 518, 519, 520, 521, 522, 523,
	516, 1181, 459, 526, 496, 1053, 498, 83, 1127, 930,
	459, 519, 520, 521, 522, 523, 516, 497, 496, 526,
	498, 459, 459, 459, 459, 459, 459, 459, 459, 897,
	316, 733, 734, 179, 498, 459, 459, 436, 437, 971,
	972, 973, 785, 1129, 694, 1133, 693, 1128, 1126, 1135,
	623, 720, 624, 1131, 898, 684, 682, 697, 1087, 714,
	714, 677, 1130, 719, 719, 721, 450, 748, 750, 751,
	443, 429, 195, 228, 1318, 1132, 1134, 1363, 478, 195,
	195, 195, 1317, 735, 695, 83, 1149, 1085, 723, 1018,
	783, 83, 749, 623, 720, 624, 1298, 1346, 1298, 478,
	310, 760, 497, 496, 1298, 1299, 1043, 1191, 53, 623,
	720, 624, 1262, 1261, 1018, 756, 784, 1170, 478, 498,
	1249, 478, 796, 552, 737, 1201, 1200, 460, 681, 1197,
	1198, 752, 281, 274, 787, 788, 1245, 276, 277, 278,
	279, 26, 754, 275, 282, 583, 280, 824, 827, 798,
	1197, 1196, 1019, 833, 317, 317, 317, 317, 317, 986,
	478, 956, 478, 583, 478, 1011, 796, 478, 1012, 598,
	845, 865, 786, 789, 1086, 627, 626, 317, 26, 1091,
	1088, 1081, 1082, 1089, 1084, 1083, 1203, 836, 56, 60,
	1199, 1045, 829, 83, 583, 798, 1090, 328, 1114, 195,
	195, 83, 1093, 195, 736, 1293, 195, 868, 873, 607,
	195, 869, 83, 83, 83, 83, 83, 83, 83, 83,
	986, 846, 761, 858, 849, 56, 83, 83, 986, 866,
	867, 608, 195, 871, 872, 1019, 847, 848, 195, 850,
	958, 986, 610, 582, 998, 995, 26, 473, 909, 910,
	911, 887, 83, 459, 731, 459, 195, 236, 474, 56,
	1275, 902, 83, 459, 922, 795, 797, 583, 903, 904,
	905, 906, 609, 925, 607, 923, 249, 1018, 1087, 1164,
	1048, 1023, 1024, 834, 914, 915, 916, 997, 994, 56,
	918, 913, 912, 56, 71, 476, 316, 316, 316, 316,
	316, 919, 920, 1184, 56, 1149, 1072, 1085, 1026, 691,
	470, 316, 743, 860, 588, 591, 592, 593, 589, 316,
	590, 594, 1029, 1028, 1023, 1024, 975, 514, 524, 525,
	517, 518, 519, 520, 521, 522, 523, 516, 855, 756,
	526, 245, 195, 856, 852, 195, 195, 195, 195, 195,
	851, 963, 1371, 853, 1365, 760, 964, 195, 854, 1110,
	195, 1235, 478, 857, 195, 592, 593, 959, 195, 195,
	240, 241, 83, 820, 821, 1055, 1370, 492, 1015, 828,
	969, 968, 976, 588, 591, 592, 593, 589, 83, 590,
	594, 490, 1063, 835, 1086, 837, 838, 480, 625, 1091,
	1088, 1081, 1082, 1089, 1084, 1083, 451, 1345, 1344, 481,
	1014, 1291, 1016, 1049, 1243, 1276, 1090, 932, 690, 1108,
	596, 492, 1080, 515, 514, 524, 525, 517, 518, 519,
	520, 521, 522, 523, 516, 231, 1013, 526, 957, 317,
	1323, 195, 237, 238, 83, 232, 83, 967, 1002, 60,
	195, 328, 1322, 195, 83, 966, 273, 1278, 1019, 494,
	1332, 1266, 1035, 726, 1037, 1027, 62, 716, 7, 64,
	1044, 717, 6, 1036, 715, 5, 761, 606, 57, 1038,
	1, 268, 267, 799, 724, 1241, 540, 929, 1075, 938,
	80, 1347, 1304, 1178, 889, 881, 427, 459, 70, 1339,
	888, 983, 1068, 1068, 1310, 1264, 896, 984, 1050, 1051,
	1060, 1061, 1057, 899, 988, 1062, 1183, 1064, 1065, 1066,
	1342, 1054, 459, 633, 1046, 632, 330, 630, 1069, 631,
	629, 635, 433, 634, 722, 206, 989, 990, 542, 543,
	544, 545, 546, 547, 999, 323, 1078, 595, 618, 1005,
	1092, 1006, 1007, 1008, 1009, 924, 495, 72, 1095, 1094,
	970, 934, 1102, 709, 554, 953, 468, 209, 534, 1107,
	965, 1039, 329, 482, 486, 1156, 732, 484, 1137, 1321,
	1277, 316, 784, 1154, 1001, 53, 1117, 1118, 563, 1123,
	507, 830, 259, 747, 272, 1157, 1136, 269, 1150, 845,
	1144, 1166, 1167, 1168, 1153, 756, 845, 1160, 271, 270,
	985, 1155, 738, 1010, 508, 258, 247, 1159, 1158, 315,
	579, 587, 585, 584, 1025, 1021, 314, 83, 551, 1113,
	195, 1172, 1238, 1329, 755, 1171, 742, 28, 564, 1176,
	61, 242, 23, 22, 83, 1185, 21, 1000, 19, 18,
	17, 20, 16, 15, 14, 32, 13, 12, 11, 330,
	330, 330, 330, 10, 330, 9, 8, 4, 1192, 1193,
	233, 25, 330, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 83, 83, 1177,
	83, 1205, 0, 1212, 714, 0, 0, 0, 719, 1214,
	0, 1122, 505, 0, 1207, 0, 1228, 1210, 1215, 0,
	0, 0, 0, 83, 1237, 0, 195, 195, 0, 1216,
	195, 0, 0, 0, 0, 0, 0, 195, 1223, 0,
	0, 0, 0, 1244, 0, 0, 83, 0, 328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	1255, 1256, 1257, 0, 884, 1252, 0, 1220, 1221, 0,
	1222, 0, 1258, 1224, 0, 1226, 0, 1260, 0, 0,
	0, 0, 0, 459, 0, 0, 83, 458, 83, 0,
	330, 0, 0, 0, 0, 758, 619, 1268, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 1267, 1273, 1269, 0, 83, 0, 83,
	83, 0, 1263, 0, 0, 0, 1154, 0, 1046, 1295,
	0, 1290, 0, 0, 0, 1292, 0, 316, 1279, 1288,
	1296, 1297, 0, 1217, 195, 1303, 0, 1153, 745, 746,
	1219, 0, 83, 0, 1309, 1294, 1274, 1320, 0, 483,
	0, 0, 1229, 1230, 1231, 83, 195, 1234, 755, 1319,
	0, 0, 83, 0, 1154, 0, 53, 0, 0, 1333,
	1246, 1247, 1248, 83, 1251, 1315, 195, 1316, 0, 1337,
	0, 0, 0, 0, 0, 1153, 0, 190, 330, 0,
	219, 0, 1334, 0, 551, 0, 330, 0, 1341, 822,
	823, 227, 1351, 0, 0, 0, 0, 330, 330, 330,
	330, 330, 330, 330, 330, 246, 1358, 190, 190, 1356,
	845, 330, 330, 190, 1361, 0, 83, 0, 83, 83,
	83, 195, 83, 1360, 0, 1368, 1369, 0, 83, 0,
	0, 0, 0, 0, 0, 1376, 0, 739, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 505, 0, 878,
	0, 0, 0, 330, 83, 83, 83, 0, 0, 0,
	0, 1300, 1301, 1302, 0, 0, 0, 0, 0, 0,
	0, 461, 462, 463, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 471, 0, 0, 0, 1324, 1325, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 83, 83, 0, 0, 0, 825, 825, 0, 0,
	0, 0, 825, 0, 83, 0, 0, 0, 0, 0,
	190, 0, 190, 0, 0, 0, 0, 83, 190, 825,
	0, 977, 978, 979, 0, 1352, 0, 0, 190, 0,
	1357, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	83, 0, 0, 1362, 1232, 478, 0, 330, 0, 0,
	960, 961, 0, 486, 0, 0, 472, 0, 0, 0,
	0, 318, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 1236, 0, 0, 1380, 1381, 0, 83, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 1140, 0, 515, 514, 524, 525,
	517, 518, 519, 520, 521, 522, 523, 516, 987, 330,
	526, 330, 0, 0, 0, 0, 0, 0, 0, 330,
	321, 0, 0, 0, 0, 431, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 190, 603, 190,
	0, 0, 0, 884, 1004, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 478, 0, 330, 515, 514,
	524, 525, 517, 518, 519, 520, 521, 522, 523, 516,
	0, 0, 526, 0, 0, 0, 0, 0, 1233, 678,
	0, 0, 0, 0, 0, 0, 0, 687, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 699,
	700, 701, 702, 703, 704, 705, 0, 0, 0, 1116,
	0, 0, 706, 707, 0, 0, 515, 514, 524, 525,
	517, 518, 519, 520, 521, 522, 523, 516, 1120, 1121,
	526, 0, 439, 0, 440, 0, 0, 0, 0, 0,
	447, 1138, 1139, 0, 1141, 1142, 0, 0, 0, 0,
	449, 0, 0, 0, 0, 0, 0, 190, 190, 0,
	0, 190, 0, 0, 190, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 884, 515, 514, 524, 525, 517,
	518, 519, 520, 521, 522, 523, 516, 0, 0, 526,
	190, 0, 1034, 0, 0, 0, 725, 0, 0, 0,
	0, 1077, 884, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 190, 1146, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 696, 0, 0, 0,
	0, 1161, 1162, 0, 0, 1163, 0, 0, 1165, 0,
	515, 514, 524, 525, 517, 518, 519, 520, 521, 522,
	523, 516, 1073, 330, 526, 330, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 1218, 0, 246, 0,
	0, 604, 0, 0, 0, 246, 246, 0, 330, 826,
	826, 246, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 246, 246, 246, 0,
	190, 330, 826, 190, 190, 190, 190, 190, 0, 0,
	0, 0, 0, 0, 0, 859, 1213, 0, 190, 0,
	0, 0, 603, 330, 0, 0, 190, 190, 0, 0,
	931, 0, 933, 0, 0, 0, 0, 0, 825, 0,
	952, 505, 0, 1034, 0, 825, 515, 514, 524, 525,
	517, 518, 519, 520, 521, 522, 523, 516, 0, 1240,
	526, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	0, 0, 330, 0, 330, 1180, 0, 0, 0, 1282,
	1283, 0, 1284, 1285, 1286, 0, 0, 0, 0, 685,
	686, 0, 0, 689, 0, 0, 692, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 1206, 190, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	1208, 0, 712, 0, 0, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 26,
	27, 54, 29, 30, 982, 0, 744, 0, 0, 0,
	696, 0, 0, 0, 551, 0, 0, 0, 45, 0,
	0, 0, 246, 31, 515, 514, 524, 525, 517, 518,
	519, 520, 521, 522, 523, 516, 0, 0, 526, 0,
	0, 0, 40, 0, 0, 0, 56, 0, 0, 0,
	0, 1254, 0, 1254, 1254, 1254, 0, 1259, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1378, 0, 0, 0, 0, 0, 330,
	330, 330, 842, 0, 1350, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	34, 36, 35, 38, 1074, 0, 505, 505, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 190, 1180,
	39, 46, 47, 0, 0, 48, 49, 37, 0, 1101,
	0, 0, 1254, 0, 0, 0, 0, 0, 0, 41,
	42, 0, 43, 44, 50, 51, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 0, 951, 0, 0, 0, 0, 0, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 1106, 1364, 0, 1109, 0,
	0, 0, 0, 0, 0, 190, 638, 0, 0, 0,
	0, 0, 0, 0, 55, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 826, 665,
	666, 667, 668, 669, 670, 671, 0, 672, 673, 674,
	675, 676, 652, 653, 654, 636, 637, 664, 0, 639,
	0, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 656, 657, 658, 659, 660, 661, 662, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 800, 801, 802, 803, 804, 805,
	806, 807, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 808, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 515, 514, 524, 525, 517,
	518, 519, 520, 521, 522, 523, 516, 0, 0, 526,
	1272, 510, 0, 513, 0, 0, 0, 0, 0, 527,
	528, 529, 530, 531, 532, 533, 0, 511, 512, 509,
	515, 514, 524, 525, 517, 518, 519, 520, 521, 522,
	523, 516, 0, 0, 526, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 416, 406, 0, 378, 418, 356, 370, 426,
	371, 372, 399, 342, 386, 132, 368, 0, 359, 337,
	365, 338, 357, 380, 100, 383, 355, 408, 389, 114,
	424, 116, 394, 0, 149, 125, 0, 0, 382, 410,
	384, 404, 377, 400, 347, 393, 419, 369, 397, 420,
	0, 0, 0, 379, 82, 0, 0, 623, 622, 624,
	886, 0, 0, 0, 0, 93, 0, 0, 0, 396,
	415, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 336, 395, 0, 340, 343, 425, 413,
	362, 363, 1047, 0, 1202, 0, 0, 0, 0, 381,
	385, 401, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 392, 0, 0, 1209, 344, 341, 0,
	0, 0, 826, 346, 0, 361, 402, 0, 335, 405,
	411, 376, 196, 414, 374, 373, 417, 138, 0, 0,
	152, 105, 104, 113, 409, 358, 366, 96, 364, 144,
	134, 164, 391, 135, 143, 117, 156, 139, 163, 197,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 339, 0, 150, 166, 178, 354, 412, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 350,
	353, 348, 349, 387, 388, 421, 422, 423, 403, 345,
	0, 351, 352, 0, 407, 390, 84, 0, 115, 176,
	140, 102, 167, 416, 406, 0, 378, 418, 356, 370,
	426, 371, 372, 399, 342, 386, 132, 368, 0, 359,
	337, 365, 338, 357, 380, 100, 383, 355, 408, 389,
	114, 424, 116, 394, 0, 149, 125, 0, 0, 382,
	410, 384, 404, 377, 400, 347, 393, 419, 369, 397,
	420, 0, 0, 0, 379, 82, 0, 0, 623, 622,
	624, 886, 0, 0, 0, 0, 93, 0, 0, 0,
	396, 415, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 398, 336, 395, 0, 340, 343, 425,
	413, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	381, 385, 401, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 392, 0, 0, 0, 344, 341,
	0, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 196, 414, 374, 373, 417, 138, 0,
	0, 152, 105, 104, 113, 409, 358, 366, 96, 364,
	144, 134, 164, 391, 135, 143, 117, 156, 139, 163,
	197, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 339, 0, 150, 166, 178, 354, 412,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	350, 353, 348, 349, 387, 388, 421, 422, 423, 403,
	345, 0, 351, 352, 0, 407, 390, 84, 0, 115,
	176, 140, 102, 167, 416, 406, 0, 378, 418, 356,
	370, 426, 371, 372, 399, 342, 386, 132, 368, 0,
	359, 337, 365, 338, 357, 380, 100, 383, 355, 408,
	389, 114, 424, 116, 394, 0, 149, 125, 0, 0,
	382, 410, 384, 404, 377, 400, 347, 393, 419, 369,
	397, 420, 0, 0, 0, 379, 253, 0, 0, 193,
	757, 192, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 396, 415, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 398, 336, 395, 0, 340, 343,
	425, 413, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 401, 375, 0, 0, 0, 0, 0,
	0, 753, 0, 360, 0, 392, 0, 0, 0, 344,
	341, 0, 0, 0, 0, 346, 0, 361, 402, 0,
	335, 405, 411, 376, 196, 414, 374, 373, 417, 138,
	0, 0, 152, 105, 104, 113, 409, 358, 366, 96,
	364, 144, 134, 164, 391, 135, 143, 117, 156, 139,
	163, 197, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 339, 0, 150, 166, 178, 354,
	412, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 350, 353, 348, 349, 387, 388, 421, 422, 423,
	403, 345, 0, 351, 352, 0, 407, 390, 84, 0,
	115, 176, 140, 102, 167, 416, 406, 0, 378, 418,
	356, 370, 426, 371, 372, 399, 342, 386, 132, 368,
	0, 359, 337, 365, 338, 357, 380, 100, 383, 355,
	408, 389, 114, 424, 116, 394, 0, 149, 125, 0,
	0, 382, 410, 384, 404, 377, 400, 347, 393, 419,
	369, 397, 420, 0, 0, 0, 379, 253, 0, 0,
	193, 757, 192, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 396, 415, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 336, 395, 0, 340,
	343, 425, 413, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 381, 385, 401, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 360, 0, 392, 0, 0, 0,
	344, 341, 0, 0, 0, 0, 346, 0, 361, 402,
	0, 335, 405, 411, 376, 196, 414, 374, 373, 417,
	138, 0, 0, 152, 105, 104, 113, 409, 358, 366,
	96, 364, 144, 134, 164, 391, 135, 143, 117, 156,
	139, 163, 197, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 339, 0, 150, 166, 178,
	354, 412, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 350, 353, 348, 349, 387, 388, 421, 422,
	423, 403, 345, 0, 351, 352, 0, 407, 390, 84,
	0, 115, 176, 140, 102, 167, 416, 406, 0, 378,
	418, 356, 370, 426, 371, 372, 399, 342, 386, 132,
	368, 0, 359, 337, 365, 338, 357, 380, 100, 383,
	355, 408, 389, 114, 424, 116, 394, 0, 149, 125,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	419, 369, 397, 420, 0, 0, 0, 379, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 396, 415, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 398, 336, 395, 0,
	340, 343, 425, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 0, 0, 346, 0, 361,
	402, 0, 335, 405, 411, 376, 196, 414, 374, 373,
	417, 138, 0, 0, 152, 105, 104, 113, 409, 358,
	366, 96, 364, 144, 134, 164, 391, 135, 143, 117,
	156, 139, 163, 197, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 339, 0, 150, 166,
	178, 354, 412, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 350, 353, 348, 349, 387, 388, 421,
	422, 423, 403, 345, 0, 351, 352, 0, 407, 390,
	84, 0, 115, 176, 140, 102, 167, 416, 406, 0,
	378, 418, 356, 370, 426, 371, 372, 399, 342, 386,
	132, 368, 0, 359, 337, 365, 338, 357, 380, 100,
	383, 355, 408, 389, 114, 424, 116, 394, 0, 149,
	125, 0, 0, 382, 410, 384, 404, 377, 400, 347,
	393, 419, 369, 397, 420, 56, 0, 0, 379, 82,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 396, 415, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 336, 395,
	0, 340, 343, 425, 413, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 381, 385, 401, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 392, 0,
	0, 0, 344, 341, 0, 0, 0, 0, 346, 0,
	361, 402, 0, 335, 405, 411, 376, 196, 414, 374,
	373, 417, 138, 0, 0, 152, 105, 104, 113, 409,
	358, 366, 96, 364, 144, 134, 164, 391, 135, 143,
	117, 156, 139, 163, 197, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 339, 0, 150,
	166, 178, 354, 412, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 350, 353, 348, 349, 387, 388,
	421, 422, 423, 403, 345, 0, 351, 352, 0, 407,
	390, 84, 0, 115, 176, 140, 102, 167, 416, 406,
	0, 378, 418, 356, 370, 426, 371, 372, 399, 342,
	386, 132, 368, 0, 359, 337, 365, 338, 357, 380,
	100, 383, 355, 408, 389, 114, 424, 116, 394, 0,
	149, 125, 0, 0, 382, 410, 384, 404, 377, 400,
	347, 393, 419, 369, 397, 420, 0, 0, 0, 379,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 396, 415, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 336,
	395, 0, 340, 343, 425, 413, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 401, 375, 0,
	0, 0, 0, 0, 0, 1115, 0, 360, 0, 392,
	0, 0, 0, 344, 341, 0, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 196, 414,
	374, 373, 417, 138, 0, 0, 152, 105, 104, 113,
	409, 358, 366, 96, 364, 144, 134, 164, 391, 135,
	143, 117, 156, 139, 163, 197, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 339, 0,
	150, 166, 178, 354, 412, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 350, 353, 348, 349, 387,
	388, 421, 422, 423, 403, 345, 0, 351, 352, 0,
	407, 390, 84, 0, 115, 176, 140, 102, 167, 416,
	406, 0, 378, 418, 356, 370, 426, 371, 372, 399,
	342, 386, 132, 368, 0, 359, 337, 365, 338, 357,
	380, 100, 383, 355, 408, 389, 114, 424, 116, 394,
	0, 149, 125, 0, 0, 382, 410, 384, 404, 377,
	400, 347, 393, 419, 369, 397, 420, 0, 0, 0,
	379, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 396, 415, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	336, 395, 0, 340, 343, 425, 413, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 381, 385, 401, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	392, 0, 0, 0, 344, 341, 0, 0, 0, 0,
	346, 0, 361, 402, 0, 335, 405, 411, 376, 196,
	414, 374, 373, 417, 138, 0, 0, 152, 105, 104,
	113, 409, 358, 366, 96, 364, 144, 134, 164, 391,
	135, 143, 117, 156, 139, 163, 197, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 339,
	0, 150, 166, 178, 354, 412, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 350, 353, 348, 349,
	387, 388, 421, 422, 423, 403, 345, 0, 351, 352,
	0, 407, 390, 84, 0, 115, 176, 140, 102, 167,
	416, 406, 0, 378, 418, 356, 370, 426, 371, 372,
	399, 342, 386, 132, 368, 0, 359, 337, 365, 338,
	357, 380, 100, 383, 355, 408, 389, 114, 424, 116,
	394, 0, 149, 125, 0, 0, 382, 410, 384, 404,
	377, 400, 347, 393, 419, 369, 397, 420, 0, 0,
	0, 379, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 396, 415, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 336, 395, 0, 340, 343, 425, 413, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 401,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 360,
	0, 392, 0, 0, 0, 344, 341, 0, 0, 0,
	0, 346, 0, 361, 402, 0, 335, 405, 411, 376,
	196, 414, 374, 373, 417, 138, 0, 0, 152, 105,
	104, 113, 409, 358, 366, 96, 364, 144, 134, 164,
	391, 135, 143, 117, 156, 139, 163, 197, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 90, 169, 89, 333, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	339, 0, 150, 166, 178, 354, 412, 172, 173, 174,
	175, 0, 0, 0, 334, 332, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 350, 353, 348,
	349, 387, 388, 421, 422, 423, 403, 345, 0, 351,
	352, 0, 407, 390, 84, 0, 115, 176, 140, 102,
	167, 416, 406, 0, 378, 418, 356, 370, 426, 371,
	372, 399, 342, 386, 132, 368, 0, 359, 337, 365,
	338, 357, 380, 100, 383, 355, 408, 389, 114, 424,
	116, 394, 0, 149, 125, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 419, 369, 397, 420, 0,
	0, 0, 379, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 396, 415,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 336, 395, 0, 340, 343, 425, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	0, 0, 346, 0, 361, 402, 0, 335, 405, 411,
	376, 196, 414, 374, 373, 417, 138, 0, 0, 152,
	105, 104, 113, 409, 358, 366, 96, 364, 144, 134,
	164, 391, 135, 143, 117, 156, 139, 163, 197, 171,
	154, 170, 85, 153, 612, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 90, 169, 89, 333,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 339, 0, 150, 166, 178, 354, 412, 172, 173,
	174, 175, 0, 0, 0, 334, 332, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 350, 353,
	348, 349, 387, 388, 421, 422, 423, 403, 345, 0,
	351, 352, 0, 407, 390, 84, 0, 115, 176, 140,
	102, 167, 416, 406, 0, 378, 418, 356, 370, 426,
	371, 372, 399, 342, 386, 132, 368, 0, 359, 337,
	365, 338, 357, 380, 100, 383, 355, 408, 389, 114,
	424, 116, 394, 0, 149, 125, 0, 0, 382, 410,
	384, 404, 377, 400, 347, 393, 419, 369, 397, 420,
	0, 0, 0, 379, 82, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 396,
	415, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 336, 395, 0, 340, 343, 425, 413,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 401, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 392, 0, 0, 0, 344, 341, 0,
	0, 0, 0, 346, 0, 361, 402, 0, 335, 405,
	411, 376, 196, 414, 374, 373, 417, 138, 0, 0,
	152, 105, 104, 113, 409, 358, 366, 96, 364, 144,
	134, 164, 391, 135, 143, 117, 156, 139, 163, 197,
	171, 154, 170, 85, 153, 324, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 90, 169, 89,
	333, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 339, 0, 150, 166, 178, 354, 412, 172,
	173, 174, 175, 0, 0, 0, 334, 332, 327, 326,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 350,
	353, 348, 349, 387, 388, 421, 422, 423, 403, 345,
	0, 351, 352, 0, 407, 390, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 792, 0, 255, 0,
	0, 0, 100, 0, 250, 0, 0, 114, 297, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 287, 253, 281, 274, 252, 251, 192, 276, 277,
	278, 279, 0, 93, 275, 282, 0, 280, 283, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 266, 0, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 244, 0, 0,
	0, 308, 0, 265, 0, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 306, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 197, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 309, 290, 291, 292,
	293, 295, 0, 294, 84, 0, 115, 176, 140, 102,
	167, 132, 0, 0, 0, 0, 255, 0, 0, 0,
	100, 0, 250, 0, 0, 114, 297, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 287,
	253, 281, 274, 252, 251, 192, 276, 277, 278, 279,
	0, 93, 275, 282, 0, 280, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 266, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 1289, 0, 0, 0, 308,
	0, 265, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 306, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 197, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 298, 307, 304, 305, 302,
	303, 301, 300, 299, 309, 290, 291, 292, 293, 295,
	0, 294, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 0, 255, 0, 0, 0, 100, 0,
	250, 0, 0, 114, 297, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 478, 287, 253, 281,
	274, 252, 251, 192, 276, 277, 278, 279, 0, 93,
	275, 282, 0, 280, 283, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 266,
	0, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 0, 0, 0, 0, 308, 0, 265,
	0, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 306,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 197, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 298, 307, 304, 305, 302, 303, 301,
	300, 299, 309, 290, 291, 292, 293, 295, 0, 294,
	84, 0, 115, 176, 140, 102, 167, 132, 0, 0,
	0, 0, 255, 0, 0, 0, 100, 0, 250, 0,
	0, 114, 297, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 287, 253, 281, 274, 252,
	251, 192, 276, 277, 278, 279, 0, 93, 275, 282,
	0, 280, 283, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 266, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 244, 0, 0, 0, 308, 0, 265, 0, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 306, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 197, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 298, 307, 304, 305, 302, 303, 301, 300, 299,
	309, 290, 291, 292, 293, 295, 0, 294, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 0,
	255, 0, 0, 0, 100, 0, 250, 0, 0, 114,
	297, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 877, 0,
	56, 0, 0, 287, 253, 281, 274, 252, 251, 192,
	276, 277, 278, 279, 0, 93, 275, 282, 0, 280,
	283, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 266, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 0,
	0, 0, 0, 308, 0, 265, 0, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 306, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 197,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 309, 290,
	291, 292, 293, 295, 26, 294, 84, 0, 115, 176,
	140, 102, 167, 0, 0, 0, 132, 0, 0, 0,
	0, 255, 0, 0, 0, 100, 0, 250, 0, 0,
	114, 297, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 287, 253, 281, 274, 252, 251,
	192, 276, 277, 278, 279, 0, 93, 275, 282, 0,
	280, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 266, 0, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	0, 0, 0, 0, 308, 0, 265, 0, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 306, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	197, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	298, 307, 304, 305, 302, 303, 301, 300, 299, 309,
	290, 291, 292, 293, 295, 0, 294, 84, 0, 115,
	176, 140, 102, 167, 132, 0, 0, 0, 0, 255,
	0, 0, 0, 100, 0, 250, 0, 0, 114, 297,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 287, 253, 281, 274, 252, 251, 192, 276,
	277, 278, 279, 0, 93, 275, 282, 0, 280, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 266, 0, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 0, 0,
	0, 0, 308, 0, 265, 0, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 306, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 197, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 298, 307,
	304, 305, 302, 303, 301, 300, 299, 309, 290, 291,
	292, 293, 295, 132, 294, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 297, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 287, 253, 281, 274, 252, 251, 192, 276, 277,
	278, 279, 0, 93, 275, 282, 0, 280, 283, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 0, 0, 0,
	0, 308, 0, 265, 0, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 306, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	1379, 135, 143, 117, 156, 139, 163, 197, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 309, 290, 291, 292,
	293, 295, 132, 294, 84, 0, 115, 176, 140, 102,
	167, 100, 0, 0, 0, 0, 114, 297, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	287, 253, 281, 274, 252, 251, 192, 276, 277, 278,
	279, 0, 93, 275, 282, 0, 280, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 0, 0, 0, 0,
	308, 0, 265, 0, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 306, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 197, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 298, 307, 304, 305,
	302, 303, 301, 300, 299, 309, 290, 291, 292, 293,
	295, 132, 294, 84, 0, 115, 176, 140, 102, 167,
	100, 0, 0, 0, 0, 114, 297, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 287,
	253, 281, 274, 553, 251, 192, 276, 277, 278, 279,
	0, 93, 275, 282, 0, 280, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 0, 0, 0, 0, 308,
	0, 265, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 306, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 197, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 298, 307, 304, 305, 302,
	303, 301, 300, 299, 309, 290, 291, 292, 293, 295,
	0, 294, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 500, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 114, 0, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 502, 503, 504, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 497, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 197, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 73, 0, 0, 0, 79,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 75, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 76, 0, 26, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 0, 82, 0, 0, 502,
	503, 504, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 197, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 84, 0,
	115, 176, 140, 102, 167, 100, 0, 0, 0, 0,
	114, 0, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 194, 0, 0, 193, 191,
	192, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	197, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 115,
	176, 140, 102, 167, 132, 0, 0, 0, 602, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 193, 191, 192, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 197, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 194, 0, 0, 193, 191, 192, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 197, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 84, 0, 115, 176, 140, 102,
	167, 100, 0, 621, 0, 0, 114, 0, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 623, 622, 624, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 197, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 176, 140, 102, 167,
	132, 0, 0, 0, 602, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	0, 0, 193, 191, 192, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 600, 143,
	117, 156, 139, 163, 197, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 84, 0, 115, 176, 140, 102, 167, 580, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	0, 0, 193, 191, 192, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 197, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 132,
	0, 84, 0, 115, 176, 140, 102, 167, 100, 0,
	0, 0, 0, 114, 0, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 193, 191, 192, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 197, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	193, 191, 192, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 196, 0, 0, 0, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 197, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 502,
	503, 504, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 197, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 84, 0,
	115, 176, 140, 102, 167, 100, 0, 0, 0, 0,
	114, 0, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 0, 193, 757,
	192, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	197, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 84, 0, 115,
	176, 140, 102, 167, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 193, 191, 192,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 197,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 0, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 81, 0, 740,
	0, 0, 741, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 197, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 197, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 115, 176, 140, 102,
	167,
}

var yyPact = [...]int{
	1993, -1000, -205, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 864, 891, -1000, -1000, -1000, -1000,
	-1000, -1000, 671, 8250, 52, 83, -23, 10510, 81, 180,
	11257, -1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-22, 11257, 446, 670, -1000, -1000, -1000, -1000, -1000, 848,
	859, 681, 852, 761, -1000, 6219, 53, 9255, 10261, 5187,
	-1000, 444, 76, 11257, -174, 11755, 47, 47, 47, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 80,
	11257, -1000, 11257, 42, 443, 42, 42, 42, 11257, -1000,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11257, 439,
	806, 99, 3832, 3832, 3832, 3832, -13, 3832, -103, -91,
	689, -1000, -1000, -1000, -1000, 3832, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11257, 666, 673, 327,
	808, 6996, 6996, 864, -1000, 670, -1000, -1000, -1000, 786,
	-1000, -1000, 314, 878, -1000, 8001, 115, -1000, 6996, 2314,
	636, -1000, -1000, -1000, -1000, 636, 105, 265, -1000, -1000,
	-1000, 7494, 7494, 7494, 7494, 7494, 7494, -1000, -1000, -1000,
	-1000, -1000, -1000, 636, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6738, 7743, 636, 636,
	636, 636, 636, 636, 636, 636, 6996, 636, 636, 636,
	636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
	10012, 643, 772, -1000, -1000, -1000, 828, 8748, 9762, 11257,
	650, -1000, 618, 4916, -144, -1000, -1000, -1000, 177, 9504,
	-1000, -1000, -1000, 798, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 551, -1000, 2115,
	434, 3832, 69, 506, 429, 191, 428, 11257, 11257, 3832,
	56, 11257, 825, 688, 11257, 419, 417, -1000, 3561, -1000,
	3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, -1000, -1000,
	-1000, -1000, -1000, -1000, 3832, 3832, -1000, -126, -88, -1000,
	11257, -1000, -1000, 87, 87, 2115, 11257, -1000, -1000, -1000,
	884, 151, 259, 113, 630, -1000, 437, 848, 327, 761,
	11506, 700, -1000, -1000, 11257, -1000, 6996, 6996, 425, -1000,
	10759, -1000, -1000, -1000, -1000, -1000, 3019, 156, 7494, 306,
	158, 7494, 7494, 7494, 7494, 7494, 7494, 7494, 7494, 7494,
	7494, 7494, 7494, 7494, 7494, 7494, 463, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 415, -1000, 670, 504, 504,
	269, -1000, 124, 124, 124, 124, 124, 124, 5445, 327,
	542, 352, 6738, -1000, 2279, 6219, 6219, 6996, 6996, 11008,
	11008, 6219, 830, 184, 352, 11008, -1000, 327, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6219, 6219, 6219, 6219, 160,
	11257, -1000, 11008, 9255, 9255, 9255, 9255, 9255, -1000, 739,
	733, -1000, 742, 727, 752, 11257, -1000, 539, 8748, 137,
	636, -1000, 11257, -1000, 2, 585, 9255, 11257, -1000, -1000,
	4645, 618, -144, 584, -1000, -129, -109, 6477, 120, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2748, 207, 387, -76,
	-1000, -1000, -1000, -1000, 638, -1000, 638, 638, 638, 638,
	-49, -49, -49, -49, -1000, -1000, -1000, -1000, -1000, 669,
	668, -1000, 638, 638, 638, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 667, 667, 667, 641, 641, 651, -1000, 11257,
	-190, 382, 3832, 824, 3832, -1000, 55, -1000, 11257, -1000,
	-1000, 11257, 3832, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 264,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 537, -1000, 616, -1000, -1000, 760, 6996, 6996,
	3290, 6996, -1000, -1000, -1000, 808, -1000, 830, 866, -1000,
	778, 777, 6219, -1000, -1000, 156, 338, -1000, -1000, 397,
	-1000, -1000, -1000, -1000, 112, 636, -1000, -1000, 1790, -1000,
	-1000, -1000, -1000, 306, 7494, 7494, 7494, 58, 1790, 1908,
	243, 640, 124, 319, 319, 125, 125, 125, 125, 125,
	303, 303, -1000, -1000, -1000, 327, 265, -1000, -1000, 265,
	-1000, 327, 6219, 596, -1000, -1000, 6996, -1000, 327, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	535, 535, 280, 324, 664, -1000, 108, 663, 535, 6219,
	234, -1000, 6996, 327, -1000, 535, 327, 535, 535, 565,
	775, 636, -1000, 653, -1000, 174, 772, 660, 687, 703,
	-1000, -1000, -1000, -1000, 712, -1000, 711, -1000, -1000, -1000,
	-1000, -1000, 74, 71, 57, 11755, -1000, 876, 9255, 570,
	-1000, -1000, 584, -144, -135, -1000, -1000, -1000, 352, -1000,
	479, 567, 2477, -1000, -1000, -1000, -1000, -1000, -1000, 657,
	815, 189, 181, 378, -1000, -1000, 776, -1000, 267, -78,
	-1000, -1000, 348, -49, -49, -1000, -1000, 120, 792, 120,
	120, 120, 420, 420, -1000, -1000, -1000, -1000, 345, -1000,
	-1000, -1000, 328, -1000, 685, 11755, 3832, -1000, 4374, -1000,
	-1000, -1000, -1000, -1000, -1000, 680, 460, 185, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1,
	-1000, 3832, -1000, 271, 11257, 11257, 2115, 827, 11257, 751,
	352, 352, 101, -1000, -1000, 11257, -1000, -1000, -1000, -1000,
	617, -1000, -1000, -1000, 4103, 6219, -1000, 58, 1790, 1684,
	-1000, 7494, 7494, -1000, -1000, 535, 6219, 352, -1000, -1000,
	-1000, 278, 463, 278, 7494, 7494, 3290, 7494, 7494, -184,
	604, 182, -1000, 6996, 226, -1000, -1000, -1000, -1000, -1000,
	684, 11008, 636, -1000, 8499, -1000, 11755, 864, 11008, 6996,
	6996, -1000, -1000, 6996, 656, -1000, 6996, -1000, -1000, -1000,
	636, 636, 636, 493, -1000, 864, 570, -1000, -1000, -1000,
	-134, -146, -1000, -1000, -1000, 2748, -1000, 2748, 11755, -1000,
	374, 360, -1000, -1000, 682, 45, -1000, -1000, -1000, 482,
	120, 120, -1000, 196, -1000, -1000, -1000, 526, -1000, 505,
	566, 501, 11257, -1000, -1000, 562, -1000, 173, -1000, -1000,
	11755, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11755, 11257, -1000, -1000, -1000, -1000, -1000,
	11755, -1000, -1000, 420, 6996, -1000, -1000, -1000, 87, -1000,
	-1000, 4374, -1000, 876, 9255, -1000, -1000, 327, -1000, 7494,
	1790, 1790, -1000, -1000, 327, 638, 638, -1000, 638, 641,
	-1000, 638, -31, 638, -32, 636, 327, 327, 1440, 1619,
	-1000, 737, 1502, 636, -181, -1000, 352, 6996, -203, 817,
	465, 512, -1000, -1000, 5961, 327, 496, 100, 493, 848,
	-1000, 352, 352, 352, 11755, 352, 11755, 11755, 11755, 9006,
	11755, 848, -1000, -1000, -1000, -1000, 2477, -1000, 488, -1000,
	638, -1000, -1000, -72, 882, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -49, 420, -49, 325,
	-1000, 322, 3832, 4374, 2748, -1000, 637, -1000, -1000, -1000,
	-1000, 819, -1000, 352, -1000, 874, 521, -1000, 1790, -1000,
	-1000, 109, -1000, -1000, -1000, -1000, -1000, -1000, 284, -1000,
	-1000, -1000, 7494, 7494, -1000, 7494, 7494, 7494, 327, 420,
	352, -1000, 5703, 813, -1000, 636, -1000, -1000, 602, 10759,
	10759, -1000, -1000, 480, -1000, 474, 474, 474, 137, -1000,
	-1000, 159, 11755, -1000, 170, -1000, -158, 120, -1000, 120,
	457, 449, -1000, -1000, -1000, 11755, 636, 868, 854, -1000,
	-1000, 327, 1560, 1560, 1560, 1560, 9, -1000, -1000, -1000,
	498, 881, -1000, 636, -1000, 670, 98, -1000, 11755, -1000,
	-1000, -1000, -1000, -1000, 159, -1000, 330, 171, 420, -1000,
	276, 810, -1000, 809, -1000, -1000, -1000, -1000, -1000, 472,
	-1, -1000, 6996, 6996, -1000, -1000, -1000, -1000, -1000, 327,
	44, -195, 11008, 512, 327, 10759, -1000, -1000, -1000, 282,
	-1000, -1000, -1000, 420, -1000, -1000, 506, 453, -1000, 11755,
	352, 498, -1000, 746, -188, -199, 490, -1000, -1000, -1000,
	-1000, -190, -1000, -1, 773, -1000, 744, -1000, -1000, -1000,
	-4, -193, -6, -197, 636, -200, 7245, -1000, 1560, 327,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1103, 26, 15, 1101, 1100, 1097, 904, 901, 897,
	1096, 1095, 1093, 1088, 1087, 1086, 1085, 1084, 1083, 1082,
	1081, 1080, 1079, 1078, 1076, 1073, 1072, 141, 1071, 1070,
	1067, 59, 1066, 64, 1063, 1062, 39, 247, 40, 32,
	771, 1059, 34, 67, 81, 1056, 45, 1055, 1054, 66,
	1053, 58, 1052, 1051, 1511, 1050, 1049, 6, 24, 1046,
	1045, 1044, 1043, 63, 706, 1042, 1039, 1038, 1027, 1024,
	1023, 48, 8, 5, 21, 9, 1022, 142, 17, 1021,
	47, 1018, 1014, 1010, 1009, 29, 1007, 49, 1006, 25,
	50, 1005, 13, 55, 31, 12, 16, 69, 51, 1002,
	18, 52, 35, 1001, 1000, 463, 998, 997, 996, 995,
	993, 992, 155, 389, 991, 989, 988, 987, 38, 191,
	886, 557, 60, 986, 985, 10, 978, 1279, 65, 56,
	22, 977, 41, 1207, 33, 975, 965, 14, 964, 42,
	963, 961, 960, 959, 957, 955, 953, 61, 951, 950,
	946, 36, 37, 943, 942, 57, 28, 936, 935, 934,
	44, 53, 930, 46, 929, 928, 926, 925, 23, 71,
	924, 11, 923, 4, 922, 921, 2, 919, 30, 918,
	3, 917, 7, 43, 916, 915, 20, 914, 913, 19,
	912, 911, 910, 908, 0, 145, 907, 899, 100,
}

var yyR1 = [...]int{
	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 196, 196, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 135, 135, 11, 11, 11, 11, 11, 11,
	11, 182, 182, 181, 180, 180, 179, 179, 178, 16,
	165, 166, 166, 166, 161, 138, 138, 139, 139, 139,
	139, 139, 146, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 143, 143, 143,
	143, 143, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 160, 160, 147, 147, 155,
	155, 156, 156, 156, 153, 153, 154, 154, 157, 157,
	157, 148, 148, 148, 148, 148, 148, 148, 150, 150,
	158, 158, 151, 151, 151, 152, 152, 152, 159, 159,
	159, 159, 159, 149, 149, 162, 162, 174, 174, 173,
	173, 173, 164, 164, 170, 170, 170, 170, 170, 163,
	163, 172, 172, 171, 167, 167, 167, 168, 168, 168,
	169, 169, 169, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 177, 175, 175, 176, 176, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 110, 110, 107, 107, 108, 108, 109, 109, 109,
	111, 111, 111, 136, 136, 136, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 24, 25, 25,
	25, 186, 186, 186, 186, 186, 186, 26, 26, 187,
	187, 197, 27, 28, 28, 29, 29, 29, 33, 33,
	33, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 123, 123, 123, 125, 125, 125, 125,
	122, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	56, 56, 92, 92, 94, 94, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 131, 131, 130, 130,
	130, 129, 50, 50, 50, 52, 51, 51, 51, 51,
	53, 53, 55, 55, 54, 54, 57, 57, 57, 57,
	58, 58, 40, 40, 40, 40, 40, 40, 40, 106,
	106, 60, 60, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 70, 70, 70, 70, 70, 70, 61,
	61, 61, 61, 61, 61, 61, 36, 36, 71, 71,
	71, 77, 72, 72, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 191, 190, 68, 68,
	68, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 67, 67, 67, 67,
	67, 67, 67, 67, 198, 198, 69, 69, 69, 69,
	34, 34, 34, 34, 34, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 81, 81, 35, 35, 79, 79, 80, 82, 82,
	78, 78, 78, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 184, 184, 65, 65, 65,
	83, 83, 84, 84, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 89, 90, 90, 90, 62,
	62, 62, 62, 62, 62, 91, 91, 91, 91, 95,
	95, 73, 73, 75, 75, 74, 76, 185, 185, 185,
	96, 96, 100, 97, 97, 101, 101, 101, 99, 99,
	99, 126, 126, 126, 104, 104, 112, 112, 113, 113,
	105, 105, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 116, 116, 117, 117, 117,
	124, 124, 120, 120, 120, 121, 121, 127, 127, 127,
	127, 127, 128, 128, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 189, 189, 189, 194, 195, 132, 133,
	133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 4, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 4, 4,
	7, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	3, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 1, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	4, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 0, 2, 2,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 136, 137, 139, 138, 164, 140, 157,
	49, 176, 177, 179, 180, 25, 158, 159, 162, 163,
	181, 182, 183, -194, 8, 261, 53, -193, 277, -85,
	15, -29, 5, -27, -197, -27, -27, -27, -27, -27,
	-165, 53, -117, 145, 95, 172, 253, 142, 143, 149,
	-120, 61, 57, -119, 269, 176, 190, 184, 210, 202,
	200, 203, 240, 68, 179, 249, 160, 199, 195, 193,
	27, 215, 274, 194, 155, 154, 216, 220, 241, 188,
	189, 243, 214, 156, 32, 271, 34, 168, 244, 218,
	213, 209, 212, 187, 208, 38, 222, 221, 223, 239,
	205, 196, 18, 247, 163, 166, 217, 219, 150, 170,
	273, 245, 192, 167, 162, 248, 180, 242, 251, 37,
	227, 186, 153, 177, 174, 206, 169, 197, 198, 211,
	185, 207, 178, 171, 164, 250, 228, 275, 204, 201,
	175, 173, 232, 233, 234, 235, 272, 246, 229, -105,
	145, 147, 143, 143, 144, 145, 253, 142, 143, -54,
	-127, 61, 62, 60, 57, -119, 145, 172, 143, 131,
	203, 136, 230, 144, 32, 170, -136, 143, 178, -107,
	173, 232, 233, 234, 235, 57, 242, 241, 236, -127,
	178, -132, -132, -132, -132, -132, 182, -127, 57, -2,
	-89, 17, 16, -5, -3, -194, 6, 20, 21, -33,
	39, 40, -28, -39, 122, -40, -127, -59, 97, -64,
	29, 61, 60, 57, -119, 23, -78, -63, -60, -76,
	-77, 131, 132, 120, 121, 128, 98, -190, -191, -68,
	-66, -67, -69, -120, 59, 69, 63, 64, 65, 66,
	72, 58, 70, 73, 74, -74, -194, 56, 43, 44,
	262, 263, 264, 265, 268, 266, 100, 33, 252, 260,
	259, 258, 256, 257, 254, 255, 148, 253, 126, 261,
	-105, -42, -43, -44, -45, -56, -77, -194, -54, 11,
	-49, -54, -97, -135, 178, -101, 242, 241, -121, -99,
	-120, -118, 240, 203, 239, 141, 96, 22, 24, 225,
	99, 131, 16, 100, 130, 262, 136, 47, 254, 255,
	252, 264, 265, 253, 230, 29, 10, 25, 158, 21,
	124, 138, 103, 104, 161, 23, 159, 74, 19, 50,
	11, 13, 14, 148, 147, 115, 144, 45, 8, 56,
	26, 112, 41, 28, 43, 113, 17, 256, 257, 31,
	268, 165, 126, 48, 35, 97, 72, 51, 95, 15,
	46, 114, 139, 261, 44, 142, 6, 267, 30, 157,
	42, 143, 231, 102, 146, 73, 5, 149, 9, 49,
	52, 258, 259, 260, 33, 101, 12, -166, -161, 57,
	144, -54, 261, -120, -113, 148, -113, -113, 143, -54,
	-54, -112, 148, 57, -112, -112, -112, -54, 133, -54,
	57, 30, 253, 57, 170, 143, 171, 145, -133, -194,
	-121, -133, -133, -133, 174, 175, -133, 243, -108, 237,
	51, -133, -127, 11, 22, -194, 52, -195, 55, -90,
	19, 31, -40, -127, -86, -87, -40, -85, -2, -27,
	35, -31, 21, 67, 11, -123, 96, 95, 112, -122,
	22, -125, 60, 61, 62, -120, 133, -40, -61, 115,
	97, 113, 114, 99, 117, 116, 127, 120, 121, 122,
	123, 124, 125, 126, 118, 119, 130, 105, 106, 107,
	108, 109, 110, 111, -106, -194, -77, -194, 134, 135,
	-184, 71, -64, -64, -64, -64, -64, -64, -194, -2,
	-72, -40, -194, 60, -64, -194, -194, -194, -194, -194,
	-194, -194, -194, -81, -40, -194, -198, -194, -198, -198,
	-198, -198, -198, -198, -198, -194, -194, -194, -194, -55,
	26, -54, 30, 54, -50, -52, -51, -53, 41, 45,
	47, 42, 43, 44, 48, -131, 22, -42, -194, -130,
	166, -129, 22, -127, -54, -49, -196, 54, 11, 52,
	54, -97, 178, -98, -102, 243, 245, 105, -126, -120,
	-189, 29, 61, 60, 62, 30, 55, 54, -139, -142,
	-144, -143, -145, -146, -140, -141, 200, 201, 131, 204,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	30, 160, 197, 198, 199, 94, 216, 217, 218, 219,
	220, 221, 222, 223, 202, 184, 185, 186, 187, 188,
	189, 190, 192, 193, 194, 195, 196, 57, -133, 145,
	-182, 52, 57, 97, 57, -54, -54, -133, 146, -54,
	23, 51, -54, 57, 57, -128, -127, -118, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, 244, -110,
	231, 238, -54, -186, -3, -7, -9, -8, 57, -189,
	61, -186, -138, -139, -187, -127, 9, 115, 54, 18,
	133, 54, -88, 24, 25, -89, -195, -33, -65, -120,
	63, 66, -32, 42, -54, -40, -40, -70, 72, 97,
	73, 74, -122, 122, -128, -121, -118, 61, -64, -71,
	-74, -77, 71, 115, 113, 114, 99, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -134, 57, -189, 57, -63, 60, 61, -63,
	71, -38, 21, -37, -39, -195, 54, -195, -2, -188,
	75, 76, 77, 78, 79, 80, 81, 82, 94, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	-37, -37, -40, -40, -78, -120, -127, -78, -37, -31,
	-79, -80, 101, -78, -195, -37, -38, -37, -37, -93,
	29, 166, -54, -96, -100, -78, -43, -44, -44, -43,
	-44, 41, 41, 41, 46, 41, 46, 41, -51, -127,
	-195, -57, 49, 147, 50, -194, -129, -93, 52, -42,
	-54, -101, -98, 54, 244, 246, 247, 51, -40, -152,
	130, -167, -168, -169, -121, -189, 63, -161, -162, -170,
	150, 153, 149, -163, 144, 28, -157, 72, 97, -153,
	228, -147, 53, -147, -147, -147, -147, -151, 203, -151,
	-151, -151, 53, 53, -147, -147, -147, -155, 53, -155,
	-155, -156, 53, -156, -124, 52, -54, -180, 272, -181,
	57, -133, 23, -133, -114, 141, 138, 139, -177, 137,
	225, 203, 68, 29, 15, 262, 166, 275, 57, 167,
	-54, -54, -133, -109, 11, 115, 54, -195, 54, 37,
	-40, -40, -128, -87, -90, -104, 19, 11, 33, 33,
	-37, 72, 73, 74, 133, -194, -71, -64, -64, -64,
	-36, 161, 96, -195, -195, -37, 54, -40, -195, -195,
	-195, 54, 52, 22, 54, 11, 133, 54, 11, -195,
	-37, -82, -80, 103, -40, -195, -195, -195, -195, -195,
	-62, 30, 33, -2, -194, 33, -194, -58, 54, 12,
	105, -47, -46, 51, 52, -48, 51, -46, 41, 41,
	144, 144, 144, -94, -120, -58, -42, -58, -102, -103,
	248, 245, 251, 57, -189, 54, -169, 105, 53, 28,
	-163, -163, 57, 57, -148, 29, 72, -154, 229, 63,
	-151, -151, -152, 30, -152, -152, -152, -160, -189, -160,
	63, 63, 51, -120, -133, -179, -178, -121, -132, -183,
	172, 151, 152, 155, 154, 57, 144, 28, 150, 153,
	166, 149, -183, 172, -115, -116, 146, 22, 144, 28,
	166, -133, -111, 113, 12, -127, -127, -139, 22, -127,
	38, 133, -54, -41, 11, 122, -121, -38, -36, 96,
	-64, -64, -195, -39, -137, 131, 200, 160, 199, 195,
	214, 205, 227, 197, 228, 201, -134, -137, -64, -64,
	-121, -64, -64, 269, -85, 104, -40, 102, -95, 51,
	-96, -73, -75, -74, -194, -2, -91, -125, -94, -85,
	-100, -40, -40, -40, 53, -40, -194, -194, -194, -195,
	54, -85, -58, 245, 249, 250, -168, -169, -172, -171,
	-120, 57, 57, -150, 51, -189, 63, 64, 72, 252,
	69, 55, -152, -152, 57, 131, 55, 54, 55, 54,
	55, 54, -54, 54, 105, -132, -120, -132, -120, -54,
	-132, -120, -189, -40, -186, -58, -42, -195, -64, -195,
	-147, -147, -147, -156, -147, 189, -147, 189, -194, -195,
	-195, -195, 54, 19, -195, 54, 19, -194, -35, 267,
	-40, -185, 276, 27, -95, 54, -195, -195, -195, 54,
	133, -195, -89, -92, -120, -92, -92, -92, -130, -120,
	-89, 55, 54, -147, -158, 225, 9, -151, -189, -151,
	63, 63, -133, -178, -169, 53, 26, -83, 13, -151,
	57, 63, -64, -64, -64, -64, -64, -195, -189, 122,
	-72, 28, -75, 33, -2, -194, -125, -125, 54, 55,
	-195, -195, -195, -57, -174, -173, 52, 156, 68, -171,
	-159, 150, 28, 149, 252, -152, -152, 55, 55, -92,
	-194, -84, 14, 16, -195, -195, -195, -195, -195, -34,
	115, 272, 9, -73, -2, 133, -120, -173, 57, -164,
	105, -189, -149, 68, 28, 28, 55, -175, -176, 166,
	-40, -72, -195, 270, 48, 273, -96, -195, -125, 63,
	-189, -182, -195, 54, -120, 38, 271, 274, -180, -176,
	33, 38, 168, 272, 169, 273, -194, 274, -64, 165,
	-195, -195,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 544, 0, 301, 301, 301, 301,
	301, 301, 0, 617, 600, 0, 0, 0, 0, -2,
	277, 278, 0, 280, 281, 848, 848, 848, 848, 848,
	0, 0, 0, 0, 37, 38, 846, 1, 3, 552,
	0, 0, 305, 308, 303, 0, 600, 0, 0, 0,
	64, 0, 0, 833, 0, 834, 598, 598, 598, 618,
	619, 622, 623, 624, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 835, 836, 837, 838, 839, 840, 841, 842, 0,
	0, 601, 0, 596, 0, 596, 596, 596, 0, 235,
	374, 627, 628, 629, 630, 631, 833, 834, 0, 0,
	0, 0, 849, 849, 849, 849, 0, 849, 0, 265,
	254, 256, 257, 258, 259, 849, 274, 275, 264, 276,
	279, 282, 283, 284, 285, 286, 0, 0, 297, 30,
	556, 0, 0, 544, 32, 0, 301, 306, 307, 311,
	309, 310, 302, 0, 319, 323, 0, 382, 0, 387,
	389, -2, -2, -2, -2, 0, 424, 425, 426, 427,
	428, 0, 0, 0, 0, 0, 0, 450, 451, 452,
	453, 454, 455, 520, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 391, 392, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 0, 484, 484,
	484, 484, 484, 484, 484, 484, 0, 0, 0, 0,
	0, 0, 333, 335, 336, 337, 356, 0, 358, 0,
	0, 45, 49, 0, 824, 583, -2, -2, 0, 0,
	625, 626, -2, 753, -2, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 0, 81, 0,
	0, 849, 0, 71, 0, 0, 0, 0, 0, 849,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 236,
	849, 849, 849, 849, 849, 849, 849, 849, 245, 850,
	851, 246, 247, 248, 849, 849, 250, 0, 0, 266,
	0, 260, 287, 0, 0, 0, 0, 31, 847, 25,
	0, 0, 553, 0, 545, 546, 549, 552, 30, 308,
	0, 313, 312, 304, 0, 320, 0, 0, 0, 324,
	0, 330, 326, 327, 328, 329, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 409, 410, 411,
	412, 413, 414, 415, 388, 0, 402, 0, 0, 0,
	534, 535, 444, 445, 446, 447, 448, 449, 315, 30,
	0, 422, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 512, 0, 476, 0, 477, 478,
	479, 480, 481, 482, 483, 0, 315, 0, 0, 47,
	0, 373, 0, 0, 0, 0, 0, 0, 362, 0,
	0, 365, 0, 0, 0, 0, 357, 0, 0, 376,
	797, 359, 0, 361, -2, 0, 0, 0, 43, 44,
	0, 50, 824, 52, 53, 0, 0, 0, 165, 591,
	592, 593, 622, 843, 845, 589, 194, 0, 148, 144,
	88, 89, 90, 91, 137, 94, 137, 137, 137, 137,
	162, 162, 162, 162, 120, 121, 122, 123, 124, 0,
	0, 107, 137, 137, 137, 111, 127, 128, 129, 130,
	131, 132, 133, 134, 92, 95, 96, 97, 98, 99,
	100, 101, 139, 139, 139, 141, 141, 620, 66, 0,
	74, 0, 849, 0, 849, 79, 0, 210, 0, 229,
	597, 0, 849, 232, 233, 375, 632, 633, 237, 238,
	239, 240, 241, 242, 243, 244, 249, 253, 251, 267,
	261, 262, 255, 288, 291, 292, 293, 294, 295, 296,
	844, 289, 0, 85, 298, 299, 557, 0, 0, 0,
	0, 0, 548, 550, 551, 556, 33, 311, 0, 537,
	0, 0, 0, 314, 28, 383, 384, 386, 403, 0,
	405, 407, 325, 321, 0, 521, -2, -2, 393, 394,
	418, 419, 420, 0, 0, 0, 0, 416, 398, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 443, 495, 496, 0, 441, 523, 524, 442,
	536, 0, 0, 316, 317, 421, 0, 575, 30, 457,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	0, 0, 0, 0, 0, 520, 0, 0, 0, 0,
	518, 515, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 372, 380, 580, 0, 334, 352, 354, 0,
	349, 363, 364, 366, 0, 368, 0, 370, 371, 338,
	339, 340, 0, 0, 0, 0, 360, 380, 0, 380,
	46, 584, 51, 0, 0, 56, 57, 585, 586, 587,
	0, 80, 195, 197, 200, 201, 202, 82, 83, 0,
	0, 0, 0, 0, 189, 190, 151, 149, 0, 146,
	145, 93, 0, 162, 162, 114, 115, 165, 0, 165,
	165, 165, 0, 0, 108, 109, 110, 102, 0, 103,
	104, 105, 0, 106, 0, 0, 849, 68, 0, 72,
	73, 69, 599, 70, 848, 0, 0, 612, 211, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 0,
	228, 849, 231, 270, 0, 0, 0, 0, 0, 0,
	554, 555, 0, 547, 26, 0, 594, 595, 538, 539,
	331, 404, 406, 408, 0, 315, 395, 416, 399, 0,
	396, 0, 0, 390, 458, 0, 0, 423, -2, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 0, 516, 0, 0, 475, 486, 487, 488, 489,
	569, 0, 0, -2, 0, 36, 0, 544, 0, 0,
	0, 346, 353, 0, 0, 347, 0, 348, 367, 369,
	0, 0, 0, 0, 344, 544, 380, 42, 54, 55,
	0, 0, 61, 166, 167, 0, 198, 0, 0, 184,
	0, 0, 187, 188, 158, 0, 150, 87, 147, 0,
	165, 165, 116, 0, 117, 118, 119, 0, 135, 0,
	0, 0, 0, 621, 67, 75, 76, 0, 203, 848,
	0, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 848, 0, 0, 848, 613, 614, 615, 616,
	0, 230, 252, 0, 0, 268, 269, 86, 0, 300,
	558, 0, 27, 380, 0, 322, 522, 0, 397, 0,
	417, 400, 459, 318, 0, 137, 137, 500, 137, 141,
	503, 137, 505, 137, 508, 0, 0, 0, 0, 0,
	521, 0, 0, 0, 513, 474, 519, 0, 577, 0,
	569, 559, 571, 573, 0, 30, 0, 565, 0, 552,
	581, 381, 582, 350, 0, 355, 0, 0, 0, 358,
	0, 552, 41, 58, 59, 60, 196, 199, 0, 191,
	137, 185, 186, 160, 0, 152, 153, 154, 155, 156,
	157, 138, 112, 113, 163, 164, 162, 0, 162, 0,
	142, 0, 849, 0, 0, 204, 0, 205, 207, 208,
	209, 0, 271, 272, 290, 540, 332, 460, 401, 463,
	497, 162, 501, 502, 504, 506, 507, 509, 0, 465,
	464, 466, 0, 0, 469, 0, 0, 0, 0, 0,
	517, 34, 0, 0, 35, 0, 574, -2, 0, 0,
	0, 48, 39, 0, 342, 0, 0, 0, 376, 345,
	40, 176, 0, 193, 168, 161, 0, 165, 136, 165,
	0, 0, 65, 77, 78, 0, 0, 542, 0, 498,
	499, 0, 0, 0, 0, 0, 490, 473, 514, 578,
	579, 0, 572, 0, -2, 0, 567, 566, 0, 351,
	377, 378, 379, 341, 175, 177, 0, 182, 0, 192,
	173, 0, 170, 172, 159, 125, 126, 140, 143, 0,
	0, 29, 0, 0, 510, 467, 468, 470, 471, 0,
	0, 0, 0, 562, 30, 0, 343, 178, 179, 0,
	183, 181, 84, 0, 169, 171, 71, 0, 224, 0,
	543, 541, 472, 0, 0, 0, 570, -2, 568, 180,
	174, 74, 223, 0, 0, 491, 0, 494, 206, 225,
	0, 492, 0, 0, 0, 0, 0, 493, 0, 0,
	226, 227,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 133, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 277,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:485
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:489
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:570
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:615
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:672
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:946
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1114
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1231
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1235
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1239
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1252
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1267
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1311
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1315
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1335
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1434
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = "extended "
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = "full "
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1514
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1528
		{
			yyVAL.showFilter = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = SessionStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = GlobalStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Begin{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Commit{}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Rollback{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &OtherRead{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			setAllowComments(yylex, true)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1694
		{
			yyVAL.bytes2 = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1698
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = UnionStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = UnionAllStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = UnionDistinctStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = SQLCacheStr
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = DistinctStr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = StraightJoinHint
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.selectExprs = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1780
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1861
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1898
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1902
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1912
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1914
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1924
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1926
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = JoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = JoinStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = JoinStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = StraightJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = LeftJoinStr
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = LeftJoinStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = RightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = RightJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = NaturalJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.indexHints = nil
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2027
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2031
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2035
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.expr = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2044
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2058
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2112
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2124
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2128
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2132
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = IsNullStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = IsNotNullStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = IsTrueStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = IsNotTrueStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = IsFalseStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = IsNotFalseStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = EqualStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = LessThanStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = GreaterThanStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = LessEqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = GreaterEqualStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = NotEqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2227
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2231
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2381
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = BooleanModeStr
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = QueryExpansionStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2597
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = string("")
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2692
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &NullVal{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2789
		{
			yyVAL.exprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2807
		{
			yyVAL.orderBy = nil
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2832
		{
			yyVAL.str = AscScr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.str = AscScr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.str = DescScr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.limit = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2853
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2857
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.str = ""
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.str = ForUpdateStr
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = ShareModeStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2896
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2904
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2923
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.updateExprs = nil
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2932
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2942
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2952
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2973
		{
			yyVAL.returning = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3000
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3016
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3020
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3024
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.bytes = []byte("charset")
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &Default{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3055
		{
			yyVAL.byt = 0
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.byt = 1
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3065
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.str = IgnoreStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3071
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3092
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3105
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			decNesting(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3429
		{
			forceEOF(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3434
		{
			forceEOF(yylex)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			forceEOF(yylex)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
