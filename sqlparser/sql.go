// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const DOLLAR_SIGN = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const MICROSECOND = 57410
const SECOND = 57411
const MINUTE = 57412
const HOUR = 57413
const DAY = 57414
const WEEK = 57415
const MONTH = 57416
const QUARTER = 57417
const SECOND_MICROSECOND = 57418
const MINUTE_MICROSECOND = 57419
const MINUTE_SECOND = 57420
const HOUR_MICROSECOND = 57421
const HOUR_SECOND = 57422
const HOUR_MINUTE = 57423
const DAY_MICROSECOND = 57424
const DAY_SECOND = 57425
const DAY_MINUTE = 57426
const DAY_HOUR = 57427
const YEAR_MONTH = 57428
const OR = 57429
const AND = 57430
const NOT = 57431
const BETWEEN = 57432
const CASE = 57433
const WHEN = 57434
const THEN = 57435
const ELSE = 57436
const END = 57437
const LE = 57438
const GE = 57439
const NE = 57440
const NULL_SAFE_EQUAL = 57441
const IS = 57442
const LIKE = 57443
const REGEXP = 57444
const IN = 57445
const SHIFT_LEFT = 57446
const SHIFT_RIGHT = 57447
const DIV = 57448
const MOD = 57449
const UNARY = 57450
const COLLATE = 57451
const BINARY = 57452
const UNDERSCORE_BINARY = 57453
const INTERVAL = 57454
const empty = 57455
const PRECEDENCE = 57456
const LIST_ARG = 57457
const JSON_EXTRACT_OP = 57458
const JSON_UNQUOTE_EXTRACT_OP = 57459
const CREATE = 57460
const ALTER = 57461
const DROP = 57462
const RENAME = 57463
const ANALYZE = 57464
const ADD = 57465
const SCHEMA = 57466
const TABLE = 57467
const INDEX = 57468
const VIEW = 57469
const TO = 57470
const IGNORE = 57471
const IF = 57472
const UNIQUE = 57473
const PRIMARY = 57474
const COLUMN = 57475
const CONSTRAINT = 57476
const SPATIAL = 57477
const FULLTEXT = 57478
const FOREIGN = 57479
const KEY_BLOCK_SIZE = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const MAXVALUE = 57489
const PARTITION = 57490
const REORGANIZE = 57491
const LESS = 57492
const THAN = 57493
const PROCEDURE = 57494
const TRIGGER = 57495
const VINDEX = 57496
const VINDEXES = 57497
const STATUS = 57498
const VARIABLES = 57499
const BEGIN = 57500
const START = 57501
const TRANSACTION = 57502
const COMMIT = 57503
const ROLLBACK = 57504
const DEALLOCATE = 57505
const PREPARE = 57506
const EXECUTE = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const TIME = 57521
const TIMESTAMP = 57522
const DATETIME = 57523
const YEAR = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const ISOLATION = 57568
const LEVEL = 57569
const READ = 57570
const WRITE = 57571
const ONLY = 57572
const REPEATABLE = 57573
const COMMITTED = 57574
const UNCOMMITTED = 57575
const SERIALIZABLE = 57576
const CURRENT_TIMESTAMP = 57577
const DATABASE = 57578
const CURRENT_DATE = 57579
const CURRENT_TIME = 57580
const LOCALTIME = 57581
const LOCALTIMESTAMP = 57582
const UTC_DATE = 57583
const UTC_TIME = 57584
const UTC_TIMESTAMP = 57585
const REPLACE = 57586
const CONVERT = 57587
const CAST = 57588
const SUBSTR = 57589
const SUBSTRING = 57590
const GROUP_CONCAT = 57591
const SEPARATOR = 57592
const MATCH = 57593
const AGAINST = 57594
const BOOLEAN = 57595
const LANGUAGE = 57596
const WITH = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const RETURNING = 57601

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"empty",
	"PRECEDENCE",
	"LIST_ARG",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	173, 272,
	174, 272,
	-2, 262,
	-1, 268,
	129, 618,
	-2, 513,
	-1, 286,
	53, 615,
	129, 615,
	133, 615,
	134, 615,
	-2, 516,
	-1, 338,
	100, 796,
	-2, 62,
	-1, 339,
	100, 757,
	-2, 63,
	-1, 344,
	100, 741,
	-2, 580,
	-1, 346,
	100, 778,
	-2, 582,
	-1, 557,
	53, 615,
	129, 615,
	132, 516,
	133, 615,
	134, 615,
	-2, 445,
	-1, 612,
	52, 45,
	54, 45,
	-2, 47,
	-1, 759,
	129, 620,
	-2, 617,
	-1, 760,
	129, 618,
	-2, 616,
	-1, 807,
	129, 618,
	-2, 513,
	-1, 969,
	5, 31,
	-2, 416,
	-1, 994,
	5, 30,
	-2, 552,
	-1, 1228,
	5, 31,
	-2, 553,
	-1, 1275,
	5, 30,
	-2, 555,
	-1, 1338,
	5, 31,
	-2, 556,
}

const yyPrivate = 57344

const yyLast = 10296

var yyAct = [...]int{

	268, 1329, 684, 266, 908, 560, 1286, 559, 3, 861,
	1160, 270, 825, 1132, 1133, 843, 1057, 1234, 247, 607,
	888, 865, 298, 1129, 24, 717, 59, 1105, 902, 864,
	1014, 826, 605, 785, 80, 998, 343, 789, 212, 1048,
	961, 212, 792, 622, 497, 874, 491, 1060, 1003, 813,
	632, 762, 212, 898, 440, 621, 337, 489, 821, 324,
	271, 246, 609, 503, 179, 511, 332, 334, 212, 212,
	342, 594, 58, 256, 212, 1223, 445, 1358, 574, 1348,
	1356, 1336, 943, 1354, 325, 909, 251, 1347, 1335, 1124,
	925, 1220, 444, 1295, 63, 208, 204, 205, 206, 1154,
	323, 882, 1155, 1156, 924, 465, 857, 858, 260, 253,
	856, 54, 29, 30, 623, 479, 624, 26, 27, 54,
	29, 30, 65, 66, 67, 68, 69, 1022, 238, 712,
	1021, 929, 481, 1023, 1039, 881, 45, 1246, 453, 262,
	923, 31, 1311, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 889, 714, 534, 1261, 722,
	40, 1208, 723, 715, 56, 1166, 1167, 1168, 1206, 243,
	237, 1355, 1171, 822, 1169, 239, 240, 241, 242, 476,
	477, 1353, 1330, 1081, 823, 1287, 1293, 683, 454, 447,
	202, 467, 470, 469, 450, 201, 1068, 202, 1289, 844,
	846, 692, 212, 1078, 212, 1013, 1012, 207, 1011, 1080,
	212, 920, 917, 918, 876, 916, 212, 442, 466, 468,
	342, 342, 342, 342, 1066, 342, 876, 215, 876, 203,
	547, 548, 550, 342, 1316, 56, 796, 1231, 1092, 977,
	927, 930, 441, 955, 212, 733, 33, 34, 36, 35,
	38, 514, 460, 524, 1033, 791, 534, 1175, 935, 862,
	500, 534, 730, 513, 1085, 1321, 510, 39, 46, 47,
	1185, 1001, 48, 49, 37, 625, 1126, 499, 922, 551,
	552, 553, 554, 555, 556, 558, 41, 42, 1288, 43,
	44, 50, 51, 52, 687, 814, 845, 508, 509, 508,
	921, 814, 464, 984, 1312, 889, 1294, 1292, 1037, 823,
	1334, 1067, 505, 510, 765, 510, 1072, 1069, 1062, 1063,
	1070, 1065, 1064, 212, 1079, 1324, 1077, 1176, 446, 875,
	212, 212, 212, 1071, 873, 871, 342, 926, 872, 1074,
	1340, 875, 627, 875, 878, 456, 457, 458, 501, 1262,
	928, 769, 736, 737, 1106, 1252, 200, 936, 1170, 1251,
	1084, 973, 974, 972, 55, 767, 768, 766, 879, 952,
	953, 954, 55, 522, 532, 533, 525, 526, 527, 528,
	529, 530, 531, 524, 1052, 1051, 534, 1108, 494, 498,
	576, 577, 578, 579, 580, 581, 582, 1040, 613, 509,
	508, 732, 472, 619, 1341, 515, 448, 449, 1322, 1269,
	751, 753, 754, 473, 474, 475, 510, 478, 509, 508,
	1249, 1193, 1110, 322, 1114, 483, 1109, 1049, 1107, 1116,
	509, 508, 1319, 1112, 752, 510, 1163, 731, 786, 561,
	1024, 787, 1111, 1025, 342, 1344, 490, 510, 572, 1162,
	212, 212, 342, 1034, 212, 1113, 1115, 212, 1279, 1327,
	490, 212, 911, 342, 342, 342, 342, 342, 342, 342,
	342, 788, 340, 509, 508, 509, 508, 342, 342, 1279,
	490, 1299, 1128, 212, 1279, 1280, 1243, 1242, 1298, 212,
	510, 698, 510, 697, 299, 53, 688, 701, 596, 599,
	600, 601, 597, 742, 598, 602, 686, 212, 1004, 1005,
	718, 718, 724, 513, 681, 760, 1151, 490, 738, 462,
	761, 1230, 490, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 726, 26,
	763, 1182, 1181, 699, 1178, 1179, 1178, 1177, 53, 967,
	490, 759, 937, 490, 591, 490, 252, 616, 739, 799,
	490, 1172, 329, 992, 631, 630, 993, 455, 807, 807,
	801, 441, 245, 1130, 807, 740, 999, 999, 755, 806,
	809, 60, 850, 26, 615, 815, 56, 56, 590, 212,
	799, 807, 212, 212, 212, 212, 212, 757, 617, 1000,
	615, 1000, 827, 1095, 212, 1226, 26, 212, 793, 795,
	1274, 212, 591, 591, 801, 212, 212, 798, 800, 342,
	967, 979, 818, 797, 527, 528, 529, 530, 531, 524,
	56, 342, 534, 816, 811, 1184, 682, 1180, 976, 1026,
	855, 591, 967, 999, 691, 939, 967, 851, 748, 749,
	618, 828, 734, 56, 831, 702, 703, 704, 705, 706,
	707, 708, 709, 842, 978, 1256, 890, 891, 892, 710,
	711, 849, 883, 848, 840, 853, 854, 829, 830, 485,
	832, 975, 903, 253, 212, 1145, 868, 342, 1029, 342,
	486, 1004, 1005, 212, 899, 894, 212, 342, 893, 71,
	685, 906, 561, 488, 1165, 804, 805, 1130, 1053, 904,
	1007, 695, 1068, 482, 471, 471, 471, 471, 746, 471,
	1010, 56, 596, 599, 600, 601, 597, 471, 598, 602,
	56, 900, 901, 1009, 760, 834, 837, 833, 340, 487,
	1066, 838, 884, 885, 886, 887, 835, 53, 1352, 1346,
	839, 836, 600, 601, 257, 258, 1091, 940, 895, 896,
	897, 504, 543, 544, 546, 860, 1351, 996, 950, 949,
	759, 958, 959, 960, 492, 502, 1044, 629, 463, 944,
	1036, 1326, 1325, 938, 1272, 945, 493, 1030, 1224, 763,
	1257, 913, 694, 1089, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 604, 573, 575, 575, 575, 575, 575,
	575, 575, 575, 583, 584, 585, 586, 504, 957, 802,
	803, 254, 255, 948, 606, 810, 248, 1067, 60, 994,
	1304, 947, 1072, 1069, 1062, 1063, 1070, 1065, 1064, 817,
	249, 819, 820, 1303, 1259, 1000, 964, 965, 1015, 1071,
	506, 212, 1313, 1247, 729, 1061, 62, 274, 64, 969,
	970, 971, 983, 720, 7, 342, 721, 6, 980, 719,
	5, 941, 942, 986, 498, 987, 988, 989, 990, 912,
	1008, 914, 614, 1017, 57, 1016, 1027, 1018, 1, 933,
	727, 1222, 549, 910, 1056, 919, 1328, 1285, 1043, 1019,
	1045, 1046, 1047, 1159, 870, 1041, 1042, 1054, 342, 863,
	342, 439, 70, 1320, 869, 1291, 1245, 758, 1031, 1032,
	877, 1038, 880, 1164, 1323, 328, 1035, 637, 636, 634,
	635, 633, 639, 342, 1050, 638, 212, 212, 471, 968,
	212, 725, 223, 335, 603, 626, 471, 212, 905, 507,
	82, 72, 1076, 1075, 985, 915, 342, 471, 471, 471,
	471, 471, 471, 471, 471, 1073, 1101, 1102, 1083, 713,
	934, 471, 471, 480, 226, 542, 946, 1020, 760, 1119,
	1120, 341, 1122, 1123, 1137, 735, 496, 1302, 1088, 1258,
	982, 571, 812, 807, 1098, 273, 1138, 750, 1015, 1099,
	807, 951, 1118, 1136, 827, 1131, 285, 1117, 1125, 282,
	1104, 827, 284, 283, 759, 741, 1134, 991, 516, 272,
	264, 340, 327, 587, 1103, 1140, 595, 342, 1139, 342,
	1161, 1141, 593, 866, 592, 1006, 1002, 326, 1094, 1219,
	1310, 53, 745, 1152, 1059, 28, 966, 61, 259, 23,
	1158, 1173, 1174, 1153, 212, 22, 1157, 562, 21, 19,
	18, 17, 1187, 20, 16, 15, 14, 981, 32, 495,
	13, 12, 1150, 11, 10, 1189, 212, 9, 8, 4,
	250, 25, 1192, 2, 0, 0, 329, 329, 329, 329,
	329, 0, 0, 342, 0, 0, 212, 0, 0, 0,
	1055, 606, 0, 847, 1199, 0, 0, 211, 0, 329,
	236, 0, 0, 0, 718, 1195, 0, 0, 0, 0,
	0, 244, 0, 0, 1127, 1082, 0, 545, 1197, 0,
	1196, 0, 0, 0, 0, 263, 758, 211, 211, 1204,
	1142, 1143, 0, 211, 1144, 0, 1235, 1146, 1235, 1235,
	1235, 212, 1240, 0, 0, 1225, 1198, 0, 342, 1233,
	0, 0, 0, 1200, 0, 1236, 1237, 1238, 0, 0,
	1239, 1241, 0, 0, 0, 1210, 1211, 1212, 0, 1027,
	1215, 471, 0, 471, 342, 342, 342, 328, 0, 1186,
	0, 471, 0, 1227, 1228, 1229, 0, 1232, 1248, 0,
	1250, 1254, 1188, 0, 0, 1191, 0, 1255, 1201, 1202,
	0, 1203, 0, 0, 1205, 0, 1207, 1263, 1264, 0,
	1265, 1266, 1267, 1260, 0, 1194, 0, 0, 0, 1271,
	0, 1277, 1278, 0, 0, 0, 0, 1275, 0, 0,
	0, 1273, 0, 0, 1161, 0, 0, 0, 0, 1134,
	0, 0, 0, 956, 1290, 1284, 0, 1235, 1296, 0,
	1297, 0, 0, 1244, 0, 0, 330, 866, 1221, 0,
	0, 211, 0, 211, 1300, 561, 0, 1268, 0, 211,
	1317, 0, 0, 0, 1315, 211, 0, 0, 1314, 0,
	0, 0, 1318, 0, 1281, 1282, 1283, 1134, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	1332, 0, 1058, 484, 807, 0, 995, 1339, 997, 0,
	1305, 1306, 1307, 1308, 1309, 827, 1337, 0, 0, 0,
	1342, 1345, 0, 0, 0, 333, 0, 0, 0, 0,
	443, 0, 0, 0, 0, 329, 1350, 1349, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 1097, 0,
	534, 1359, 0, 561, 221, 0, 0, 0, 1333, 0,
	0, 0, 0, 1338, 0, 764, 1253, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 1343, 0, 232, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 211,
	611, 211, 471, 0, 0, 523, 522, 532, 533, 525,
	526, 527, 528, 529, 530, 531, 524, 1361, 1362, 534,
	0, 0, 0, 0, 0, 0, 0, 471, 0, 866,
	0, 866, 525, 526, 527, 528, 529, 530, 531, 524,
	0, 0, 534, 1331, 561, 0, 0, 0, 0, 328,
	328, 328, 328, 328, 962, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 328, 0, 0, 218, 451, 0,
	452, 0, 328, 0, 224, 220, 459, 0, 0, 1216,
	490, 0, 461, 0, 0, 0, 0, 0, 1135, 0,
	53, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 222, 0, 0, 227, 0, 1147, 1148, 1149, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	211, 0, 0, 211, 0, 0, 211, 0, 0, 0,
	700, 0, 0, 0, 0, 217, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 0, 0,
	534, 0, 211, 0, 0, 0, 0, 0, 728, 0,
	866, 0, 219, 0, 228, 229, 230, 231, 235, 0,
	0, 0, 0, 234, 233, 0, 211, 0, 0, 1100,
	0, 0, 0, 0, 700, 0, 0, 1058, 866, 589,
	329, 0, 0, 0, 0, 0, 0, 0, 612, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 1209, 0, 534, 263, 0, 0, 0, 0, 1218,
	0, 0, 0, 0, 764, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 263, 0, 0, 808, 808, 263,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 263, 263, 263, 0, 211, 0,
	808, 211, 211, 211, 211, 211, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 211, 0, 471, 0,
	611, 0, 0, 0, 211, 211, 180, 181, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 0, 0, 0, 328, 0,
	0, 0, 0, 0, 0, 0, 689, 690, 0, 0,
	693, 1135, 0, 696, 1276, 0, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 0, 0,
	534, 0, 0, 0, 0, 654, 0, 0, 0, 716,
	0, 0, 1301, 211, 0, 0, 0, 0, 0, 1213,
	490, 0, 211, 0, 0, 211, 518, 0, 521, 1135,
	0, 53, 0, 747, 535, 536, 537, 538, 539, 540,
	541, 0, 519, 520, 517, 523, 522, 532, 533, 525,
	526, 527, 528, 529, 530, 531, 524, 0, 0, 534,
	0, 0, 0, 700, 0, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 263, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 0, 0,
	534, 0, 0, 294, 287, 794, 289, 290, 291, 292,
	0, 642, 288, 295, 293, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	263, 523, 522, 532, 533, 525, 526, 527, 528, 529,
	530, 531, 524, 1217, 655, 534, 0, 0, 0, 0,
	0, 263, 852, 0, 0, 0, 0, 0, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 670,
	671, 672, 673, 674, 675, 0, 676, 677, 678, 679,
	680, 656, 657, 658, 659, 640, 641, 668, 0, 643,
	211, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 660, 661, 662, 663, 664, 665, 666, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 328, 0, 0, 0, 0, 0, 931,
	0, 0, 932, 0, 0, 523, 522, 532, 533, 525,
	526, 527, 528, 529, 530, 531, 524, 0, 0, 534,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 0, 523,
	522, 532, 533, 525, 526, 527, 528, 529, 530, 531,
	524, 0, 808, 534, 0, 0, 0, 0, 0, 808,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 428, 418, 0, 390, 430,
	368, 382, 438, 383, 384, 411, 354, 398, 132, 380,
	0, 371, 349, 377, 350, 369, 392, 100, 395, 367,
	420, 401, 114, 436, 116, 406, 0, 149, 125, 0,
	1183, 394, 422, 396, 416, 389, 412, 359, 405, 431,
	381, 409, 432, 0, 0, 0, 81, 0, 0, 83,
	867, 0, 1190, 0, 0, 93, 0, 0, 408, 427,
	379, 180, 181, 182, 183, 184, 185, 186, 187, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	410, 348, 407, 0, 352, 355, 437, 425, 374, 375,
	1028, 0, 0, 808, 0, 0, 0, 393, 397, 413,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 391, 0,
	0, 0, 0, 0, 0, 358, 0, 373, 414, 0,
	347, 417, 423, 388, 213, 426, 386, 385, 429, 138,
	0, 0, 152, 105, 104, 113, 421, 370, 378, 96,
	376, 144, 134, 164, 403, 135, 143, 117, 156, 139,
	163, 214, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 188,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 351, 0, 150, 166, 178,
	366, 424, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 362, 365, 360, 361, 399, 400, 433, 434,
	435, 415, 357, 0, 363, 364, 0, 419, 402, 84,
	0, 115, 176, 140, 102, 167, 428, 418, 0, 390,
	430, 368, 382, 438, 383, 384, 411, 354, 398, 132,
	380, 0, 371, 349, 377, 350, 369, 392, 100, 395,
	367, 420, 401, 114, 436, 116, 406, 0, 149, 125,
	0, 0, 394, 422, 396, 416, 389, 412, 359, 405,
	431, 381, 409, 432, 0, 0, 0, 81, 0, 0,
	83, 867, 0, 0, 0, 0, 93, 0, 0, 408,
	427, 379, 180, 181, 182, 183, 184, 185, 186, 187,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 410, 348, 407, 0, 352, 355, 437, 425, 374,
	375, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	413, 387, 0, 0, 0, 0, 0, 0, 0, 0,
	372, 0, 404, 0, 0, 0, 356, 353, 0, 391,
	0, 0, 0, 0, 0, 0, 358, 0, 373, 414,
	0, 347, 417, 423, 388, 213, 426, 386, 385, 429,
	138, 0, 0, 152, 105, 104, 113, 421, 370, 378,
	96, 376, 144, 134, 164, 403, 135, 143, 117, 156,
	139, 163, 214, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	188, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 351, 0, 150, 166,
	178, 366, 424, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 362, 365, 360, 361, 399, 400, 433,
	434, 435, 415, 357, 0, 363, 364, 0, 419, 402,
	84, 0, 115, 176, 140, 102, 167, 428, 418, 0,
	390, 430, 368, 382, 438, 383, 384, 411, 354, 398,
	132, 380, 0, 371, 349, 377, 350, 369, 392, 100,
	395, 367, 420, 401, 114, 436, 116, 406, 0, 149,
	125, 0, 0, 394, 422, 396, 416, 389, 412, 359,
	405, 431, 381, 409, 432, 56, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 93, 0, 0,
	408, 427, 379, 180, 181, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 410, 348, 407, 0, 352, 355, 437, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 413, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	391, 0, 0, 0, 0, 0, 0, 358, 0, 373,
	414, 0, 347, 417, 423, 388, 213, 426, 386, 385,
	429, 138, 0, 0, 152, 105, 104, 113, 421, 370,
	378, 96, 376, 144, 134, 164, 403, 135, 143, 117,
	156, 139, 163, 214, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 188, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 351, 0, 150,
	166, 178, 366, 424, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 362, 365, 360, 361, 399, 400,
	433, 434, 435, 415, 357, 0, 363, 364, 0, 419,
	402, 84, 0, 115, 176, 140, 102, 167, 428, 418,
	0, 390, 430, 368, 382, 438, 383, 384, 411, 354,
	398, 132, 380, 0, 371, 349, 377, 350, 369, 392,
	100, 395, 367, 420, 401, 114, 436, 116, 406, 0,
	149, 125, 0, 0, 394, 422, 396, 416, 389, 412,
	359, 405, 431, 381, 409, 432, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 93, 0,
	0, 408, 427, 379, 180, 181, 182, 183, 184, 185,
	186, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 410, 348, 407, 0, 352, 355, 437,
	425, 374, 375, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 413, 387, 0, 0, 0, 0, 0, 0,
	1096, 0, 372, 0, 404, 0, 0, 0, 356, 353,
	0, 391, 0, 0, 0, 0, 0, 0, 358, 0,
	373, 414, 0, 347, 417, 423, 388, 213, 426, 386,
	385, 429, 138, 0, 0, 152, 105, 104, 113, 421,
	370, 378, 96, 376, 144, 134, 164, 403, 135, 143,
	117, 156, 139, 163, 214, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 188, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 351, 0,
	150, 166, 178, 366, 424, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 362, 365, 360, 361, 399,
	400, 433, 434, 435, 415, 357, 0, 363, 364, 0,
	419, 402, 84, 0, 115, 176, 140, 102, 167, 428,
	418, 0, 390, 430, 368, 382, 438, 383, 384, 411,
	354, 398, 132, 380, 0, 371, 349, 377, 350, 369,
	392, 100, 395, 367, 420, 401, 114, 436, 116, 406,
	0, 149, 125, 0, 0, 394, 422, 396, 416, 389,
	412, 359, 405, 431, 381, 409, 432, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 93,
	0, 0, 408, 427, 379, 180, 181, 182, 183, 184,
	185, 186, 187, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 410, 348, 407, 0, 352, 355,
	437, 425, 374, 375, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 413, 387, 0, 0, 0, 0, 0,
	0, 756, 0, 372, 0, 404, 0, 0, 0, 356,
	353, 0, 391, 0, 0, 0, 0, 0, 0, 358,
	0, 373, 414, 0, 347, 417, 423, 388, 213, 426,
	386, 385, 429, 138, 0, 0, 152, 105, 104, 113,
	421, 370, 378, 96, 376, 144, 134, 164, 403, 135,
	143, 117, 156, 139, 163, 214, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 188, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 351,
	0, 150, 166, 178, 366, 424, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 362, 365, 360, 361,
	399, 400, 433, 434, 435, 415, 357, 0, 363, 364,
	0, 419, 402, 84, 0, 115, 176, 140, 102, 167,
	428, 418, 0, 390, 430, 368, 382, 438, 383, 384,
	411, 354, 398, 132, 380, 0, 371, 349, 377, 350,
	369, 392, 100, 395, 367, 420, 401, 114, 436, 116,
	406, 0, 149, 125, 0, 0, 394, 422, 396, 416,
	389, 412, 359, 405, 431, 381, 409, 432, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	93, 0, 0, 408, 427, 379, 180, 181, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 410, 348, 407, 0, 352,
	355, 437, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 413, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 391, 0, 0, 0, 0, 0, 0,
	358, 0, 373, 414, 0, 347, 417, 423, 388, 213,
	426, 386, 385, 429, 138, 0, 0, 152, 105, 104,
	113, 421, 370, 378, 96, 376, 144, 134, 164, 403,
	135, 143, 117, 156, 139, 163, 214, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 188, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	351, 0, 150, 166, 178, 366, 424, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 362, 365, 360,
	361, 399, 400, 433, 434, 435, 415, 357, 0, 363,
	364, 0, 419, 402, 84, 0, 115, 176, 140, 102,
	167, 428, 418, 0, 390, 430, 368, 382, 438, 383,
	384, 411, 354, 398, 132, 380, 0, 371, 349, 377,
	350, 369, 392, 100, 395, 367, 420, 401, 114, 436,
	116, 406, 0, 149, 125, 0, 0, 394, 422, 396,
	416, 389, 412, 359, 405, 431, 381, 409, 432, 0,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 93, 0, 0, 408, 427, 379, 180, 181, 182,
	183, 184, 185, 186, 187, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 410, 348, 407, 0,
	352, 355, 437, 425, 374, 375, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 413, 387, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 404, 0, 0,
	0, 356, 353, 0, 391, 0, 0, 0, 0, 0,
	0, 358, 0, 373, 414, 0, 347, 417, 423, 388,
	213, 426, 386, 385, 429, 138, 0, 0, 152, 105,
	104, 113, 421, 370, 378, 96, 376, 144, 134, 164,
	403, 135, 143, 117, 156, 139, 163, 214, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 188, 90, 169, 89, 345,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 351, 0, 150, 166, 178, 366, 424, 172, 173,
	174, 175, 0, 0, 0, 346, 344, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 362, 365,
	360, 361, 399, 400, 433, 434, 435, 415, 357, 0,
	363, 364, 0, 419, 402, 84, 0, 115, 176, 140,
	102, 167, 428, 418, 0, 390, 430, 368, 382, 438,
	383, 384, 411, 354, 398, 132, 380, 0, 371, 349,
	377, 350, 369, 392, 100, 395, 367, 420, 401, 114,
	436, 116, 406, 0, 149, 125, 0, 0, 394, 422,
	396, 416, 389, 412, 359, 405, 431, 381, 409, 432,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 93, 0, 0, 408, 427, 379, 180, 181,
	182, 183, 184, 185, 186, 187, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 410, 348, 407,
	0, 352, 355, 437, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 413, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 391, 0, 0, 0, 0,
	0, 0, 358, 0, 373, 414, 0, 347, 417, 423,
	388, 213, 426, 386, 385, 429, 138, 0, 0, 152,
	105, 104, 113, 421, 370, 378, 96, 376, 144, 134,
	164, 403, 135, 143, 117, 156, 139, 163, 214, 171,
	154, 170, 85, 153, 620, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 188, 90, 169, 89,
	345, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 351, 0, 150, 166, 178, 366, 424, 172,
	173, 174, 175, 0, 0, 0, 346, 344, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 362,
	365, 360, 361, 399, 400, 433, 434, 435, 415, 357,
	0, 363, 364, 0, 419, 402, 84, 0, 115, 176,
	140, 102, 167, 428, 418, 0, 390, 430, 368, 382,
	438, 383, 384, 411, 354, 398, 132, 380, 0, 371,
	349, 377, 350, 369, 392, 100, 395, 367, 420, 401,
	114, 436, 116, 406, 0, 149, 125, 0, 0, 394,
	422, 396, 416, 389, 412, 359, 405, 431, 381, 409,
	432, 0, 0, 0, 81, 0, 0, 83, 0, 0,
	0, 0, 0, 93, 0, 0, 408, 427, 379, 180,
	181, 182, 183, 184, 185, 186, 187, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 410, 348,
	407, 0, 352, 355, 437, 425, 374, 375, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 413, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 372, 0, 404,
	0, 0, 0, 356, 353, 0, 391, 0, 0, 0,
	0, 0, 0, 358, 0, 373, 414, 0, 347, 417,
	423, 388, 213, 426, 386, 385, 429, 138, 0, 0,
	152, 105, 104, 113, 421, 370, 378, 96, 376, 144,
	134, 164, 403, 135, 143, 117, 156, 139, 163, 214,
	171, 154, 170, 85, 153, 336, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 188, 90, 169,
	89, 345, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 351, 0, 150, 166, 178, 366, 424,
	172, 173, 174, 175, 0, 0, 0, 346, 344, 339,
	338, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	362, 365, 360, 361, 399, 400, 433, 434, 435, 415,
	357, 0, 363, 364, 0, 419, 402, 84, 0, 115,
	176, 140, 102, 167, 132, 0, 0, 790, 0, 269,
	0, 0, 0, 100, 0, 267, 0, 0, 114, 309,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 81, 294, 287, 286, 289, 290, 291, 292,
	0, 93, 288, 295, 293, 296, 297, 180, 181, 182,
	183, 184, 185, 186, 187, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 0, 0, 265, 280,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 261, 0, 0, 0, 320, 0, 279,
	0, 0, 275, 276, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 318, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 214, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 188, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 310, 319,
	316, 317, 314, 315, 313, 312, 311, 321, 302, 303,
	304, 305, 307, 0, 306, 84, 0, 115, 176, 140,
	102, 167, 132, 0, 0, 0, 0, 269, 0, 0,
	0, 100, 0, 267, 0, 0, 114, 309, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	81, 294, 287, 286, 289, 290, 291, 292, 0, 93,
	288, 295, 293, 296, 297, 180, 181, 182, 183, 184,
	185, 186, 187, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 0, 0, 265, 280, 0, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 1270, 0, 0, 0, 320, 0, 279, 0, 0,
	275, 276, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 318, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 214, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 188, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 310, 319, 316, 317,
	314, 315, 313, 312, 311, 321, 302, 303, 304, 305,
	307, 0, 306, 84, 0, 115, 176, 140, 102, 167,
	132, 0, 0, 0, 0, 269, 0, 0, 0, 100,
	0, 267, 0, 0, 114, 309, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 490, 81, 294,
	287, 286, 289, 290, 291, 292, 0, 93, 288, 295,
	293, 296, 297, 180, 181, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 0, 0, 265, 280, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 0,
	0, 0, 0, 320, 0, 279, 0, 0, 275, 276,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 318,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 214, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 188, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 310, 319, 316, 317, 314, 315,
	313, 312, 311, 321, 302, 303, 304, 305, 307, 0,
	306, 84, 0, 115, 176, 140, 102, 167, 132, 0,
	0, 0, 0, 269, 0, 0, 0, 100, 0, 267,
	0, 0, 114, 309, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 81, 294, 287, 286,
	289, 290, 291, 292, 0, 93, 288, 295, 293, 296,
	297, 180, 181, 182, 183, 184, 185, 186, 187, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	0, 0, 265, 280, 0, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 261, 0, 0,
	0, 320, 0, 279, 0, 0, 275, 276, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 318, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 214, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 188,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 310, 319, 316, 317, 314, 315, 313, 312,
	311, 321, 302, 303, 304, 305, 307, 0, 306, 84,
	0, 115, 176, 140, 102, 167, 132, 0, 0, 0,
	0, 269, 0, 0, 0, 100, 0, 267, 0, 0,
	114, 309, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 300, 301, 0, 0, 0, 0, 0, 0, 859,
	0, 56, 0, 0, 81, 294, 287, 286, 289, 290,
	291, 292, 0, 93, 288, 295, 293, 296, 297, 180,
	181, 182, 183, 184, 185, 186, 187, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 0, 0,
	265, 280, 0, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 320,
	0, 279, 0, 0, 275, 276, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 318, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 214,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 188, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 178, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	310, 319, 316, 317, 314, 315, 313, 312, 311, 321,
	302, 303, 304, 305, 307, 26, 306, 84, 0, 115,
	176, 140, 102, 167, 0, 0, 0, 132, 0, 0,
	0, 0, 269, 0, 0, 0, 100, 0, 267, 0,
	0, 114, 309, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 81, 294, 287, 286, 289,
	290, 291, 292, 0, 93, 288, 295, 293, 296, 297,
	180, 181, 182, 183, 184, 185, 186, 187, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 0,
	0, 265, 280, 0, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 0, 0, 0, 0,
	320, 0, 279, 0, 0, 275, 276, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 318, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	214, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 188, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 310, 319, 316, 317, 314, 315, 313, 312, 311,
	321, 302, 303, 304, 305, 307, 0, 306, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 0,
	269, 0, 0, 0, 100, 0, 267, 0, 0, 114,
	309, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 81, 294, 287, 286, 289, 290, 291,
	292, 0, 93, 288, 295, 293, 296, 297, 180, 181,
	182, 183, 184, 185, 186, 187, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 0, 0, 265,
	280, 0, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 0, 0, 0, 0, 320, 0,
	279, 0, 0, 275, 276, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 318, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 214, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 188, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 310,
	319, 316, 317, 314, 315, 313, 312, 311, 321, 302,
	303, 304, 305, 307, 132, 306, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 0, 0, 0, 114, 309,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 81, 294, 287, 286, 289, 290, 291, 292,
	0, 93, 288, 295, 293, 296, 297, 180, 181, 182,
	183, 184, 185, 186, 187, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 0, 0, 0, 280,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 0, 0, 0, 0, 320, 0, 279,
	0, 0, 275, 276, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 318, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	1360, 135, 143, 117, 156, 139, 163, 214, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 188, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 310, 319,
	316, 317, 314, 315, 313, 312, 311, 321, 302, 303,
	304, 305, 307, 132, 306, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 309, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 294, 287, 286, 289, 290, 291, 292, 0,
	93, 288, 295, 293, 296, 297, 180, 181, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 0, 0, 0, 280, 0,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 0, 0, 0, 0, 320, 0, 279, 0,
	0, 275, 276, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 318, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 214, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 188, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 310, 319, 316,
	317, 314, 315, 313, 312, 311, 321, 302, 303, 304,
	305, 307, 132, 306, 84, 0, 115, 176, 140, 102,
	167, 100, 0, 0, 0, 0, 114, 309, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	81, 294, 287, 557, 289, 290, 291, 292, 0, 93,
	288, 295, 293, 296, 297, 180, 181, 182, 183, 184,
	185, 186, 187, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 0, 0, 0, 280, 0, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 320, 0, 279, 0, 0,
	275, 276, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 318, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 214, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 188, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 178, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 310, 319, 316, 317,
	314, 315, 313, 312, 311, 321, 302, 303, 304, 305,
	307, 132, 306, 84, 0, 115, 176, 140, 102, 167,
	100, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 180, 181, 182, 183, 184, 185,
	186, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 73, 0, 0,
	0, 79, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 75, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 188, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 512, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 114, 0, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	83, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 180, 181, 182, 183, 184, 185, 186, 187,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 0, 0, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 214, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	188, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 81, 0, 0, 83,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 180, 181, 182, 183, 184, 185, 186, 187, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 214, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 188,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 743,
	0, 0, 744, 0, 93, 0, 0, 0, 0, 0,
	180, 181, 182, 183, 184, 185, 186, 187, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	214, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 188, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 178, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 610,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 180, 181,
	182, 183, 184, 185, 186, 187, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 214, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 188, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 178, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 0, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 180, 181, 182,
	183, 184, 185, 186, 187, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 214, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 188, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 178, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 628, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 180, 181, 182, 183,
	184, 185, 186, 187, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 214, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 188, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 178, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 115, 176, 140, 102,
	167, 132, 0, 0, 0, 610, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 180, 181, 182, 183, 184, 185,
	186, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 608, 143,
	117, 156, 139, 163, 214, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 188, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 84, 0, 115, 176, 140, 102, 167, 588,
	100, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 180, 181, 182, 183, 184, 185,
	186, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 214, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 188, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 178, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	132, 0, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 180, 181, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 214, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 188, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 178, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 84, 0, 115, 176, 140, 102, 167, 100, 0,
	0, 0, 0, 114, 0, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	83, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 180, 181, 182, 183, 184, 185, 186, 187,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 213, 0, 0, 0, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 214, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	188, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	178, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 83,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 180, 181, 182, 183, 184, 185, 186, 187, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 214, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 188,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 178,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 115, 176, 140, 102, 167,
}
var yyPact = [...]int{

	111, -1000, -205, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 813, 851, -1000, -1000, -1000, -1000,
	-1000, -1000, 646, 7253, 51, 87, -46, 9771, 85, 1332,
	10020, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-12, 10020, 516, 600, -1000, -1000, -1000, -1000, -1000, 809,
	824, 677, 801, 715, -1000, 5480, 44, 8516, 9522, 4448,
	-1000, 515, 74, 10020, -169, 10020, 42, 42, 42, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	52, 10020, -1000, 10020, 41, 511, 41, 41, 41, 10020,
	-1000, 123, -1000, -1000, -1000, 10020, 463, 748, 49, 2822,
	2822, 2822, 2822, 6, 2822, -128, -105, 662, -1000, -1000,
	-1000, -1000, 2822, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10020, 668, 651, 405, 755, 6257, 6257,
	813, -1000, 600, -1000, -1000, -1000, 740, -1000, -1000, 248,
	839, -1000, 7511, 122, -1000, 6257, 1674, 534, 534, 534,
	97, 100, -1000, -1000, -1000, 6755, 6755, 6755, 6755, 6755,
	6755, 7004, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5999,
	534, 534, 534, 534, 534, 534, 534, 534, 6257, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 9273, 558, 681, -1000, -1000, -1000, 781, 7760,
	9023, 10020, 546, -1000, 596, 4177, -129, -1000, -1000, -1000,
	175, 8765, -1000, -1000, -1000, 747, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 510,
	-1000, 1715, 458, 2822, 43, 648, 450, 202, 440, 10020,
	10020, 2822, 56, 10020, 769, 660, 10020, 437, 435, -1000,
	3635, -1000, 2822, 2822, 2822, 2822, 2822, 2822, 2822, 2822,
	-1000, -1000, -1000, -1000, -1000, -1000, 2822, 2822, -1000, -115,
	-75, -1000, 10020, -1000, -1000, 103, 103, 1715, 10020, -1000,
	-1000, -1000, 845, 152, 383, 116, 598, -1000, 328, 809,
	405, 715, 8009, 676, -1000, -1000, 10020, -1000, 6257, 6257,
	342, -1000, 10020, -1000, 3364, 159, 6755, 182, 257, 6755,
	6755, 6755, 6755, 6755, 6755, 6755, 6755, 6755, 6755, 6755,
	6755, 6755, 6755, 6755, 382, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 415, 4706, -1000, 600, 1776, 1776, 104,
	-1000, 136, 136, 136, 136, 136, 136, -1000, 1615, 405,
	505, 208, 5999, 5480, 5480, 6257, 6257, 10020, 10020, 5480,
	796, 199, 208, 10020, -1000, 405, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5480, 5480, 5480, 5480, 144, 10020, -1000,
	10020, 8516, 8516, 8516, 8516, 8516, -1000, 696, 694, -1000,
	705, 695, 709, 10020, -1000, 500, 7760, 150, 534, -1000,
	10020, -1000, 19, 530, 8516, 10020, -1000, -1000, 3906, 596,
	-129, 586, -1000, -134, -140, 5738, 134, -1000, -1000, -1000,
	2551, 186, 276, -93, -1000, -1000, -1000, -1000, 619, -1000,
	619, 619, 619, 619, -48, -48, -48, -48, -1000, -1000,
	-1000, -1000, -1000, 645, 642, -1000, 619, 619, 619, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 641, 641, 641, 629,
	629, 649, -1000, 10020, -187, 406, 2822, 768, 2822, -1000,
	75, -1000, 10020, -1000, -1000, 10020, 2822, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 247, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 498, -1000, 591, -1000, -1000,
	720, 6257, 6257, 3635, 6257, -1000, -1000, -1000, 755, -1000,
	796, 812, -1000, 736, 735, 5480, -1000, -1000, 159, 206,
	-1000, -1000, 301, -1000, -1000, -1000, -1000, 114, 534, -1000,
	-1000, 1959, -1000, -1000, -1000, -1000, 182, 6755, 6755, 6755,
	1294, 1959, 1938, 1235, 261, 136, 507, 507, 131, 131,
	131, 131, 131, 1317, 1317, -1000, -1000, -1000, 405, 405,
	5480, 588, -1000, 100, -1000, 100, -1000, -1000, -1000, 6257,
	-1000, 405, 495, 495, 309, 340, 627, -1000, 110, 610,
	495, 5480, 205, -1000, 6257, 405, -1000, 495, 405, 495,
	495, 533, 734, 534, -1000, 589, -1000, 171, 681, 640,
	659, 457, -1000, -1000, -1000, -1000, 692, -1000, 679, -1000,
	-1000, -1000, -1000, -1000, 65, 63, 62, 10020, -1000, 833,
	8516, 587, -1000, -1000, 586, -129, -118, -1000, -1000, -1000,
	208, -1000, 384, 585, 2280, -1000, -1000, -1000, -1000, -1000,
	635, 759, 200, 198, 397, -1000, -1000, 751, -1000, 240,
	-95, -1000, -1000, 337, -48, -48, -1000, -1000, 134, 746,
	134, 134, 134, 368, 368, -1000, -1000, -1000, -1000, 325,
	-1000, -1000, -1000, 324, -1000, 657, 10020, 2822, -1000, 3635,
	-1000, -1000, -1000, -1000, -1000, -1000, 684, 168, 181, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18, -1000, 2822, -1000, 252, 10020, 10020, 1715, 771, 10020,
	718, 208, 208, 109, -1000, -1000, 10020, -1000, -1000, -1000,
	-1000, 592, -1000, -1000, -1000, 3093, 5480, -1000, 1294, 1959,
	1488, -1000, 6755, 6755, -1000, -1000, 495, 5480, 208, -1000,
	-1000, -1000, 228, 382, 228, 6755, 6755, 3635, 6755, 6755,
	-180, 566, 177, -1000, 6257, 385, -1000, -1000, -1000, -1000,
	-1000, 656, 10020, 534, -1000, 7760, -1000, 10020, 813, 10020,
	6257, 6257, -1000, -1000, 6257, 632, -1000, 6257, -1000, -1000,
	-1000, 534, 534, 534, 462, -1000, 813, 587, -1000, -1000,
	-1000, -146, -147, -1000, -1000, -1000, 2551, -1000, 2551, 10020,
	-1000, 393, 380, -1000, -1000, 653, 106, -1000, -1000, -1000,
	506, 134, 134, -1000, 201, -1000, -1000, -1000, 492, -1000,
	490, 583, 487, 10020, -1000, -1000, 581, -1000, 170, -1000,
	-1000, 10020, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10020, 10020, -1000, -1000, -1000, -1000,
	-1000, 10020, -1000, -1000, 362, 6257, -1000, -1000, -1000, 103,
	-1000, -1000, 3635, -1000, 833, 8516, -1000, -1000, 405, -1000,
	6755, 1959, 1959, -1000, -1000, 405, 619, 619, -1000, 619,
	629, -1000, 619, -20, 619, -27, 534, 405, 405, 1705,
	1869, -1000, 1425, 1854, 534, -176, -1000, 208, 6257, -201,
	761, 522, 551, -1000, -1000, 5222, 405, 467, 108, 462,
	809, -1000, 208, 208, 208, 10020, 208, 10020, 10020, 10020,
	8267, 10020, 809, -1000, -1000, -1000, -1000, 2280, -1000, 432,
	-1000, 619, -1000, -1000, -88, 844, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -48, 361, -48,
	299, -1000, 295, 2822, 3635, 2551, -1000, 612, -1000, -1000,
	-1000, -1000, 764, -1000, 208, -1000, 831, 559, -1000, 1959,
	-1000, -1000, 102, -1000, -1000, -1000, -1000, -1000, -1000, 289,
	-1000, -1000, -1000, 6755, 6755, -1000, 6755, 6755, 6755, 405,
	350, 208, -1000, 4964, 756, -1000, 534, -1000, -1000, 577,
	10020, 10020, -1000, -1000, 430, -1000, 425, 425, 425, 150,
	-1000, -1000, 133, 10020, -1000, 158, -1000, -159, 134, -1000,
	134, 433, 426, -1000, -1000, -1000, 10020, 534, 829, 814,
	-1000, -1000, 405, 1750, 1750, 1750, 1750, 32, -1000, -1000,
	-1000, 536, 843, -1000, 534, -1000, 600, 105, -1000, 10020,
	-1000, -1000, -1000, -1000, -1000, 133, -1000, 376, 165, 349,
	-1000, 260, 754, -1000, 753, -1000, -1000, -1000, -1000, -1000,
	404, 17, -1000, 6257, 6257, -1000, -1000, -1000, -1000, -1000,
	405, 40, -192, 10020, 551, 405, 10020, -1000, -1000, -1000,
	280, -1000, -1000, -1000, 345, -1000, -1000, 648, 391, -1000,
	10020, 208, 536, -1000, 711, -184, -195, 523, -1000, -1000,
	-1000, -1000, -187, -1000, 17, 733, -1000, 710, -1000, -1000,
	-1000, 14, -189, 3, -193, 534, -197, 6506, -1000, 1750,
	405, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1083, 7, 24, 1081, 1080, 1079, 869, 866, 863,
	1078, 1077, 1074, 1073, 1071, 1070, 1068, 1066, 1065, 1064,
	1063, 1061, 1060, 1059, 1058, 1055, 1049, 94, 1048, 1047,
	1045, 63, 1042, 73, 1040, 1039, 40, 255, 37, 42,
	139, 1038, 32, 59, 84, 1037, 48, 1036, 1035, 66,
	1034, 71, 1032, 1026, 1266, 1023, 1022, 15, 35, 1020,
	1019, 1018, 1017, 60, 3, 1015, 1013, 1012, 1009, 1006,
	997, 51, 5, 13, 22, 14, 995, 857, 11, 992,
	49, 991, 990, 989, 987, 26, 986, 44, 985, 18,
	46, 984, 17, 58, 30, 23, 12, 67, 55, 981,
	31, 56, 43, 977, 976, 356, 975, 974, 973, 970,
	969, 968, 138, 328, 955, 953, 952, 951, 36, 950,
	0, 402, 65, 949, 948, 945, 1069, 82, 62, 19,
	944, 128, 192, 33, 943, 942, 27, 941, 50, 935,
	932, 931, 930, 929, 928, 927, 101, 926, 924, 923,
	20, 9, 922, 921, 53, 28, 920, 916, 915, 39,
	54, 914, 45, 913, 912, 911, 909, 29, 21, 904,
	10, 903, 6, 897, 896, 1, 895, 16, 894, 4,
	893, 2, 47, 892, 891, 25, 890, 64, 888, 884,
	494, 57, 882, 858, 78,
}
var yyR1 = [...]int{

	0, 188, 189, 189, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 192, 192, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 134, 134, 11, 11, 11, 11, 11, 11,
	11, 181, 181, 180, 179, 179, 178, 178, 177, 16,
	164, 165, 165, 165, 160, 137, 137, 138, 138, 138,
	138, 138, 145, 141, 141, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 142, 142, 142,
	142, 142, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 159, 159, 146, 146, 154,
	154, 155, 155, 155, 152, 152, 153, 153, 156, 156,
	156, 147, 147, 147, 147, 147, 147, 147, 149, 149,
	157, 157, 150, 150, 150, 151, 151, 151, 158, 158,
	158, 158, 158, 148, 148, 161, 161, 173, 173, 172,
	172, 172, 163, 163, 169, 169, 169, 169, 169, 162,
	162, 171, 171, 170, 166, 166, 166, 167, 167, 167,
	168, 168, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 176, 174, 174, 175, 175, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	110, 110, 107, 107, 108, 108, 109, 109, 109, 111,
	111, 111, 135, 135, 135, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 24, 25, 25, 25,
	185, 185, 185, 185, 185, 185, 26, 26, 186, 186,
	193, 27, 28, 28, 29, 29, 29, 33, 33, 33,
	31, 31, 32, 32, 38, 38, 37, 37, 39, 39,
	39, 39, 123, 123, 123, 122, 41, 41, 42, 42,
	43, 43, 44, 44, 44, 56, 56, 92, 92, 94,
	94, 45, 45, 45, 45, 46, 46, 47, 47, 48,
	48, 130, 130, 129, 129, 129, 128, 50, 50, 50,
	52, 51, 51, 51, 51, 53, 53, 55, 55, 54,
	54, 57, 57, 57, 57, 58, 58, 40, 40, 40,
	40, 40, 40, 40, 106, 106, 60, 60, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 70, 70,
	70, 70, 70, 70, 61, 61, 61, 61, 61, 61,
	61, 36, 36, 71, 71, 71, 77, 72, 72, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 68, 68, 68, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 194, 194, 69,
	69, 69, 69, 34, 34, 34, 34, 34, 133, 133,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 81, 81, 35, 35, 79, 79,
	80, 82, 82, 78, 78, 78, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 183, 183, 65,
	65, 65, 83, 83, 84, 84, 85, 85, 86, 86,
	87, 88, 88, 88, 89, 89, 89, 89, 90, 90,
	90, 62, 62, 62, 62, 62, 62, 91, 91, 91,
	91, 95, 95, 73, 73, 75, 75, 74, 76, 184,
	184, 184, 96, 96, 100, 97, 97, 101, 101, 101,
	99, 99, 99, 125, 125, 104, 104, 112, 112, 113,
	113, 105, 105, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 116, 116, 117, 117,
	117, 124, 124, 120, 120, 120, 121, 121, 126, 127,
	127, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 190, 191, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	4, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 4, 4, 7,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 4, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 0,
	2, 2, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -188, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 135, 136, 138, 137, 163, 139, 156,
	49, 175, 176, 178, 179, 25, 157, 158, 161, 162,
	180, 181, 182, -190, 8, 261, 53, -189, 277, -85,
	15, -29, 5, -27, -193, -27, -27, -27, -27, -27,
	-164, 53, -117, 144, 90, 171, 253, 141, 142, 148,
	-120, 56, -119, 59, 269, 175, 189, 183, 210, 202,
	200, 203, 240, 65, 178, 249, 159, 198, 194, 192,
	27, 215, 274, 193, 154, 153, 216, 220, 241, 187,
	188, 243, 214, 155, 32, 271, 34, 167, 244, 218,
	213, 209, 212, 186, 208, 38, 222, 221, 223, 239,
	205, 195, 18, 247, 162, 165, 217, 219, 149, 169,
	273, 245, 191, 166, 161, 248, 179, 242, 251, 37,
	227, 185, 152, 176, 173, 206, 168, 196, 197, 211,
	184, 207, 177, 170, 163, 250, 228, 275, 204, 201,
	174, 172, 232, 233, 234, 235, 272, 246, 229, -187,
	71, 72, 73, 74, 75, 76, 77, 78, 199, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	-105, 144, 146, 142, 142, 143, 144, 253, 141, 142,
	-54, -126, -120, 144, 171, 142, 126, 203, 135, 230,
	143, 32, 169, -135, 142, 177, -107, 172, 232, 233,
	234, 235, 56, 242, 241, 236, -126, 177, -131, -131,
	-131, -131, -131, 181, -126, 56, -2, -89, 17, 16,
	-5, -3, -190, 6, 20, 21, -33, 39, 40, -28,
	-39, 117, -40, -126, -59, 92, -64, 29, -120, 23,
	-78, -63, -60, -76, -77, 126, 127, 115, 116, 123,
	93, 128, -68, -66, -67, -69, 59, 58, 66, 60,
	61, 62, 63, 68, 57, 67, 69, 70, -74, -190,
	43, 44, 262, 263, 264, 265, 268, 266, 95, 33,
	252, 260, 259, 258, 256, 257, 254, 255, 147, 253,
	121, 261, -105, -42, -43, -44, -45, -56, -77, -190,
	-54, 11, -49, -54, -97, -134, 177, -101, 242, 241,
	-121, -99, -120, -118, 240, 203, 239, 140, 91, 22,
	24, 225, 94, 126, 16, 95, 125, 262, 135, 47,
	254, 255, 252, 264, 265, 253, 230, 29, 10, 25,
	157, 21, 119, 137, 98, 99, 160, 23, 158, 70,
	19, 50, 11, 13, 14, 147, 146, 110, 143, 45,
	8, 128, 26, 107, 41, 28, 43, 108, 17, 256,
	257, 31, 268, 164, 121, 48, 35, 92, 68, 51,
	90, 15, 46, 109, 138, 261, 44, 141, 6, 267,
	30, 156, 42, 142, 231, 97, 145, 69, 5, 148,
	9, 49, 52, 258, 259, 260, 33, 96, 12, -165,
	-160, 56, 143, -54, 261, -120, -113, 147, -113, -113,
	142, -54, -54, -112, 147, 56, -112, -112, -112, -54,
	129, -54, 56, 30, 253, 56, 169, 142, 170, 144,
	-132, -190, -121, -132, -132, -132, 173, 174, -132, 243,
	-108, 237, 51, -132, -126, 11, 22, -190, 52, -191,
	55, -90, 19, 31, -40, -126, -86, -87, -40, -85,
	-2, -27, 35, -31, 21, 64, 11, -123, 91, 90,
	107, -122, 22, -120, 129, -40, -61, 110, 92, 108,
	109, 94, 112, 111, 122, 115, 116, 117, 118, 119,
	120, 121, 113, 114, 125, 100, 101, 102, 103, 104,
	105, 106, -106, -190, -190, -77, -190, 133, 134, -183,
	132, -64, -64, -64, -64, -64, -64, 59, -64, -2,
	-72, -40, -190, -190, -190, -190, -190, -190, -190, -190,
	-190, -81, -40, -190, -194, -190, -194, -194, -194, -194,
	-194, -194, -194, -190, -190, -190, -190, -55, 26, -54,
	30, 54, -50, -52, -51, -53, 41, 45, 47, 42,
	43, 44, 48, -130, 22, -42, -190, -129, 165, -128,
	22, -126, -54, -49, -192, 54, 11, 52, 54, -97,
	177, -98, -102, 243, 245, 100, -125, -120, 29, 30,
	55, 54, -138, -141, -143, -142, -144, -145, -139, -140,
	200, 201, 126, 204, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 30, 159, 196, 197, 198, 199,
	216, 217, 218, 219, 220, 221, 222, 223, 202, 183,
	184, 185, 186, 187, 188, 189, 191, 192, 193, 194,
	195, 56, -132, 144, -181, 52, 56, 92, 56, -54,
	-54, -132, 145, -54, 23, 51, -54, 56, 56, -127,
	-126, -118, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, 244, -110, 231, 238, -54, -185, -3, -7,
	-9, -8, 56, 59, -185, -137, -138, -186, -126, 9,
	110, 54, 18, 129, 54, -88, 24, 25, -89, -191,
	-33, -65, -120, 60, 63, -32, 42, -54, -40, -40,
	-70, 68, 92, 69, 70, -122, 117, -127, -121, -118,
	-120, -64, -71, -74, -77, 132, 110, 108, 109, 94,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -133, 56, 59, 56, -38,
	21, -37, -39, -63, 59, -63, 132, -187, -191, 54,
	-191, -2, -37, -37, -40, -40, -78, -120, -126, -78,
	-37, -31, -79, -80, 96, -78, -191, -37, -38, -37,
	-37, -93, 29, 165, -54, -96, -100, -78, -43, -44,
	-44, -43, -44, 41, 41, 41, 46, 41, 46, 41,
	-51, -126, -191, -57, 49, 146, 50, -190, -128, -93,
	52, -42, -54, -101, -98, 54, 244, 246, 247, 51,
	-40, -151, 125, -166, -167, -168, -121, 60, -160, -161,
	-169, 149, 152, 148, -162, 143, 28, -156, 68, 92,
	-152, 228, -146, 53, -146, -146, -146, -146, -150, 203,
	-150, -150, -150, 53, 53, -146, -146, -146, -154, 53,
	-154, -154, -155, 53, -155, -124, 52, -54, -179, 272,
	-180, 56, -132, 23, -132, -114, 140, 137, 138, -176,
	136, 225, 203, 65, 29, 15, 262, 165, 275, 56,
	166, -54, -54, -132, -109, 11, 110, 54, -191, 54,
	37, -40, -40, -127, -87, -90, -104, 19, 11, 33,
	33, -37, 68, 69, 70, 129, -190, -71, -64, -64,
	-64, -36, 160, 91, -191, -191, -37, 54, -40, -191,
	-191, -191, 54, 52, 22, 54, 11, 129, 54, 11,
	-191, -37, -82, -80, 98, -40, -191, -191, -191, -191,
	-191, -62, 30, 33, -2, -190, 33, -190, -58, 54,
	12, 100, -47, -46, 51, 52, -48, 51, -46, 41,
	41, 143, 143, 143, -94, -120, -58, -42, -58, -102,
	-103, 248, 245, 251, 56, 59, 54, -168, 100, 53,
	28, -162, -162, 56, 56, -147, 29, 68, -153, 229,
	60, -150, -150, -151, 30, -151, -151, -151, -159, 59,
	-159, 60, 60, 51, -120, -132, -178, -177, -121, -131,
	-182, 171, 150, 151, 154, 153, 56, 143, 28, 149,
	152, 165, 148, -182, 171, -115, -116, 145, 22, 143,
	28, 165, -132, -111, 108, 12, -126, -126, -138, 22,
	-126, 38, 129, -54, -41, 11, 117, -121, -38, -36,
	91, -64, -64, -191, -39, -136, 126, 200, 159, 198,
	194, 214, 205, 227, 196, 228, 201, -133, -136, -64,
	-64, -121, -64, -64, 269, -85, 99, -40, 97, -95,
	51, -96, -73, -75, -74, -190, -2, -91, -120, -94,
	-85, -100, -40, -40, -40, 53, -40, -190, -190, -190,
	-191, 54, -85, -58, 245, 249, 250, -167, -168, -171,
	-170, -120, 56, 56, -149, 51, 59, 60, 61, 68,
	252, 66, 55, -151, -151, 56, 126, 55, 54, 55,
	54, 55, 54, -54, 54, 100, -131, -120, -131, -120,
	-54, -131, -120, 59, -40, -185, -58, -42, -191, -64,
	-191, -146, -146, -146, -155, -146, 188, -146, 188, -190,
	-191, -191, -191, 54, 19, -191, 54, 19, -190, -35,
	267, -40, -184, 276, 27, -95, 54, -191, -191, -191,
	54, 129, -191, -89, -92, -120, -92, -92, -92, -129,
	-120, -89, 55, 54, -146, -157, 225, 9, -150, 59,
	-150, 60, 60, -132, -177, -168, 53, 26, -83, 13,
	-150, 56, 60, -64, -64, -64, -64, -64, -191, 59,
	117, -72, 28, -75, 33, -2, -190, -120, -120, 54,
	55, -191, -191, -191, -57, -173, -172, 52, 155, 65,
	-170, -158, 149, 28, 148, 252, -151, -151, 55, 55,
	-92, -190, -84, 14, 16, -191, -191, -191, -191, -191,
	-34, 110, 272, 9, -73, -2, 129, -120, -172, 56,
	-163, 100, 59, -148, 65, 28, 28, 55, -174, -175,
	165, -40, -72, -191, 270, 48, 273, -96, -191, -120,
	60, 59, -181, -191, 54, -120, 38, 271, 274, -179,
	-175, 33, 38, 167, 272, 168, 273, -190, 274, -64,
	164, -191, -191,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 536, 0, 300, 300, 300, 300,
	300, 300, 0, 608, 591, 0, 0, 0, 0, -2,
	276, 277, 0, 279, 280, 833, 833, 833, 833, 833,
	0, 0, 0, 0, 37, 38, 831, 1, 3, 544,
	0, 0, 304, 307, 302, 0, 591, 0, 0, 0,
	64, 0, 0, 820, 0, 821, 589, 589, 589, 609,
	610, 613, 614, 615, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	0, 0, 592, 0, 587, 0, 587, 587, 587, 0,
	234, 369, 618, 820, 821, 0, 0, 0, 0, 834,
	834, 834, 834, 0, 834, 0, 264, 253, 255, 256,
	257, 258, 834, 273, 274, 263, 275, 278, 281, 282,
	283, 284, 285, 0, 0, 296, 30, 548, 0, 0,
	536, 32, 0, 300, 305, 306, 310, 308, 309, 301,
	0, 318, 322, 0, 377, 0, 382, 384, -2, 0,
	419, 420, 421, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 447, 448, 449, 450, -2, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 386, 387, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 504, 0,
	477, 477, 477, 477, 477, 477, 477, 477, 0, 0,
	0, 0, 0, 0, 328, 330, 331, 332, 351, 0,
	353, 0, 0, 45, 49, 0, 811, 575, -2, -2,
	0, 0, 616, 617, -2, 740, -2, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 0,
	81, 0, 0, 834, 0, 71, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 235, 834, 834, 834, 834, 834, 834, 834, 834,
	244, 835, 836, 245, 246, 247, 834, 834, 249, 0,
	0, 265, 0, 259, 286, 0, 0, 0, 0, 31,
	832, 25, 0, 0, 545, 0, 537, 538, 541, 544,
	30, 307, 0, 312, 311, 303, 0, 319, 0, 0,
	0, 323, 0, 325, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 405, 406, 407, 408,
	409, 410, 383, 0, 314, 397, 0, 0, 0, 526,
	527, 439, 440, 441, 442, 443, 444, -2, 0, 30,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 505, 0, 469, 0, 470, 471, 472, 473,
	474, 475, 476, 0, 314, 0, 0, 47, 0, 368,
	0, 0, 0, 0, 0, 0, 357, 0, 0, 360,
	0, 0, 0, 0, 352, 0, 0, 371, 784, 354,
	0, 356, -2, 0, 0, 0, 43, 44, 0, 50,
	811, 52, 53, 0, 0, 0, 165, 583, 584, 581,
	194, 0, 148, 144, 88, 89, 90, 91, 137, 94,
	137, 137, 137, 137, 162, 162, 162, 162, 120, 121,
	122, 123, 124, 0, 0, 107, 137, 137, 137, 111,
	127, 128, 129, 130, 131, 132, 133, 134, 92, 95,
	96, 97, 98, 99, 100, 101, 139, 139, 139, 141,
	141, 611, 66, 0, 74, 0, 834, 0, 834, 79,
	0, 209, 0, 228, 588, 0, 834, 231, 232, 370,
	619, 620, 236, 237, 238, 239, 240, 241, 242, 243,
	248, 252, 250, 266, 260, 261, 254, 287, 290, 291,
	292, 293, 294, 295, 288, 0, 85, 297, 298, 549,
	0, 0, 0, 0, 0, 540, 542, 543, 548, 33,
	310, 0, 529, 0, 0, 0, 313, 28, 378, 379,
	381, 398, 0, 400, 402, 324, 320, 0, 514, -2,
	-2, 388, 389, 413, 414, 415, 0, 0, 0, 0,
	411, 393, 0, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 438, 488, 489, 0, 0,
	0, 315, 316, 436, 516, 437, 528, 446, 416, 0,
	567, 30, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 511, 508, 0, 0, 478, 0, 0, 0,
	0, 0, 0, 0, 367, 375, 572, 0, 329, 347,
	349, 0, 344, 358, 359, 361, 0, 363, 0, 365,
	366, 333, 334, 335, 0, 0, 0, 0, 355, 375,
	0, 375, 46, 576, 51, 0, 0, 56, 57, 577,
	578, 579, 0, 80, 195, 197, 200, 201, 82, 83,
	0, 0, 0, 0, 0, 189, 190, 151, 149, 0,
	146, 145, 93, 0, 162, 162, 114, 115, 165, 0,
	165, 165, 165, 0, 0, 108, 109, 110, 102, 0,
	103, 104, 105, 0, 106, 0, 0, 834, 68, 0,
	72, 73, 69, 590, 70, 833, 0, 0, 603, 210,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	0, 227, 834, 230, 269, 0, 0, 0, 0, 0,
	0, 546, 547, 0, 539, 26, 0, 585, 586, 530,
	531, 326, 399, 401, 403, 0, 314, 390, 411, 394,
	0, 391, 0, 0, 385, 451, 0, 0, 418, -2,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 0, 509, 0, 0, 468, 479, 480, 481,
	482, 561, 0, 0, -2, 0, 36, 0, 536, 0,
	0, 0, 341, 348, 0, 0, 342, 0, 343, 362,
	364, 0, 0, 0, 0, 339, 536, 375, 42, 54,
	55, 0, 0, 61, 166, 167, 0, 198, 0, 0,
	184, 0, 0, 187, 188, 158, 0, 150, 87, 147,
	0, 165, 165, 116, 0, 117, 118, 119, 0, 135,
	0, 0, 0, 0, 612, 67, 75, 76, 0, 202,
	833, 0, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 833, 0, 0, 833, 604, 605, 606,
	607, 0, 229, 251, 0, 0, 267, 268, 86, 0,
	299, 550, 0, 27, 375, 0, 321, 515, 0, 392,
	0, 412, 395, 452, 317, 0, 137, 137, 493, 137,
	141, 496, 137, 498, 137, 501, 0, 0, 0, 0,
	0, 514, 0, 0, 0, 506, 467, 512, 0, 569,
	0, 561, 551, 563, 565, 0, 30, 0, 557, 0,
	544, 573, 376, 574, 345, 0, 350, 0, 0, 0,
	353, 0, 544, 41, 58, 59, 60, 196, 199, 0,
	191, 137, 185, 186, 160, 0, 152, 153, 154, 155,
	156, 157, 138, 112, 113, 163, 164, 162, 0, 162,
	0, 142, 0, 834, 0, 0, 203, 0, 204, 206,
	207, 208, 0, 270, 271, 289, 532, 327, 453, 396,
	456, 490, 162, 494, 495, 497, 499, 500, 502, 0,
	458, 457, 459, 0, 0, 462, 0, 0, 0, 0,
	0, 510, 34, 0, 0, 35, 0, 566, -2, 0,
	0, 0, 48, 39, 0, 337, 0, 0, 0, 371,
	340, 40, 176, 0, 193, 168, 161, 0, 165, 136,
	165, 0, 0, 65, 77, 78, 0, 0, 534, 0,
	491, 492, 0, 0, 0, 0, 0, 483, 466, 507,
	570, 571, 0, 564, 0, -2, 0, 559, 558, 0,
	346, 372, 373, 374, 336, 175, 177, 0, 182, 0,
	192, 173, 0, 170, 172, 159, 125, 126, 140, 143,
	0, 0, 29, 0, 0, 503, 460, 461, 463, 464,
	0, 0, 0, 0, 554, 30, 0, 338, 178, 179,
	0, 183, 181, 84, 0, 169, 171, 71, 0, 223,
	0, 535, 533, 465, 0, 0, 0, 562, -2, 560,
	180, 174, 74, 222, 0, 0, 484, 0, 487, 205,
	224, 0, 485, 0, 0, 0, 0, 0, 486, 0,
	0, 225, 226,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 93, 3, 3, 3, 120, 112, 3,
	53, 55, 117, 115, 54, 116, 129, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 277,
	101, 100, 102, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 123,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 94, 95,
	96, 97, 98, 99, 103, 104, 105, 106, 107, 108,
	109, 110, 113, 114, 119, 121, 124, 125, 126, 127,
	128, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:359
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:411
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:424
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:434
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:483
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:563
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:568
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:613
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:629
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:635
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:648
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:670
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:692
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:917
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1117
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			if yyDollar[1].colIdent.NeedQuotes() {
				yyVAL.str = "'" + yyDollar[1].colIdent.String() + "'"
			} else {
				yyVAL.str = yyDollar[1].colIdent.String()
			}

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1225
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1237
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1260
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1265
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1274
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1303
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1309
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1313
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1325
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1333
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1338
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1432
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = "extended "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = "full "
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1512
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1526
		{
			yyVAL.showFilter = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = SessionStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1548
		{
			yyVAL.str = GlobalStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Begin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Commit{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Rollback{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1677
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1682
		{
			setAllowComments(yylex, true)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1686
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1692
		{
			yyVAL.bytes2 = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = UnionStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = UnionAllStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.str = UnionDistinctStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = SQLCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = DistinctStr
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = StraightJoinHint
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			yyVAL.selectExprs = nil
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1766
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1778
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1841
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1894
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1898
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1904
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1909
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = JoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = JoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1940
		{
			yyVAL.str = JoinStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.str = StraightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = LeftJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = LeftJoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = RightJoinStr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.str = RightJoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.str = NaturalJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1984
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2003
		{
			yyVAL.indexHints = nil
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2007
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2011
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2015
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2112
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = IsNullStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = IsNotNullStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = IsTrueStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = IsNotTrueStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = IsFalseStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = IsNotFalseStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = EqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = LessThanStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.str = GreaterThanStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = LessEqualStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = GreaterEqualStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = NotEqualStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2314
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{

			// Postgresql type of interval where interval value is string with values+units
			yyVAL.expr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 461:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 465:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 466:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2512
		{
			yyVAL.str = BooleanModeStr
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = QueryExpansionStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = nil
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = string("")
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2628
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2651
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &NullVal{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2739
		{
			yyVAL.exprs = nil
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2743
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2757
		{
			yyVAL.orderBy = nil
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2777
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2782
		{
			yyVAL.str = AscScr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.str = AscScr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.str = DescScr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2795
		{
			yyVAL.limit = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2803
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2807
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.str = ForUpdateStr
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2820
		{
			yyVAL.str = ShareModeStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2846
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2854
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2869
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2873
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2878
		{
			yyVAL.updateExprs = nil
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2882
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2892
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2908
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2923
		{
			yyVAL.returning = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2933
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2956
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2974
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.bytes = []byte("charset")
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &Default{}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.byt = 0
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			yyVAL.byt = 1
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3006
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3011
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = IgnoreStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3038
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3051
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3058
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3060
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), true)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(yyDollar[1].colIdent.String(), yyDollar[1].colIdent.NeedQuotes())
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3332
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3341
		{
			decNesting(yylex)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3346
		{
			forceEOF(yylex)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3351
		{
			forceEOF(yylex)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			forceEOF(yylex)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
