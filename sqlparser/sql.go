// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

// setErrorVerbose configures format of ErrorMessages from parser. If false then only "syntax error" will be shown.
// Default is false
func SetSQLParserErrorVerboseLevel(verbose bool) {
	yyErrorVerbose = verbose
}

// setDebugLevel configures debug level of log messages from parser. Default is 0
func setDebugLevel(level int) {
	if level < 0 {
		panic("unsupported debug level for sqlparser")
	}
	yyDebug = level
}

//line sql.y:68
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const ILIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const JSON_EXTRACT_OP = 57463
const JSON_UNQUOTE_EXTRACT_OP = 57464
const CREATE = 57465
const ALTER = 57466
const DROP = 57467
const RENAME = 57468
const ANALYZE = 57469
const ADD = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const CONSTRAINT = 57481
const SPATIAL = 57482
const FULLTEXT = 57483
const FOREIGN = 57484
const KEY_BLOCK_SIZE = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const MAXVALUE = 57494
const PARTITION = 57495
const REORGANIZE = 57496
const LESS = 57497
const THAN = 57498
const PROCEDURE = 57499
const TRIGGER = 57500
const VINDEX = 57501
const VINDEXES = 57502
const STATUS = 57503
const VARIABLES = 57504
const BEGIN = 57505
const START = 57506
const TRANSACTION = 57507
const COMMIT = 57508
const ROLLBACK = 57509
const DEALLOCATE = 57510
const PREPARE = 57511
const EXECUTE = 57512
const BIT = 57513
const TINYINT = 57514
const SMALLINT = 57515
const MEDIUMINT = 57516
const INT = 57517
const INTEGER = 57518
const BIGINT = 57519
const INTNUM = 57520
const REAL = 57521
const DOUBLE = 57522
const FLOAT_TYPE = 57523
const DECIMAL = 57524
const NUMERIC = 57525
const TIME = 57526
const TIMESTAMP = 57527
const DATETIME = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const BYTEA = 57535
const INT4 = 57536
const INT8 = 57537
const TEXT = 57538
const TINYTEXT = 57539
const MEDIUMTEXT = 57540
const LONGTEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const DATABASES = 57562
const TABLES = 57563
const VITESS_KEYSPACES = 57564
const VITESS_SHARDS = 57565
const VITESS_TABLETS = 57566
const VSCHEMA_TABLES = 57567
const EXTENDED = 57568
const FULL = 57569
const PROCESSLIST = 57570
const NAMES = 57571
const CHARSET = 57572
const GLOBAL = 57573
const SESSION = 57574
const LOCAL = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const MATCH = 57601
const AGAINST = 57602
const BOOLEAN = 57603
const LANGUAGE = 57604
const WITH = 57605
const QUERY = 57606
const EXPANSION = 57607
const UNUSED = 57608
const RETURNING = 57609

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"ILIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"BYTEA",
	"INT4",
	"INT8",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	178, 285,
	179, 285,
	-2, 273,
	-1, 258,
	74, 558,
	100, 558,
	102, 558,
	108, 558,
	109, 558,
	110, 558,
	111, 558,
	112, 558,
	113, 558,
	114, 558,
	116, 558,
	117, 558,
	118, 558,
	119, 558,
	120, 558,
	121, 558,
	122, 558,
	123, 558,
	124, 558,
	125, 558,
	126, 558,
	127, 558,
	128, 558,
	129, 558,
	130, 558,
	131, 558,
	134, 558,
	-2, 404,
	-1, 259,
	56, 543,
	74, 547,
	137, 655,
	138, 543,
	139, 543,
	-2, 537,
	-1, 260,
	137, 657,
	-2, 546,
	-1, 261,
	137, 658,
	-2, 544,
	-1, 262,
	137, 659,
	-2, 545,
	-1, 339,
	108, 811,
	-2, 66,
	-1, 340,
	108, 839,
	-2, 67,
	-1, 341,
	108, 799,
	-2, 68,
	-1, 345,
	108, 783,
	150, 783,
	-2, 619,
	-1, 347,
	108, 821,
	150, 821,
	-2, 621,
	-1, 574,
	74, 546,
	137, 657,
	-2, 472,
	-1, 626,
	55, 46,
	57, 46,
	-2, 48,
	-1, 787,
	137, 661,
	-2, 654,
	-1, 788,
	137, 655,
	-2, 543,
	-1, 1027,
	5, 31,
	-2, 438,
	-1, 1056,
	5, 30,
	-2, 590,
	-1, 1300,
	5, 31,
	-2, 591,
	-1, 1348,
	5, 30,
	-2, 593,
	-1, 1415,
	5, 31,
	-2, 594,
}

const yyPrivate = 57344

const yyLast = 12215

var yyAct = [...]int16{
	285, 53, 1406, 964, 708, 520, 268, 877, 1362, 570,
	569, 3, 1225, 1233, 284, 1201, 1202, 895, 1121, 1198,
	1307, 621, 919, 915, 958, 238, 918, 878, 1078, 24,
	743, 228, 59, 1124, 619, 1174, 1061, 815, 944, 653,
	1112, 1021, 831, 344, 1067, 929, 638, 864, 921, 828,
	790, 497, 504, 954, 53, 830, 441, 873, 608, 323,
	623, 510, 243, 247, 237, 637, 281, 322, 327, 587,
	337, 1000, 333, 332, 325, 330, 518, 58, 229, 230,
	231, 232, 937, 1226, 1435, 1425, 1433, 1413, 1431, 965,
	1424, 242, 1193, 1293, 244, 1412, 54, 29, 30, 445,
	1371, 1227, 321, 192, 188, 189, 190, 639, 251, 640,
	471, 1387, 535, 534, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 1228, 1229, 546, 909, 648, 750,
	649, 1240, 1241, 1086, 466, 738, 1085, 1244, 740, 1087,
	1242, 910, 911, 331, 483, 741, 63, 485, 748, 1103,
	936, 648, 750, 649, 1321, 257, 945, 1281, 454, 1279,
	636, 1175, 234, 227, 1432, 1336, 480, 481, 478, 479,
	1430, 1407, 874, 1145, 65, 66, 67, 68, 69, 875,
	896, 898, 455, 448, 185, 186, 186, 716, 641, 707,
	1177, 1077, 451, 535, 534, 544, 545, 537, 538, 539,
	540, 541, 542, 543, 536, 1076, 931, 546, 472, 472,
	472, 472, 1363, 203, 472, 1369, 1075, 443, 191, 187,
	1392, 468, 472, 470, 931, 1179, 1303, 1183, 1365, 1178,
	1176, 1185, 558, 559, 931, 1181, 491, 494, 1022, 1142,
	1156, 1038, 916, 1014, 53, 1144, 761, 1180, 467, 469,
	525, 493, 461, 546, 507, 757, 1097, 1149, 1248, 555,
	1182, 1184, 536, 517, 557, 546, 442, 798, 991, 515,
	1398, 267, 1388, 1195, 506, 1258, 1065, 642, 865, 897,
	1045, 795, 796, 797, 794, 517, 572, 573, 233, 576,
	577, 578, 579, 580, 581, 582, 583, 865, 586, 588,
	588, 588, 588, 588, 588, 588, 588, 596, 597, 598,
	599, 600, 945, 875, 262, 711, 1101, 1364, 933, 475,
	476, 477, 1411, 568, 482, 1243, 930, 56, 620, 473,
	1132, 1401, 487, 1249, 1034, 465, 1033, 823, 512, 326,
	1370, 1368, 1417, 934, 930, 793, 1289, 496, 83, 457,
	458, 459, 200, 1396, 930, 200, 1337, 55, 1327, 928,
	926, 1148, 1130, 927, 1132, 1143, 200, 1141, 447, 589,
	590, 591, 592, 593, 594, 595, 992, 516, 515, 1326,
	516, 515, 200, 200, 83, 516, 515, 1197, 200, 1116,
	83, 508, 645, 1115, 517, 184, 1130, 517, 1104, 342,
	1236, 1235, 517, 1098, 626, 627, 967, 635, 634, 535,
	534, 544, 545, 537, 538, 539, 540, 541, 542, 543,
	536, 1035, 818, 546, 722, 560, 562, 563, 564, 565,
	566, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 721, 575, 546, 472, 449, 450, 712, 759,
	1131, 710, 705, 472, 463, 1136, 1133, 1126, 1127, 1134,
	1129, 1128, 320, 456, 472, 472, 472, 472, 472, 472,
	472, 472, 1135, 1011, 1012, 1013, 442, 236, 1138, 472,
	472, 472, 472, 496, 1131, 648, 750, 649, 758, 1136,
	1133, 1126, 1127, 1134, 1129, 1128, 1375, 516, 515, 1374,
	200, 1245, 200, 1421, 496, 725, 1135, 902, 200, 629,
	764, 765, 1125, 1062, 517, 779, 781, 782, 200, 744,
	744, 751, 83, 83, 83, 83, 1354, 1404, 83, 516,
	515, 753, 766, 723, 1199, 556, 83, 1062, 749, 749,
	780, 1354, 496, 791, 1354, 1355, 517, 825, 200, 539,
	540, 541, 542, 543, 536, 706, 816, 546, 53, 648,
	750, 649, 1088, 715, 1298, 648, 750, 649, 83, 787,
	1318, 1317, 768, 572, 726, 727, 728, 729, 730, 731,
	732, 733, 1030, 827, 516, 515, 605, 857, 860, 734,
	735, 736, 737, 866, 1064, 817, 783, 785, 1257, 326,
	1163, 517, 1222, 496, 1302, 496, 327, 327, 327, 327,
	327, 879, 537, 538, 539, 540, 541, 542, 543, 536,
	1253, 620, 546, 899, 630, 819, 822, 1255, 1254, 327,
	604, 827, 853, 854, 1090, 200, 495, 908, 861, 605,
	286, 995, 200, 200, 200, 862, 1030, 869, 870, 83,
	1251, 1252, 868, 1251, 1250, 871, 872, 605, 83, 1030,
	496, 993, 496, 903, 342, 26, 881, 882, 631, 884,
	629, 1063, 1064, 880, 80, 892, 883, 605, 496, 825,
	496, 652, 651, 789, 901, 900, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 907, 905, 904, 633, 946, 947, 948, 923,
	338, 472, 60, 472, 1040, 56, 446, 1062, 1037, 632,
	26, 472, 762, 492, 56, 244, 56, 26, 1331, 960,
	544, 545, 537, 538, 539, 540, 541, 542, 543, 536,
	938, 489, 546, 959, 939, 940, 941, 942, 943, 1216,
	1347, 1054, 490, 709, 1030, 956, 957, 1055, 1093, 83,
	1039, 951, 952, 953, 1036, 200, 200, 83, 955, 200,
	56, 950, 200, 949, 71, 56, 200, 56, 83, 83,
	83, 83, 83, 83, 83, 83, 56, 1015, 962, 906,
	1068, 1069, 1238, 83, 83, 83, 83, 912, 1199, 1117,
	792, 200, 1071, 719, 486, 787, 774, 200, 1074, 791,
	610, 613, 614, 615, 611, 1001, 612, 616, 1004, 1073,
	889, 968, 887, 970, 83, 890, 561, 888, 200, 1010,
	891, 989, 614, 615, 83, 886, 885, 248, 249, 253,
	1429, 1423, 1023, 1155, 996, 1016, 1428, 1058, 474, 474,
	474, 474, 1159, 1160, 474, 786, 511, 1009, 318, 311,
	820, 821, 474, 313, 314, 315, 316, 1157, 1158, 312,
	319, 1003, 317, 509, 1057, 1008, 1059, 326, 326, 326,
	326, 326, 1002, 1108, 1056, 1029, 650, 464, 1100, 1403,
	1402, 1345, 326, 1094, 524, 610, 613, 614, 615, 611,
	326, 612, 616, 327, 498, 1068, 1069, 1296, 1332, 969,
	718, 1044, 239, 1153, 618, 511, 499, 200, 1042, 1007,
	200, 200, 200, 200, 200, 245, 246, 1006, 1072, 760,
	1380, 240, 200, 60, 1379, 200, 1334, 1081, 1080, 200,
	1082, 1091, 1064, 200, 200, 513, 1389, 83, 496, 1322,
	756, 1017, 1018, 1019, 1020, 1083, 62, 746, 7, 747,
	6, 64, 342, 628, 472, 1089, 83, 57, 1107, 1,
	1109, 1110, 1111, 1095, 1096, 338, 1286, 496, 1105, 1106,
	276, 920, 745, 5, 644, 275, 832, 754, 567, 472,
	966, 1114, 1120, 975, 1405, 1361, 1232, 925, 1113, 1113,
	917, 440, 70, 1123, 1397, 924, 1367, 1137, 1320, 932,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 200, 1102, 546, 83, 935, 83, 1237, 1400,
	1099, 200, 658, 1152, 200, 83, 657, 655, 656, 535,
	534, 544, 545, 537, 538, 539, 540, 541, 542, 543,
	536, 654, 660, 546, 659, 752, 1204, 212, 53, 1167,
	1168, 879, 1200, 1207, 327, 1166, 792, 334, 1205, 879,
	1203, 1187, 1186, 1173, 1119, 1194, 1218, 1219, 1220, 500,
	505, 211, 787, 817, 335, 474, 617, 643, 1208, 961,
	1211, 786, 514, 474, 1210, 72, 526, 1209, 1212, 1146,
	1140, 1139, 971, 1147, 474, 474, 474, 474, 474, 474,
	474, 474, 739, 1223, 990, 1231, 484, 1230, 1224, 474,
	474, 474, 474, 215, 554, 571, 1005, 1084, 343, 1246,
	1247, 1206, 763, 503, 1378, 1333, 585, 1043, 584, 863,
	266, 778, 280, 277, 767, 279, 278, 264, 769, 1239,
	770, 1053, 527, 265, 255, 601, 1259, 609, 607, 606,
	524, 1070, 1066, 324, 327, 1060, 474, 1162, 1292, 1261,
	1386, 773, 1264, 28, 326, 61, 250, 23, 1170, 22,
	1171, 21, 19, 744, 1268, 18, 1282, 17, 20, 16,
	15, 14, 1188, 1189, 1291, 1191, 1192, 1266, 1270, 1269,
	32, 13, 749, 12, 1277, 11, 824, 826, 10, 9,
	8, 1295, 4, 241, 83, 25, 2, 200, 0, 0,
	1297, 858, 858, 0, 0, 867, 0, 858, 0, 0,
	0, 0, 0, 83, 0, 0, 1306, 1315, 0, 1309,
	1310, 1311, 1305, 1312, 0, 858, 0, 0, 920, 1314,
	0, 0, 0, 1091, 0, 0, 894, 472, 1274, 1275,
	0, 1276, 0, 0, 1278, 0, 1280, 0, 0, 0,
	0, 0, 0, 474, 0, 0, 1329, 83, 83, 0,
	83, 1330, 1316, 0, 0, 0, 0, 0, 0, 1323,
	0, 1325, 474, 0, 0, 1122, 0, 0, 0, 1204,
	1324, 0, 1349, 83, 0, 0, 200, 200, 1350, 1351,
	200, 0, 1348, 1203, 1335, 1346, 0, 1319, 0, 1353,
	200, 0, 0, 0, 0, 1272, 0, 1360, 0, 83,
	1359, 1352, 1366, 1377, 571, 326, 0, 0, 0, 0,
	0, 0, 1344, 0, 1165, 0, 0, 1372, 1204, 1373,
	53, 474, 1376, 474, 0, 776, 777, 0, 0, 0,
	1391, 474, 1203, 1390, 0, 1393, 0, 1328, 1190, 0,
	1395, 0, 83, 0, 83, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	1409, 0, 0, 0, 0, 0, 879, 1414, 1416, 0,
	0, 0, 474, 0, 0, 83, 0, 83, 83, 1419,
	0, 0, 571, 1290, 1399, 0, 0, 0, 855, 856,
	920, 0, 920, 1426, 1427, 0, 0, 0, 0, 0,
	0, 0, 200, 1434, 0, 326, 0, 0, 0, 0,
	83, 0, 1338, 1339, 0, 1340, 1341, 1342, 0, 0,
	1418, 0, 0, 83, 200, 1025, 981, 0, 0, 0,
	83, 0, 0, 0, 1027, 1028, 0, 0, 0, 0,
	980, 83, 0, 328, 0, 0, 0, 0, 200, 0,
	0, 0, 914, 0, 0, 0, 1165, 0, 0, 0,
	1031, 1032, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 985, 0, 1047, 0, 1048, 1049, 1050, 1051, 1052,
	0, 194, 979, 0, 535, 534, 544, 545, 537, 538,
	539, 540, 541, 542, 543, 536, 0, 0, 546, 0,
	0, 83, 0, 83, 83, 83, 200, 83, 0, 0,
	1079, 0, 0, 0, 0, 83, 0, 444, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 0, 474,
	920, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 83, 83, 0, 0, 0, 0, 0, 1287,
	0, 0, 976, 973, 974, 0, 972, 1122, 920, 0,
	1436, 195, 0, 0, 226, 0, 0, 0, 997, 998,
	999, 0, 505, 1118, 474, 235, 474, 0, 0, 0,
	0, 983, 986, 0, 0, 0, 0, 83, 83, 254,
	0, 195, 195, 0, 0, 0, 0, 195, 0, 474,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 978, 0,
	0, 0, 0, 0, 0, 474, 0, 0, 0, 452,
	0, 453, 0, 0, 0, 1026, 1172, 460, 0, 83,
	0, 0, 0, 977, 0, 0, 0, 462, 0, 474,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 0, 0, 546, 858, 0, 0, 524, 0,
	1079, 0, 0, 858, 0, 1046, 0, 83, 0, 0,
	0, 982, 0, 0, 0, 1221, 0, 0, 0, 0,
	0, 0, 83, 0, 984, 0, 0, 0, 0, 0,
	0, 474, 0, 474, 1234, 0, 0, 0, 0, 195,
	0, 195, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 26, 27,
	54, 29, 30, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 1262,
	0, 0, 31, 0, 0, 0, 1265, 488, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 474, 0, 0,
	0, 0, 0, 1271, 40, 0, 0, 0, 56, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 1284, 1285, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1300, 1301, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 0, 1308,
	1308, 1308, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 0, 195, 0, 0, 0, 0, 0,
	0, 195, 625, 195, 0, 1196, 0, 0, 0, 0,
	0, 0, 33, 34, 36, 35, 38, 474, 474, 474,
	0, 0, 0, 0, 1213, 1214, 0, 0, 1215, 0,
	0, 1217, 0, 39, 46, 47, 0, 0, 48, 49,
	37, 0, 0, 0, 713, 714, 676, 0, 717, 1343,
	0, 720, 41, 42, 0, 43, 44, 50, 51, 52,
	0, 0, 0, 524, 524, 0, 1356, 1357, 1358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1234,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 1381, 1382, 1383, 1384, 1385, 0,
	0, 0, 0, 0, 0, 0, 0, 775, 0, 1267,
	0, 0, 0, 681, 0, 1394, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 195, 0, 0, 195, 0,
	0, 195, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 55, 0, 1410, 0, 0, 0, 0, 1415, 0,
	858, 663, 0, 524, 0, 0, 0, 1294, 0, 0,
	195, 0, 1420, 0, 571, 0, 755, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 1438, 1439, 0, 876, 0, 0, 724,
	0, 0, 0, 0, 691, 692, 693, 694, 695, 696,
	697, 0, 700, 701, 702, 703, 704, 678, 679, 680,
	661, 662, 690, 0, 665, 0, 664, 698, 699, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 682,
	683, 684, 685, 686, 687, 688, 689, 254, 0, 209,
	254, 254, 0, 0, 859, 859, 254, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 254, 254, 254, 254, 0, 195, 221, 859, 195,
	195, 195, 195, 195, 0, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 195, 0, 0, 0, 625, 0,
	0, 963, 195, 195, 0, 0, 0, 529, 0, 533,
	987, 0, 0, 988, 0, 547, 548, 549, 550, 551,
	552, 553, 0, 530, 531, 532, 528, 535, 534, 544,
	545, 537, 538, 539, 540, 541, 542, 543, 536, 1408,
	571, 546, 0, 0, 0, 1169, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 213, 208, 535, 534, 544, 545,
	537, 538, 539, 540, 541, 542, 543, 536, 0, 1024,
	546, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 210, 0, 195, 216, 0, 0, 0, 0, 214,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 207, 0, 217, 218, 219, 220,
	225, 0, 0, 0, 0, 223, 222, 224, 833, 834,
	835, 836, 837, 838, 839, 840, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 841, 535, 534,
	544, 545, 537, 538, 539, 540, 541, 542, 543, 536,
	0, 0, 546, 254, 0, 0, 0, 0, 0, 0,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 1151, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 1256, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 1263, 0, 0, 859, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 419, 0, 390, 431, 368, 382, 439, 383,
	384, 412, 354, 399, 134, 380, 0, 371, 350, 377,
	351, 369, 392, 101, 395, 367, 421, 402, 115, 0,
	0, 195, 437, 117, 407, 0, 151, 127, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 406, 432, 381,
	410, 433, 0, 195, 0, 391, 82, 0, 0, 648,
	647, 649, 922, 0, 0, 0, 0, 94, 0, 0,
	0, 409, 428, 379, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 349, 408, 0, 352, 355,
	438, 426, 374, 375, 1092, 0, 0, 0, 0, 0,
	0, 393, 397, 398, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 405, 0, 0, 0,
	356, 353, 0, 0, 0, 625, 358, 0, 373, 415,
	254, 348, 418, 424, 388, 201, 427, 386, 385, 430,
	140, 0, 0, 154, 106, 105, 114, 422, 370, 378,
	97, 376, 146, 136, 166, 404, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 92, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 366, 425, 177, 178, 179, 180, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 362, 365, 360, 361,
	400, 401, 434, 435, 436, 416, 357, 0, 363, 364,
	0, 420, 403, 84, 0, 116, 181, 142, 103, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 429, 419,
	0, 390, 431, 368, 382, 439, 383, 384, 412, 354,
	399, 134, 380, 859, 371, 350, 377, 351, 369, 392,
	101, 395, 367, 421, 402, 115, 0, 0, 0, 437,
	117, 407, 0, 151, 127, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 406, 432, 381, 410, 433, 0,
	0, 0, 391, 82, 0, 0, 648, 647, 649, 922,
	0, 0, 0, 0, 94, 0, 0, 0, 409, 428,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 349, 408, 0, 352, 355, 438, 426, 374,
	375, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	398, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 405, 0, 0, 0, 356, 353, 0,
	0, 0, 0, 358, 0, 373, 415, 0, 348, 418,
	424, 388, 201, 427, 386, 385, 430, 140, 0, 0,
	154, 106, 105, 114, 422, 370, 378, 97, 376, 146,
	136, 166, 404, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	366, 425, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 362, 365, 360, 361, 400, 401, 434,
	435, 436, 416, 357, 0, 363, 364, 0, 420, 403,
	84, 0, 116, 181, 142, 103, 169, 429, 419, 0,
	390, 431, 368, 382, 439, 383, 384, 412, 354, 399,
	134, 380, 0, 371, 350, 377, 351, 369, 392, 101,
	395, 367, 421, 402, 115, 0, 0, 0, 437, 117,
	407, 0, 151, 127, 0, 0, 394, 423, 396, 417,
	389, 413, 359, 406, 432, 381, 410, 433, 0, 0,
	0, 391, 261, 0, 0, 198, 788, 197, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 409, 428, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 349, 408, 0, 352, 355, 438, 426, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 398,
	414, 387, 0, 0, 0, 0, 0, 0, 784, 0,
	372, 0, 405, 0, 0, 0, 356, 353, 0, 0,
	0, 0, 358, 0, 373, 415, 0, 348, 418, 424,
	388, 201, 427, 386, 385, 430, 140, 0, 0, 154,
	106, 105, 114, 422, 370, 378, 97, 376, 146, 136,
	166, 404, 137, 145, 118, 158, 141, 165, 202, 176,
	156, 175, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 174, 90, 92,
	170, 132, 171, 172, 173, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 183, 366,
	425, 177, 178, 179, 180, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 182, 135, 147, 96,
	167, 150, 362, 365, 360, 361, 400, 401, 434, 435,
	436, 416, 357, 0, 363, 364, 0, 420, 403, 84,
	0, 116, 181, 142, 103, 169, 429, 419, 0, 390,
	431, 368, 382, 439, 383, 384, 412, 354, 399, 134,
	380, 0, 371, 350, 377, 351, 369, 392, 101, 395,
	367, 421, 402, 115, 0, 0, 0, 437, 117, 407,
	0, 151, 127, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 406, 432, 381, 410, 433, 0, 0, 0,
	391, 261, 0, 0, 198, 788, 197, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 409, 428, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	349, 408, 0, 352, 355, 438, 426, 374, 375, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 398, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 405, 0, 0, 0, 356, 353, 0, 0, 0,
	0, 358, 0, 373, 415, 0, 348, 418, 424, 388,
	201, 427, 386, 385, 430, 140, 0, 0, 154, 106,
	105, 114, 422, 370, 378, 97, 376, 146, 136, 166,
	404, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 366, 425,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 362, 365, 360, 361, 400, 401, 434, 435, 436,
	416, 357, 0, 363, 364, 0, 420, 403, 84, 0,
	116, 181, 142, 103, 169, 429, 419, 0, 390, 431,
	368, 382, 439, 383, 384, 412, 354, 399, 134, 380,
	0, 371, 350, 377, 351, 369, 392, 101, 395, 367,
	421, 402, 115, 0, 0, 0, 437, 117, 407, 0,
	151, 127, 0, 0, 394, 423, 396, 417, 389, 413,
	359, 406, 432, 381, 410, 433, 0, 0, 0, 391,
	199, 0, 0, 198, 196, 197, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 409, 428, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 349,
	408, 0, 352, 355, 438, 426, 374, 375, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 398, 414, 387,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	405, 0, 0, 0, 356, 353, 0, 0, 0, 0,
	358, 0, 373, 415, 0, 348, 418, 424, 388, 201,
	427, 386, 385, 430, 140, 0, 0, 154, 106, 105,
	114, 422, 370, 378, 97, 376, 146, 136, 166, 404,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 366, 425, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	362, 365, 360, 361, 400, 401, 434, 435, 436, 416,
	357, 0, 363, 364, 0, 420, 403, 84, 0, 116,
	181, 142, 103, 169, 429, 419, 0, 390, 431, 368,
	382, 439, 383, 384, 412, 354, 399, 134, 380, 0,
	371, 350, 377, 351, 369, 392, 101, 395, 367, 421,
	402, 115, 0, 0, 0, 437, 117, 407, 0, 151,
	127, 0, 0, 394, 423, 396, 417, 389, 413, 359,
	406, 432, 381, 410, 433, 56, 0, 0, 391, 82,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 409, 428, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 349, 408,
	0, 352, 355, 438, 426, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 398, 414, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 372, 0, 405,
	0, 0, 0, 356, 353, 0, 0, 0, 0, 358,
	0, 373, 415, 0, 348, 418, 424, 388, 201, 427,
	386, 385, 430, 140, 0, 0, 154, 106, 105, 114,
	422, 370, 378, 97, 376, 146, 136, 166, 404, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 92, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 366, 425, 177, 178,
	179, 180, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 362,
	365, 360, 361, 400, 401, 434, 435, 436, 416, 357,
	0, 363, 364, 0, 420, 403, 84, 0, 116, 181,
	142, 103, 169, 429, 419, 0, 390, 431, 368, 382,
	439, 383, 384, 412, 354, 399, 134, 380, 0, 371,
	350, 377, 351, 369, 392, 101, 395, 367, 421, 402,
	115, 0, 0, 0, 437, 117, 407, 0, 151, 127,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 406,
	432, 381, 410, 433, 0, 0, 0, 391, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 409, 428, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 349, 408, 0,
	352, 355, 438, 426, 374, 375, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 398, 414, 387, 0, 0,
	0, 0, 0, 0, 1164, 0, 372, 0, 405, 0,
	0, 0, 356, 353, 0, 0, 0, 0, 358, 0,
	373, 415, 0, 348, 418, 424, 388, 201, 427, 386,
	385, 430, 140, 0, 0, 154, 106, 105, 114, 422,
	370, 378, 97, 376, 146, 136, 166, 404, 137, 145,
	118, 158, 141, 165, 202, 176, 156, 175, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 174, 90, 92, 170, 132, 171, 172,
	173, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 183, 366, 425, 177, 178, 179,
	180, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 182, 135, 147, 96, 167, 150, 362, 365,
	360, 361, 400, 401, 434, 435, 436, 416, 357, 0,
	363, 364, 0, 420, 403, 84, 0, 116, 181, 142,
	103, 169, 429, 419, 0, 390, 431, 368, 382, 439,
	383, 384, 412, 354, 399, 134, 380, 0, 371, 350,
	377, 351, 369, 392, 101, 395, 367, 421, 402, 115,
	0, 0, 0, 437, 117, 407, 0, 151, 127, 0,
	0, 394, 423, 396, 417, 389, 413, 359, 406, 432,
	381, 410, 433, 0, 0, 0, 391, 82, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 409, 428, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 411, 349, 408, 0, 352,
	355, 438, 426, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 398, 414, 387, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 405, 0, 0,
	0, 356, 353, 0, 0, 0, 0, 358, 0, 373,
	415, 0, 348, 418, 424, 388, 201, 427, 386, 385,
	430, 140, 0, 0, 154, 106, 105, 114, 422, 370,
	378, 97, 376, 146, 136, 166, 404, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 366, 425, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 362, 365, 360,
	361, 400, 401, 434, 435, 436, 416, 357, 0, 363,
	364, 0, 420, 403, 84, 0, 116, 181, 142, 103,
	169, 429, 419, 0, 390, 431, 368, 382, 439, 383,
	384, 412, 354, 399, 134, 380, 0, 371, 350, 377,
	351, 369, 392, 101, 395, 367, 421, 402, 115, 0,
	0, 0, 437, 117, 407, 0, 151, 127, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 406, 432, 381,
	410, 433, 0, 0, 0, 391, 82, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 409, 428, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 349, 408, 0, 352, 355,
	438, 426, 374, 375, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 398, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 405, 0, 0, 0,
	356, 353, 0, 0, 0, 0, 358, 0, 373, 415,
	0, 348, 418, 424, 388, 201, 427, 386, 385, 430,
	140, 0, 0, 154, 106, 105, 114, 422, 370, 378,
	97, 376, 146, 136, 166, 404, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 346, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 366, 425, 177, 178, 179, 180, 0,
	0, 0, 347, 345, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 362, 365, 360, 361,
	400, 401, 434, 435, 436, 416, 357, 0, 363, 364,
	0, 420, 403, 84, 0, 116, 181, 142, 103, 169,
	429, 419, 0, 390, 431, 368, 382, 439, 383, 384,
	412, 354, 399, 134, 380, 0, 371, 350, 377, 351,
	369, 392, 101, 395, 367, 421, 402, 115, 0, 0,
	0, 437, 117, 407, 0, 151, 127, 0, 0, 394,
	423, 396, 417, 389, 413, 359, 406, 432, 381, 410,
	433, 0, 0, 0, 391, 82, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	409, 428, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 349, 408, 0, 352, 355, 438,
	426, 374, 375, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 398, 414, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 405, 0, 0, 0, 356,
	353, 0, 0, 0, 0, 358, 0, 373, 415, 0,
	348, 418, 424, 388, 201, 427, 386, 385, 430, 140,
	0, 0, 154, 106, 105, 114, 422, 370, 378, 97,
	376, 146, 136, 166, 404, 137, 145, 118, 158, 141,
	165, 202, 176, 156, 175, 85, 155, 336, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	174, 90, 346, 170, 132, 171, 172, 173, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 183, 366, 425, 177, 178, 179, 180, 0, 0,
	0, 347, 345, 341, 340, 339, 112, 119, 143, 182,
	135, 147, 96, 167, 150, 362, 365, 360, 361, 400,
	401, 434, 435, 436, 416, 357, 0, 363, 364, 0,
	420, 403, 84, 0, 116, 181, 142, 103, 169, 134,
	0, 0, 829, 0, 263, 0, 0, 0, 101, 0,
	258, 0, 0, 115, 0, 0, 0, 297, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	287, 261, 318, 311, 260, 259, 197, 313, 314, 315,
	316, 0, 94, 312, 319, 0, 317, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 274, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 272, 252, 0, 0,
	0, 309, 0, 273, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	201, 0, 0, 306, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 298, 307, 304, 305, 302, 303, 301, 300, 299,
	310, 290, 291, 292, 293, 295, 0, 294, 84, 0,
	116, 181, 142, 103, 169, 134, 0, 0, 0, 0,
	263, 0, 0, 0, 101, 0, 258, 0, 0, 115,
	0, 0, 0, 297, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 287, 261, 318, 311,
	260, 259, 197, 313, 314, 315, 316, 0, 94, 312,
	319, 0, 317, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 274, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 252, 0, 0, 0, 309, 0, 273,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 0, 0, 201, 0, 0, 306,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 310, 290, 291, 292,
	293, 295, 0, 294, 84, 0, 116, 181, 142, 103,
	169, 134, 0, 0, 0, 0, 263, 0, 0, 0,
	101, 0, 258, 0, 0, 115, 0, 0, 0, 297,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 496, 287, 261, 318, 311, 260, 259, 197, 313,
	314, 315, 316, 0, 94, 312, 319, 0, 317, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 274, 0, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 272, 0,
	0, 0, 0, 309, 0, 273, 0, 0, 269, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 308,
	0, 0, 201, 0, 0, 306, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	0, 0, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 298, 307, 304, 305, 302, 303, 301,
	300, 299, 310, 290, 291, 292, 293, 295, 0, 294,
	84, 0, 116, 181, 142, 103, 169, 134, 0, 0,
	0, 0, 263, 0, 0, 0, 101, 0, 258, 0,
	0, 115, 0, 0, 0, 297, 117, 0, 0, 151,
	127, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 0, 0, 913, 0, 56, 0, 0, 287, 261,
	318, 311, 260, 259, 197, 313, 314, 315, 316, 0,
	94, 312, 319, 0, 317, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	274, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 309,
	0, 273, 0, 0, 269, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 201, 0,
	0, 306, 0, 140, 0, 0, 154, 106, 105, 114,
	0, 0, 0, 97, 0, 146, 136, 166, 0, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 92, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 0, 0, 177, 178,
	179, 180, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 310, 290,
	291, 292, 293, 295, 26, 294, 84, 0, 116, 181,
	142, 103, 169, 0, 0, 0, 134, 0, 0, 0,
	0, 263, 0, 0, 0, 101, 0, 258, 0, 0,
	115, 0, 0, 0, 297, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 287, 261, 318,
	311, 260, 259, 197, 313, 314, 315, 316, 0, 94,
	312, 319, 0, 317, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 274,
	0, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 309, 0,
	273, 0, 0, 269, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 308, 0, 0, 201, 0, 0,
	306, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 137, 145,
	118, 158, 141, 165, 202, 176, 156, 175, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 174, 90, 92, 170, 132, 171, 172,
	173, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 183, 0, 0, 177, 178, 179,
	180, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 182, 135, 147, 96, 167, 150, 298, 307,
	304, 305, 302, 303, 301, 300, 299, 310, 290, 291,
	292, 293, 295, 0, 294, 84, 0, 116, 181, 142,
	103, 169, 134, 0, 501, 0, 0, 263, 0, 0,
	0, 101, 0, 258, 0, 0, 115, 0, 0, 0,
	297, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 287, 261, 318, 311, 260, 259, 197,
	313, 314, 315, 316, 0, 94, 312, 319, 0, 317,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 274, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 309, 0, 273, 0, 0, 269,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	308, 0, 0, 201, 0, 0, 306, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 310, 290, 291, 292, 293, 295, 0,
	294, 84, 0, 116, 181, 142, 103, 169, 134, 0,
	0, 0, 0, 263, 0, 0, 0, 101, 0, 258,
	0, 0, 115, 0, 0, 0, 297, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 287,
	261, 318, 311, 260, 259, 197, 313, 314, 315, 316,
	0, 94, 312, 319, 0, 317, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 274, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 0, 0, 0, 0,
	309, 0, 273, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 201,
	0, 0, 306, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	298, 307, 304, 305, 302, 303, 301, 300, 299, 310,
	290, 291, 292, 293, 295, 134, 294, 84, 0, 116,
	181, 142, 103, 169, 101, 0, 561, 0, 0, 115,
	0, 0, 0, 297, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 287, 261, 318, 311,
	260, 259, 197, 313, 314, 315, 316, 0, 94, 312,
	319, 0, 317, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 309, 0, 273,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 0, 0, 201, 0, 0, 306,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 1437, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 310, 290, 291, 292,
	293, 295, 134, 294, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 561, 0, 0, 115, 0, 0, 0,
	297, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 287, 261, 318, 311, 260, 259, 197,
	313, 314, 315, 316, 0, 94, 312, 319, 0, 317,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 309, 0, 273, 0, 0, 269,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	308, 0, 0, 201, 0, 0, 306, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 310, 290, 291, 292, 293, 295, 134,
	294, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	561, 0, 0, 115, 0, 0, 0, 297, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	287, 261, 318, 311, 574, 259, 197, 313, 314, 315,
	316, 0, 94, 312, 319, 0, 317, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 272, 0, 0, 0,
	0, 309, 0, 273, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	201, 0, 0, 306, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 298, 307, 304, 305, 302, 303, 301, 300, 299,
	310, 290, 291, 292, 293, 295, 0, 294, 84, 0,
	116, 181, 142, 103, 169, 134, 0, 0, 0, 519,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	521, 522, 523, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 73, 0, 0, 0, 79, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	75, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 76, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 82, 0, 0, 521, 522, 523, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 84, 0,
	116, 181, 142, 103, 169, 101, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 199, 0,
	0, 198, 196, 197, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 137, 145,
	118, 158, 141, 165, 202, 176, 156, 175, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 174, 90, 92, 170, 132, 171, 172,
	173, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 183, 0, 0, 177, 178, 179,
	180, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 182, 135, 147, 96, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 116, 181, 142,
	103, 169, 134, 0, 0, 0, 624, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 198, 196, 197,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 199, 0, 0, 198, 196, 197, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 84, 0,
	116, 181, 142, 103, 169, 101, 0, 646, 0, 0,
	115, 0, 0, 0, 0, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 648, 647, 649, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 137, 145,
	118, 158, 141, 165, 202, 176, 156, 175, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 174, 90, 92, 170, 132, 171, 172,
	173, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 183, 0, 0, 177, 178, 179,
	180, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 182, 135, 147, 96, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 116, 181, 142,
	103, 169, 134, 0, 0, 0, 624, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 198, 196, 197,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 622, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 84, 0, 116, 181, 142, 103, 169, 602, 101,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 117,
	0, 0, 151, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 198, 196, 197, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 140, 0, 0, 154,
	106, 105, 114, 0, 0, 0, 97, 0, 146, 136,
	166, 0, 137, 145, 118, 158, 141, 165, 202, 176,
	156, 175, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 174, 90, 92,
	170, 132, 171, 172, 173, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 183, 0,
	0, 177, 178, 179, 180, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 182, 135, 147, 96,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 134, 0, 84,
	0, 116, 181, 142, 103, 169, 101, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 117, 0, 0, 151,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 198, 196, 197, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 140, 0, 0, 154, 106, 105, 114,
	0, 0, 0, 97, 0, 146, 136, 166, 0, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 92, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 0, 0, 177, 178,
	179, 180, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 84, 0, 116, 181,
	142, 103, 169, 101, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 117, 0, 0, 151, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 198,
	196, 197, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 201, 0, 0, 0, 0,
	140, 0, 0, 154, 106, 105, 114, 0, 0, 0,
	97, 0, 146, 136, 166, 0, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 92, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 0, 0, 177, 178, 179, 180, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 84, 0, 116, 181, 142, 103, 169,
	101, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 521, 522, 523, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	0, 0, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	84, 0, 116, 181, 142, 103, 169, 101, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 198, 788, 197, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 84, 0, 116,
	181, 142, 103, 169, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	198, 196, 197, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 81, 0,
	771, 0, 0, 772, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	116, 181, 142, 103, 169,
}

var yyPact = [...]int16{
	1752, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 918, 951, -1000, -1000, -1000, -1000,
	-1000, -1000, 718, 8314, 35, 72, -43, 10646, 66, 2097,
	11417, -1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	102, 11417, 417, 659, -1000, -1000, -1000, -1000, -1000, 895,
	915, 719, 905, 795, -1000, 5687, 34, 9351, 10389, 5155,
	-1000, 416, 69, 11417, -170, 11931, 31, 31, 31, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45, 11417, -1000, 11417, 30, 403,
	30, 30, 30, 11417, -1000, 115, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11417, 394, 857, 74, 4039, 4039, 4039,
	4039, -10, -12, 4039, -107, -97, 750, -1000, -1000, -1000,
	-1000, 4039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11417, -1000, 730, 668, 425, 885, 6754,
	7020, 918, -1000, 659, -1000, -1000, -1000, 835, -1000, -1000,
	268, 934, -1000, 8057, 113, -1000, 7020, 2087, 670, -1000,
	-1000, -1000, -1000, 670, -1000, -1000, -1000, -1000, 94, 7534,
	7534, 7534, 7534, 7534, 7534, -1000, -1000, -1000, -1000, -1000,
	-1000, 249, -1000, -1000, -1000, 6488, 670, 7791, 670, 670,
	670, 670, 670, 670, 670, 670, 7020, 670, 670, 670,
	670, 670, 670, 670, 670, 670, 670, 670, 670, 670,
	670, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10132, 600, 766, -1000, -1000, -1000, 892, 8828, 9874, 11417,
	613, -1000, 662, 648, 4876, -22, -144, -1000, 38, -1000,
	-1000, -1000, 169, 9608, -1000, -1000, 856, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	624, -1000, 1896, 392, 4039, 40, 698, 391, 215, 388,
	11417, 11417, 4039, 37, 11417, 887, 749, 11417, 382, 364,
	-1000, 3760, -1000, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
	4039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4039, 4039,
	4039, 4039, -1000, -117, -100, -1000, 11417, -1000, -1000, 88,
	88, 1896, 11417, -1000, 7020, -1000, -1000, -1000, 941, 136,
	431, 911, 109, 665, -1000, 486, 895, 425, 795, 11674,
	761, -1000, -1000, 11417, -1000, 7020, 7020, 440, -1000, 10903,
	-1000, -1000, -1000, -1000, -1000, 3202, 148, 7534, 271, 165,
	7534, 7534, 7534, 7534, 7534, 7534, 7534, 7534, 7534, 7534,
	7534, 7534, 7534, 7534, 7534, 7534, 496, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 362, -1000, 659, 797, 797,
	119, -1000, 119, 119, 119, 119, 119, 263, -1000, 425,
	622, 287, 6488, 5421, -1000, 2270, 5687, 5687, 7020, 7020,
	11160, 11160, 5687, 894, 193, 287, 11160, -1000, 425, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5687, 5687, 5687, 5687,
	5687, 143, 11417, -1000, 11160, 9351, 9351, 9351, 9351, 9351,
	-1000, 792, 791, -1000, 778, 776, 786, 11417, -1000, 620,
	8828, 128, 670, -1000, 11417, -1000, 9, 452, 9351, 11417,
	-1000, -1000, 4876, 7534, 662, 648, -144, 580, -1000, -125,
	-113, 7534, 6219, 108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2923, 206, 243, -85, -1000, -1000, -1000, -1000, 684,
	-1000, 684, 684, 684, 684, 684, -51, -51, -51, -51,
	-1000, -1000, -1000, -1000, -1000, 717, 715, -1000, 684, 684,
	684, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	712, 712, 712, 687, 687, 733, -1000, 11417, -191, 346,
	4039, 886, 4039, -1000, 1441, -1000, 11417, -1000, -1000, 11417,
	4039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 604, -1000, 584, -1000, -1000, 804, 7020, 7020,
	7020, 3481, 7020, -1000, 849, 838, 885, -1000, 894, 908,
	-1000, 839, 821, 5687, -1000, -1000, 148, 170, -1000, -1000,
	398, -1000, -1000, -1000, -1000, 106, 670, -1000, -1000, 2248,
	-1000, -1000, -1000, -1000, 271, 7534, 7534, 7534, 7534, 73,
	73, 2248, 2160, 608, 310, 119, 423, 423, 131, 131,
	131, 131, 131, 488, 488, -1000, -1000, -1000, 425, 249,
	-1000, -1000, 249, -1000, -1000, 7020, -1000, 425, 425, 5687,
	525, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 602, 602, 279, 399, 707, -1000, 104,
	703, 602, 5687, 174, -1000, 7020, 425, -1000, 602, 425,
	425, 602, 602, 721, 811, 670, -1000, 660, -1000, 168,
	766, 736, 748, 851, -1000, -1000, -1000, -1000, 775, -1000,
	764, -1000, -1000, -1000, -1000, -1000, 68, 57, 43, 11931,
	-1000, 930, 9351, 582, -1000, -1000, 2248, 580, -144, -120,
	-1000, -1000, 2248, -1000, 287, -1000, 502, 577, 2636, -1000,
	-1000, -1000, -1000, -1000, -1000, 702, 865, 178, 196, 343,
	-1000, -1000, 859, -1000, 241, -87, -1000, -1000, 332, -51,
	-51, -1000, -1000, -1000, 108, 853, 108, 108, 108, 422,
	422, -1000, -1000, -1000, -1000, 327, -1000, -1000, -1000, 323,
	-1000, 745, 11931, 4039, -1000, 4597, -1000, -1000, -1000, -1000,
	-1000, -1000, 336, 302, 217, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3, -1000, 4039, -1000,
	245, 11417, 11417, 1896, 891, 11417, 802, 287, 287, 287,
	103, -1000, 833, 818, -1000, 11417, -1000, -1000, -1000, -1000,
	589, -1000, -1000, -1000, 4318, 5687, -1000, 73, 73, 2248,
	2126, -1000, 7534, -1000, 7534, -1000, 287, -1000, -1000, 602,
	5687, -1000, -1000, 26, 496, 26, 7534, 7534, 3481, 7534,
	7534, -185, 697, 166, -1000, 7020, 282, -1000, -1000, -1000,
	-1000, -1000, -1000, 744, 11160, 670, -1000, 8571, -1000, 11931,
	930, 918, 11160, 9351, 7020, 7020, -1000, -1000, 7020, 693,
	-1000, 7020, -1000, -1000, -1000, 670, 670, 670, 545, -1000,
	918, 582, -201, -1000, -1000, -152, -133, -1000, -1000, -1000,
	2923, -1000, 2923, 11931, -1000, 341, 340, -1000, -1000, 738,
	65, -1000, -1000, -1000, 443, 108, 108, -1000, 198, -1000,
	-1000, -1000, 596, -1000, 593, 563, 570, 11417, -1000, -1000,
	541, -1000, 167, -1000, -1000, 11931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11931, 11417,
	-1000, -1000, -1000, -1000, -1000, 11931, -1000, -1000, 422, 7020,
	-1000, -1000, -1000, 88, -1000, -1000, 4597, -1000, -1000, -1000,
	-1000, -1000, 930, 9351, -1000, -1000, 425, -1000, -1000, 7534,
	2248, 2248, -1000, -1000, 425, 684, 684, -1000, 684, 687,
	-1000, 684, -34, 684, -36, 670, 425, 425, 919, 1560,
	-1000, 289, 1394, 670, -182, -1000, 287, 7020, -201, 880,
	480, 507, -1000, -1000, 5953, 425, 547, 89, 545, 918,
	895, -1000, 529, 287, 287, 287, 11931, 287, 11931, 11931,
	11931, 9094, 11931, 895, -201, -1000, 5687, -1000, -1000, -1000,
	2636, -1000, 513, -1000, 684, -1000, -1000, -78, 940, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-51, 422, -51, 313, -1000, 292, 4039, 4597, 2923, -1000,
	672, -1000, -1000, -1000, -1000, 882, -1000, 287, -1000, 923,
	529, -1000, 2248, -1000, -1000, 105, -1000, -1000, -1000, -1000,
	-1000, -1000, 290, -1000, -1000, -1000, 7534, 7534, -1000, 7534,
	7534, 7534, 425, 422, 287, -1000, 863, -1000, 670, -1000,
	-1000, 714, 10903, 10903, -1000, 895, -201, 487, -1000, 484,
	484, 484, 128, -1000, -201, -1000, 525, 157, 11931, -1000,
	187, -1000, -160, 108, -1000, 108, 441, 438, -1000, -1000,
	-1000, 11931, 670, 920, 914, -1000, -1000, 425, 890, 890,
	890, 890, -8, -1000, -1000, 937, -1000, 670, -1000, 659,
	83, -1000, -201, -1000, 11931, -1000, -1000, -1000, -1000, -1000,
	-1000, 157, -1000, 293, 162, 422, -1000, 260, 862, -1000,
	861, -1000, -1000, -1000, -1000, -1000, 469, 1, -1000, 7020,
	7020, -1000, -1000, -1000, -1000, -1000, 425, 44, -194, 11160,
	507, 425, 10903, -1000, -1000, -1000, -1000, 276, -1000, -1000,
	-1000, 422, -1000, -1000, 698, 446, -1000, 11931, 287, 490,
	-1000, 800, -189, -197, 456, -1000, -1000, -1000, -1000, -191,
	-1000, 1, 810, -1000, 799, -1000, -1000, -1000, -2, -192,
	-9, -195, 670, -198, 7277, -1000, 890, 425, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1216, 10, 29, 1215, 1213, 1212, 982, 959, 957,
	1210, 1209, 1208, 1205, 1203, 1201, 1200, 1191, 1190, 1189,
	1188, 1187, 1185, 1182, 1181, 1179, 1177, 146, 1176, 1175,
	1173, 61, 1171, 63, 1170, 1168, 41, 55, 49, 42,
	839, 1167, 1165, 34, 75, 67, 59, 1163, 44, 1162,
	1161, 1159, 58, 1158, 1157, 1473, 1155, 74, 17, 36,
	1154, 1153, 1152, 1151, 66, 155, 1148, 1147, 1146, 1145,
	1143, 1142, 1141, 50, 9, 15, 14, 16, 1140, 271,
	6, 1139, 47, 1138, 1137, 1135, 1134, 32, 1133, 52,
	1132, 25, 51, 1131, 20, 57, 28, 19, 7, 73,
	65, 72, 1128, 27, 70, 46, 1127, 1126, 395, 1124,
	1123, 1116, 1114, 1112, 1103, 158, 368, 1102, 1101, 1100,
	1095, 43, 314, 640, 329, 76, 1092, 1089, 5, 1087,
	1553, 71, 60, 21, 1086, 31, 110, 37, 1084, 1081,
	1067, 1057, 35, 1055, 39, 1054, 1052, 1051, 1038, 1037,
	1036, 1032, 82, 1030, 1029, 1028, 38, 23, 1026, 1023,
	53, 24, 1009, 1008, 1006, 40, 56, 1005, 45, 1004,
	1002, 1001, 1000, 26, 22, 997, 13, 996, 8, 995,
	994, 2, 993, 18, 992, 3, 990, 4, 33, 988,
	12, 30, 987, 986, 48, 985, 980, 969, 967, 0,
	636, 963, 961, 69,
}

var yyR1 = [...]uint8{
	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	8, 9, 9, 9, 201, 201, 44, 44, 95, 95,
	10, 10, 10, 10, 10, 10, 100, 100, 105, 105,
	105, 106, 106, 106, 106, 140, 140, 138, 138, 11,
	11, 11, 11, 11, 11, 11, 187, 187, 186, 185,
	185, 184, 184, 183, 16, 170, 171, 171, 171, 166,
	143, 143, 144, 144, 144, 144, 144, 151, 147, 147,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 150, 150, 150, 150, 150,
	150, 150, 150, 165, 165, 152, 152, 160, 160, 161,
	161, 161, 158, 158, 159, 159, 162, 162, 162, 153,
	153, 153, 153, 153, 153, 153, 155, 155, 163, 163,
	156, 156, 156, 157, 157, 157, 164, 164, 164, 164,
	164, 154, 154, 167, 167, 179, 179, 178, 178, 178,
	169, 169, 175, 175, 175, 175, 175, 168, 168, 177,
	177, 176, 172, 172, 172, 173, 173, 173, 174, 174,
	174, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 182, 180, 180, 181, 181, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 113, 113, 110, 110, 111, 111, 112, 112, 112,
	114, 114, 114, 141, 141, 139, 139, 139, 19, 19,
	21, 21, 22, 23, 20, 20, 20, 20, 20, 24,
	24, 25, 25, 25, 191, 191, 191, 191, 191, 191,
	26, 26, 26, 192, 192, 202, 27, 28, 28, 29,
	29, 29, 33, 33, 33, 31, 31, 32, 32, 38,
	38, 37, 37, 39, 39, 39, 39, 126, 126, 126,
	128, 128, 128, 128, 125, 41, 41, 42, 43, 43,
	45, 45, 46, 46, 46, 57, 57, 94, 94, 96,
	96, 47, 47, 47, 47, 48, 48, 49, 49, 50,
	50, 134, 134, 133, 133, 133, 132, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 58, 58, 58, 58, 59, 59, 40, 40, 40,
	40, 40, 40, 40, 109, 109, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	72, 72, 72, 72, 72, 72, 62, 62, 62, 62,
	62, 62, 62, 36, 36, 73, 73, 73, 79, 74,
	74, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 196, 195, 70, 70, 70, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 69, 69, 69, 69, 69, 69, 69, 69,
	203, 203, 71, 71, 71, 71, 71, 34, 34, 34,
	34, 34, 137, 137, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 83, 83,
	35, 35, 81, 81, 82, 84, 84, 67, 67, 67,
	80, 80, 80, 123, 123, 123, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 189,
	189, 66, 66, 66, 85, 85, 86, 86, 87, 87,
	88, 88, 89, 90, 90, 90, 90, 90, 90, 90,
	91, 91, 91, 91, 91, 91, 92, 92, 92, 63,
	63, 63, 63, 63, 63, 93, 93, 93, 93, 97,
	97, 75, 75, 77, 77, 76, 78, 190, 190, 98,
	98, 103, 99, 99, 101, 101, 104, 104, 104, 102,
	102, 102, 129, 129, 129, 107, 107, 115, 115, 116,
	116, 108, 108, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 118, 118, 118, 119, 119, 120, 120,
	120, 127, 127, 124, 124, 130, 130, 130, 130, 130,
	131, 131, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 194, 194, 194, 199,
	200, 135, 136, 136, 136,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 10,
	9, 9, 8, 7, 1, 1, 1, 3, 0, 4,
	3, 3, 4, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	1, 3, 3, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	4, 6, 4, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 1, 1, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 3,
	2, 4, 4, 7, 1, 1, 1, 1, 1, 1,
	2, 4, 3, 1, 3, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 4, 5, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 4, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 3, 3,
	0, 2, 2, 4, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 0, 2, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 140, 141, 143, 142, 168, 144, 161,
	52, 180, 181, 183, 184, 25, 162, 163, 166, 167,
	185, 186, 187, -199, 8, 269, 56, -198, 285, -87,
	15, -29, 5, -27, -202, -27, -27, -27, -27, -27,
	-170, 56, -120, 149, 98, 176, 261, 146, 147, 153,
	-123, 64, 60, -122, 277, 180, 194, 232, 188, 217,
	206, 204, 207, 247, 71, 183, 257, 164, 203, 199,
	197, 27, 222, 282, 198, 159, 158, 223, 227, 248,
	192, 193, 251, 221, 160, 32, 279, 37, 172, 252,
	225, 250, 220, 216, 219, 191, 215, 41, 229, 228,
	230, 246, 209, 200, 18, 255, 167, 170, 224, 226,
	154, 174, 281, 253, 196, 171, 166, 256, 184, 249,
	259, 40, 234, 190, 157, 181, 178, 213, 173, 201,
	202, 218, 189, 214, 182, 175, 168, 258, 235, 283,
	208, 210, 211, 212, 205, 179, 177, 239, 240, 241,
	242, 280, 254, 236, -108, 149, 151, 147, 147, 148,
	149, 261, 146, 147, -55, -130, 64, 65, 63, 60,
	-122, 149, 176, 147, 135, 207, 140, 237, 148, 32,
	174, -139, -141, 147, 182, -110, 177, 239, 240, 241,
	242, 60, 249, 248, 250, 243, -130, 182, -135, -135,
	-135, -135, -135, 186, 60, -130, 60, -2, -91, 17,
	16, -5, -3, -199, 6, 20, 21, -33, 42, 43,
	-28, -39, 126, -40, -130, -60, 100, -65, 29, 64,
	63, 60, -122, 23, -67, -61, -78, -79, -80, 135,
	136, 124, 125, 132, 101, -195, -196, -70, -68, -69,
	-71, -64, 76, 77, -76, -199, -123, 59, 46, 47,
	270, 271, 272, 273, 276, 274, 103, 36, 260, 268,
	267, 266, 264, 265, 262, 263, 152, 261, 146, 130,
	269, 62, 72, 66, 67, 68, 69, 75, 61, 73,
	-108, -43, -45, -46, -47, -57, -79, -199, -55, 11,
	-44, -57, -99, -101, -140, -138, 182, -104, -123, 250,
	249, 248, -124, -102, -121, 247, 207, 246, 145, 99,
	22, 24, 102, 135, 16, 103, 134, 270, 140, 50,
	262, 263, 260, 272, 273, 261, 237, 29, 10, 25,
	162, 21, 128, 142, 106, 107, 165, 23, 163, 77,
	19, 53, 11, 13, 14, 152, 151, 119, 148, 48,
	8, 59, 26, 115, 44, 28, 46, 116, 117, 17,
	264, 265, 31, 276, 169, 130, 51, 38, 100, 75,
	54, 98, 15, 49, 118, 143, 269, 47, 146, 6,
	275, 30, 161, 45, 147, 238, 105, 150, 76, 5,
	153, 9, 52, 55, 266, 267, 268, 36, 104, 12,
	-171, -166, 60, 148, -55, 269, -123, -116, 152, -116,
	-116, 147, -55, -55, -115, 152, 60, -115, -115, -115,
	-55, 137, -55, 60, 30, 261, 60, 174, 147, 175,
	149, -136, -199, -124, -123, -136, -136, -136, 178, 179,
	178, 179, -136, 251, -111, 244, 54, -136, -130, 11,
	22, -199, 55, -76, -199, -200, 58, -92, 19, 31,
	-40, 20, -130, -88, -89, -40, -87, -2, -27, 38,
	-31, 21, 70, 11, -126, 99, 98, 115, -125, 22,
	-128, 63, 64, 65, -123, 137, -40, -62, 119, 100,
	116, 117, 118, 102, 121, 120, 131, 124, 125, 126,
	127, 128, 129, 130, 122, 123, 134, 108, 109, 110,
	111, 112, 113, 114, -109, -199, -79, -199, 138, 139,
	-65, 29, -65, -65, -65, -65, -65, -189, 74, -2,
	-74, -40, -199, -199, 63, -65, -199, -199, -199, -199,
	-199, -199, -199, -199, -83, -40, -199, -203, -199, -203,
	-203, -203, -203, -203, -203, -203, -199, -199, -199, -199,
	-199, -56, 26, -55, 30, 57, -51, -53, -52, -54,
	44, 48, 50, 45, 46, 47, 51, -134, 22, -43,
	-199, -133, 170, -132, 22, -130, -57, -44, -201, 57,
	11, 55, 57, 57, -99, -101, 182, -100, -105, 251,
	253, 150, 108, -129, -123, -194, 29, 64, 63, 65,
	30, 58, 57, -144, -147, -149, -148, -150, -151, -145,
	-146, 204, 205, 135, 210, 208, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 30, 164, 201, 202,
	203, 97, 223, 224, 225, 226, 227, 228, 229, 230,
	206, 188, 189, 190, 191, 192, 193, 194, 211, 212,
	196, 197, 198, 199, 200, 60, -136, 149, -187, 55,
	60, 100, 60, -55, -55, -136, 150, -55, 23, 54,
	-55, 60, 60, -131, -130, -121, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, 252, -113,
	238, 245, -55, -191, -3, -7, -9, -8, 60, -194,
	64, -191, -143, -144, -192, -130, 9, 119, 57, 18,
	18, 137, 57, -90, 24, 25, -91, -200, -33, -66,
	-123, 66, 69, -32, 45, -55, -40, -40, -72, 75,
	100, 76, 77, -125, 126, -131, -124, -121, 64, -65,
	-73, -76, -79, 74, 119, 116, 117, 118, 102, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -137, 60, -194, 60, -64,
	63, 64, -64, 74, -200, 57, -200, -2, -38, 21,
	-37, -39, -193, 78, 79, 80, 81, 82, 83, 84,
	85, 97, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, -37, -37, -40, -40, -80, -123, -130,
	-80, -37, -31, -81, -82, 104, -80, -200, -37, -38,
	-38, -37, -37, -95, 29, 170, -55, -98, -103, -80,
	-45, -46, -46, -45, -46, 44, 44, 44, 49, 44,
	49, 44, -52, -130, -200, -58, 52, 151, 53, -199,
	-132, -95, 55, -43, -57, -104, -65, -100, 57, 252,
	254, 255, -65, 54, -40, -157, 134, -172, -173, -174,
	-124, -194, 66, -166, -167, -175, 154, 157, 153, -168,
	148, 28, -162, 75, 100, -158, 235, -152, 56, -152,
	-152, -152, -152, -152, -156, 207, -156, -156, -156, 56,
	56, -152, -152, -152, -160, 56, -160, -160, -161, 56,
	-161, -127, 55, -55, -185, 280, -186, 60, -136, 23,
	-136, -117, 145, 142, 143, -182, 141, 232, 207, 71,
	29, 15, 270, 170, 283, 60, 171, -55, -55, -136,
	-112, 11, 119, 57, -200, 57, 40, -40, -40, -40,
	-131, -89, 33, 33, -92, -107, 19, 11, 36, 36,
	-37, 75, 76, 77, 137, -199, -73, -65, -65, -65,
	-65, -36, 165, -36, 99, -200, -40, -200, -200, -37,
	57, -200, -200, 57, 55, 22, 57, 11, 137, 57,
	11, -200, -37, -84, -82, 106, -40, -200, -200, -200,
	-200, -200, -200, -63, 30, 36, -2, -199, 36, -199,
	-42, -59, 57, 11, 12, 108, -49, -48, 54, 55,
	-50, 54, -48, 44, 44, 148, 148, 148, -96, -123,
	-59, -43, -59, -105, -106, 256, 253, 259, 60, -194,
	57, -174, 108, 56, 28, -168, -168, 60, 60, -153,
	29, 75, -159, 236, 66, -156, -156, -157, 30, -157,
	-157, -157, -165, -194, -165, 66, 66, 54, -123, -136,
	-184, -183, -124, -135, -188, 176, 155, 156, 159, 158,
	60, 148, 28, 154, 157, 170, 153, -188, 176, -118,
	-119, 150, 22, 148, 28, 170, -136, -114, 116, 12,
	-130, -130, -144, 22, -130, 41, 137, 34, 35, 34,
	35, -55, -41, 11, 126, -124, -38, -36, -36, 99,
	-65, -65, -200, -39, -142, 135, 204, 164, 203, 199,
	221, 209, 234, 201, 235, 205, -137, -142, -65, -65,
	-124, -65, -65, 277, -87, 107, -40, 105, -97, 54,
	-98, -75, -77, -76, -199, -2, -93, -128, -96, -59,
	-87, -103, -43, -40, -40, -40, 56, -40, -199, -199,
	-199, -200, 57, -87, -59, -190, 284, 253, 257, 258,
	-173, -174, -177, -176, -123, 60, 60, -155, 54, -194,
	66, 67, 75, 260, 72, 58, -157, -157, 60, 135,
	58, 57, 58, 57, 58, 57, -55, 57, 108, -135,
	-123, -135, -123, -55, -135, -123, -194, -40, -191, -59,
	-43, -200, -65, -200, -152, -152, -152, -161, -152, 193,
	-152, 193, -199, -200, -200, -200, 57, 19, -200, 57,
	19, -199, -35, 275, -40, -190, 27, -97, 57, -200,
	-200, -200, 57, 137, -200, -87, -91, -94, -123, -94,
	-94, -94, -133, -123, -91, -190, -37, 58, 57, -152,
	-163, 232, 9, -156, -194, -156, 66, 66, -136, -183,
	-174, 56, 26, -85, 13, -156, 60, 66, -65, -65,
	-65, -65, -65, -200, -194, 28, -77, 36, -2, -199,
	-128, -128, -91, -190, 57, 58, -200, -200, -200, -58,
	-190, -179, -178, 55, 160, 71, -176, -164, 154, 28,
	153, 260, -157, -157, 58, 58, -94, -199, -86, 14,
	16, -200, -200, -200, -200, -200, -34, 119, 280, 9,
	-75, -2, 137, -190, -123, -178, 60, -169, 108, -194,
	-154, 71, 28, 28, 58, -180, -181, 170, -40, -74,
	-200, 278, 51, 281, -98, -200, -128, 66, -194, -187,
	-200, 57, -123, 41, 279, 282, -185, -181, 36, 41,
	172, 280, 173, 281, -199, 282, -65, 169, -200, -200,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 568, 0, 315, 315, 315, 315,
	315, 315, 0, 648, 631, 0, 0, 0, 0, -2,
	289, 290, 0, 292, 293, 881, 881, 881, 881, 881,
	0, 0, 0, 0, 37, 38, 879, 1, 3, 580,
	0, 0, 319, 322, 317, 0, 631, 0, 0, 0,
	69, 0, 0, 866, 0, 867, 629, 629, 629, 649,
	650, 543, 544, 545, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 868, 869, 870, 871,
	872, 873, 874, 875, 0, 0, 632, 0, 627, 0,
	627, 627, 627, 0, 243, 389, 655, 656, 657, 658,
	659, 866, 867, 0, 0, 0, 0, 882, 882, 882,
	882, 0, 0, 882, 0, 275, 264, 266, 267, 268,
	269, 882, 286, 287, 284, 274, 288, 291, 294, 295,
	296, 297, 298, 0, 300, 0, 310, 30, 586, 0,
	0, 568, 32, 0, 315, 320, 321, 325, 323, 324,
	316, 0, 333, 337, 0, 397, 0, 402, -2, -2,
	-2, -2, -2, 0, 441, 442, 443, 444, 538, 0,
	0, 0, 0, 0, 0, 466, 467, 468, 469, 470,
	471, 539, 406, 407, 606, 0, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 528, 0, 500, 500,
	500, 500, 500, 500, 500, 500, 0, 0, 0, 0,
	0, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	0, 0, 348, 350, 351, 352, 371, 0, 373, 0,
	0, 46, 50, 51, 0, 65, 854, 612, 653, -2,
	-2, -2, 0, 0, 654, -2, 782, -2, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	0, 86, 0, 0, 882, 0, 76, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 244, 882, 882, 882, 882, 882, 882, 882,
	882, 253, 883, 884, 653, 254, 255, 256, 882, 882,
	882, 882, 259, 0, 0, 276, 0, 270, 299, 0,
	0, 0, 0, 312, 0, 31, 880, 25, 0, 0,
	581, 582, 0, 569, 570, 573, 580, 30, 322, 0,
	327, 326, 318, 0, 334, 0, 0, 0, 338, 0,
	344, 340, 341, 342, 343, 0, 400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 427, 428,
	429, 430, 431, 432, 403, 0, 419, 0, 0, 0,
	460, 558, 461, 462, 463, 464, 465, 557, 559, 30,
	0, 439, 0, 329, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 529, 0, 492, 0, 493,
	494, 495, 496, 497, 498, 499, 0, 329, 329, 0,
	0, 48, 0, 388, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 380, 0, 0, 0, 0, 372, 0,
	0, 391, 827, 374, 0, 376, -2, 0, 0, 0,
	44, 45, 0, 0, 52, 53, 0, 55, 56, 0,
	0, 0, 0, 173, 622, 623, 624, 543, 876, 878,
	620, 202, 0, 156, 152, 93, 94, 95, 96, 145,
	99, 145, 145, 145, 145, 145, 170, 170, 170, 170,
	128, 129, 130, 131, 132, 0, 0, 114, 145, 145,
	145, 118, 135, 136, 137, 138, 139, 140, 141, 142,
	97, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	147, 147, 147, 149, 149, 651, 71, 0, 79, 0,
	882, 0, 882, 84, 0, 218, 0, 237, 628, 0,
	882, 240, 241, 390, 660, 661, 245, 246, 247, 248,
	249, 250, 251, 252, 257, 262, 258, 263, 260, 277,
	271, 272, 265, 301, 304, 305, 306, 307, 308, 309,
	877, 302, 0, 90, 311, 313, 587, 0, 0, 0,
	0, 0, 0, 572, 574, 575, 586, 33, 325, 0,
	561, 0, 0, 0, 328, 28, 398, 399, 401, 420,
	0, 422, 424, 339, 335, 0, 541, -2, -2, 408,
	409, 435, 436, 437, 0, 0, 0, 0, 0, 433,
	433, 415, 0, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 459, 512, 513, 0, 457,
	546, 547, 458, 560, 438, 0, 605, 30, 0, 0,
	330, 331, 473, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 0, 0, 0, 0, 0, 540, 0,
	0, 0, 0, 535, 532, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 387, 395, 609, 0,
	349, 367, 369, 0, 364, 378, 379, 381, 0, 383,
	0, 385, 386, 353, 354, 355, 0, 0, 0, 0,
	375, 395, 0, 395, 47, 613, 615, 54, 0, 0,
	59, 60, 614, 616, 617, 618, 0, 85, 203, 205,
	208, 209, 210, 87, 88, 0, 0, 0, 0, 0,
	197, 198, 159, 157, 0, 154, 153, 98, 0, 170,
	170, 121, 122, 123, 173, 0, 173, 173, 173, 0,
	0, 115, 116, 117, 109, 0, 110, 111, 112, 0,
	113, 0, 0, 882, 73, 0, 77, 78, 74, 630,
	75, 881, 0, 0, 643, 219, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 0, 236, 882, 239,
	280, 0, 0, 0, 0, 0, 0, 583, 584, 585,
	0, 571, 0, 0, 26, 0, 625, 626, 562, 563,
	345, 421, 423, 425, 0, 329, 410, 433, 433, 416,
	0, 411, 0, 412, 0, 405, 440, -2, 474, 0,
	0, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 533, 0, 0, 491, 502, 503,
	504, 505, 506, 599, 0, 0, -2, 0, 36, 0,
	395, 568, 0, 0, 0, 0, 361, 368, 0, 0,
	362, 0, 363, 382, 384, 0, 0, 0, 0, 359,
	568, 395, 607, 57, 58, 0, 0, 64, 174, 175,
	0, 206, 0, 0, 192, 0, 0, 195, 196, 166,
	0, 158, 92, 155, 0, 173, 173, 124, 0, 125,
	126, 127, 0, 143, 0, 0, 0, 0, 652, 72,
	80, 81, 0, 211, 881, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 881, 0, 0,
	881, 644, 645, 646, 647, 0, 238, 261, 0, 0,
	278, 279, 91, 0, 314, 588, 0, 578, 579, 576,
	577, 27, 395, 0, 336, 542, 0, 413, 414, 0,
	434, 417, 475, 332, 0, 145, 145, 517, 145, 149,
	520, 145, 522, 145, 525, 0, 0, 0, 0, 0,
	541, 0, 0, 0, 530, 490, 536, 0, 607, 0,
	599, 589, 601, 603, 0, 30, 0, 595, 0, 568,
	580, 610, 347, 396, 611, 365, 0, 370, 0, 0,
	0, 373, 0, 580, 607, 43, 0, 61, 62, 63,
	204, 207, 0, 199, 145, 193, 194, 168, 0, 160,
	161, 162, 163, 164, 165, 146, 119, 120, 171, 172,
	170, 0, 170, 0, 150, 0, 882, 0, 0, 212,
	0, 213, 215, 216, 217, 0, 281, 282, 303, 564,
	346, 476, 418, 479, 514, 170, 518, 519, 521, 523,
	524, 526, 0, 481, 480, 482, 0, 0, 485, 0,
	0, 0, 0, 0, 534, 34, 0, 35, 0, 604,
	-2, 0, 0, 0, 49, 580, 607, 0, 357, 0,
	0, 0, 391, 360, 607, 42, 608, 184, 0, 201,
	176, 169, 0, 173, 144, 173, 0, 0, 70, 82,
	83, 0, 0, 566, 0, 515, 516, 0, 0, 0,
	0, 0, 507, 489, 531, 0, 602, 0, -2, 0,
	597, 596, 607, 40, 0, 366, 392, 393, 394, 356,
	41, 183, 185, 0, 190, 0, 200, 181, 0, 178,
	180, 167, 133, 134, 148, 151, 0, 0, 29, 0,
	0, 527, 483, 484, 486, 487, 0, 0, 0, 0,
	592, 30, 0, 39, 358, 186, 187, 0, 191, 189,
	89, 0, 177, 179, 76, 0, 232, 0, 567, 565,
	488, 0, 0, 0, 600, -2, 598, 188, 182, 79,
	231, 0, 0, 508, 0, 511, 214, 233, 0, 509,
	0, 0, 0, 0, 0, 510, 0, 0, 234, 235,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 129, 121, 3,
	56, 58, 126, 124, 57, 125, 137, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 285,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:374
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:465
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support FROM TableExpr with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit, Returning: yyDollar[10].returning}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:474
		{
			if yylex.(*Tokenizer).IsMySQL() && len(yyDollar[9].returning) != 0 {
				yylex.Error("MySQL/MariaDB dialect doesn't support returning with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{yyDollar[4].aliasedTableName}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableExprs, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), Returning: yyDollar[8].returning}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableExprs, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), Returning: yyDollar[7].returning}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].aliasedTableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].aliasedTableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = LocalStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:615
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:645
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:660
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:688
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:717
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:967
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:985
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:993
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:997
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1024
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1072
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1090
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1103
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
			yyVAL.optVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = yyDollar[1].str
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1284
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1296
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1309
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1319
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1324
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1368
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1372
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1384
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1392
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1397
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1495
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.str = "extended "
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1569
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1573
		{
			yyVAL.str = "full "
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1593
		{
			yyVAL.showFilter = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = LocalStr
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = SessionStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = GlobalStr
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Begin{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Begin{}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Commit{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Rollback{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &OtherRead{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &OtherRead{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &OtherRead{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1697
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1701
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1715
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `EXECUTE prepared_statement_name (parameter_values)` statement")
				return 1
			}
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Values: yyDollar[3].valTuple}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1764
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1769
		{
			setAllowComments(yylex, true)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.bytes2 = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = UnionStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = UnionAllStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = UnionDistinctStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = SQLCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.str = DistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = StraightJoinHint
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1833
		{
			yyVAL.selectExprs = nil
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1865
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1878
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1908
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1952
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1968
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1993
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2015
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2025
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2109
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2118
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2122
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2126
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2135
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2171
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2175
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2207
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2219
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.str = IsNullStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2253
		{
			yyVAL.str = IsNotNullStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = IsTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = IsNotTrueStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = IsFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = IsNotFalseStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.str = EqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.str = LessThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = GreaterThanStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = LessEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = GreaterEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = NotEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2436
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 489:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2655
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.str = BooleanModeStr
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 510:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = QueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2755
		{
			yyVAL.str = string("")
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2759
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = nil
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2817
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &NullVal{}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &Default{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.exprs = nil
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2937
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2951
		{
			yyVAL.orderBy = nil
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2965
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.str = AscScr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.str = DescScr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.str = DescNullsLastScr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3000
		{
			yyVAL.str = AscNullsLastScr
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3005
		{
			yyVAL.limit = nil
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3021
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow 'LIMIT offset, limit' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3029
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3033
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3042
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.str = ForUpdateStr
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.str = ShareModeStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3063
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3071
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3076
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3080
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3084
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3099
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3103
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3108
		{
			yyVAL.updateExprs = nil
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3112
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3122
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3138
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.returning = nil
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3160
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3203
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3211
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.bytes = []byte("charset")
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = &Default{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3242
		{
			yyVAL.byt = 0
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.byt = 1
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3252
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.str = IgnoreStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3292
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3299
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3301
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3603
		{
			decNesting(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3608
		{
			forceEOF(yylex)
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3613
		{
			forceEOF(yylex)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			forceEOF(yylex)
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3621
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
