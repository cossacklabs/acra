// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

// setErrorVerbose configures format of ErrorMessages from parser. If false then only "syntax error" will be shown.
// Default is false
func SetSQLParserErrorVerboseLevel(verbose bool) {
	yyErrorVerbose = verbose
}

// setDebugLevel configures debug level of log messages from parser. Default is 0
func setDebugLevel(level int) {
	if level < 0 {
		panic("unsupported debug level for sqlparser")
	}
	yyDebug = level
}

//line sql.y:68
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const ILIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const JSON_EXTRACT_OP = 57463
const JSON_UNQUOTE_EXTRACT_OP = 57464
const CREATE = 57465
const ALTER = 57466
const DROP = 57467
const RENAME = 57468
const ANALYZE = 57469
const ADD = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const CONSTRAINT = 57481
const SPATIAL = 57482
const FULLTEXT = 57483
const FOREIGN = 57484
const KEY_BLOCK_SIZE = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const MAXVALUE = 57494
const PARTITION = 57495
const REORGANIZE = 57496
const LESS = 57497
const THAN = 57498
const PROCEDURE = 57499
const TRIGGER = 57500
const VINDEX = 57501
const VINDEXES = 57502
const STATUS = 57503
const VARIABLES = 57504
const BEGIN = 57505
const START = 57506
const TRANSACTION = 57507
const COMMIT = 57508
const ROLLBACK = 57509
const DEALLOCATE = 57510
const PREPARE = 57511
const EXECUTE = 57512
const BIT = 57513
const TINYINT = 57514
const SMALLINT = 57515
const MEDIUMINT = 57516
const INT = 57517
const INTEGER = 57518
const BIGINT = 57519
const INTNUM = 57520
const REAL = 57521
const DOUBLE = 57522
const FLOAT_TYPE = 57523
const DECIMAL = 57524
const NUMERIC = 57525
const TIME = 57526
const TIMESTAMP = 57527
const DATETIME = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const BLOB = 57539
const TINYBLOB = 57540
const MEDIUMBLOB = 57541
const LONGBLOB = 57542
const JSON = 57543
const ENUM = 57544
const GEOMETRY = 57545
const POINT = 57546
const LINESTRING = 57547
const POLYGON = 57548
const GEOMETRYCOLLECTION = 57549
const MULTIPOINT = 57550
const MULTILINESTRING = 57551
const MULTIPOLYGON = 57552
const NULLX = 57553
const AUTO_INCREMENT = 57554
const APPROXNUM = 57555
const SIGNED = 57556
const UNSIGNED = 57557
const ZEROFILL = 57558
const DATABASES = 57559
const TABLES = 57560
const VITESS_KEYSPACES = 57561
const VITESS_SHARDS = 57562
const VITESS_TABLETS = 57563
const VSCHEMA_TABLES = 57564
const EXTENDED = 57565
const FULL = 57566
const PROCESSLIST = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const LOCAL = 57572
const ISOLATION = 57573
const LEVEL = 57574
const READ = 57575
const WRITE = 57576
const ONLY = 57577
const REPEATABLE = 57578
const COMMITTED = 57579
const UNCOMMITTED = 57580
const SERIALIZABLE = 57581
const CURRENT_TIMESTAMP = 57582
const DATABASE = 57583
const CURRENT_DATE = 57584
const CURRENT_TIME = 57585
const LOCALTIME = 57586
const LOCALTIMESTAMP = 57587
const UTC_DATE = 57588
const UTC_TIME = 57589
const UTC_TIMESTAMP = 57590
const REPLACE = 57591
const CONVERT = 57592
const CAST = 57593
const SUBSTR = 57594
const SUBSTRING = 57595
const GROUP_CONCAT = 57596
const SEPARATOR = 57597
const MATCH = 57598
const AGAINST = 57599
const BOOLEAN = 57600
const LANGUAGE = 57601
const WITH = 57602
const QUERY = 57603
const EXPANSION = 57604
const UNUSED = 57605
const RETURNING = 57606

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"ILIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	178, 286,
	179, 286,
	-2, 274,
	-1, 255,
	74, 559,
	100, 559,
	102, 559,
	108, 559,
	109, 559,
	110, 559,
	111, 559,
	112, 559,
	113, 559,
	114, 559,
	116, 559,
	117, 559,
	118, 559,
	119, 559,
	120, 559,
	121, 559,
	122, 559,
	123, 559,
	124, 559,
	125, 559,
	126, 559,
	127, 559,
	128, 559,
	129, 559,
	130, 559,
	131, 559,
	134, 559,
	-2, 405,
	-1, 256,
	56, 544,
	74, 548,
	137, 656,
	138, 544,
	139, 544,
	-2, 538,
	-1, 257,
	137, 658,
	-2, 547,
	-1, 258,
	137, 659,
	-2, 545,
	-1, 259,
	137, 660,
	-2, 546,
	-1, 336,
	108, 812,
	-2, 66,
	-1, 337,
	108, 840,
	-2, 67,
	-1, 338,
	108, 800,
	-2, 68,
	-1, 342,
	108, 784,
	150, 784,
	-2, 620,
	-1, 344,
	108, 822,
	150, 822,
	-2, 622,
	-1, 571,
	74, 547,
	137, 658,
	-2, 473,
	-1, 623,
	55, 46,
	57, 46,
	-2, 48,
	-1, 783,
	137, 662,
	-2, 655,
	-1, 784,
	137, 656,
	-2, 544,
	-1, 1022,
	5, 31,
	-2, 439,
	-1, 1051,
	5, 30,
	-2, 591,
	-1, 1295,
	5, 31,
	-2, 592,
	-1, 1343,
	5, 30,
	-2, 594,
	-1, 1410,
	5, 31,
	-2, 595,
}

const yyPrivate = 57344

const yyLast = 12046

var yyAct = [...]int16{
	282, 53, 1401, 959, 702, 517, 265, 567, 1357, 1196,
	873, 281, 917, 566, 3, 1220, 1228, 1302, 891, 1197,
	1116, 911, 235, 953, 1193, 618, 1073, 915, 914, 59,
	225, 874, 1169, 24, 341, 811, 939, 1119, 747, 1107,
	635, 1016, 1062, 925, 616, 737, 824, 860, 827, 494,
	501, 949, 786, 438, 53, 322, 620, 869, 605, 278,
	320, 244, 240, 319, 515, 826, 933, 234, 324, 334,
	507, 330, 634, 995, 329, 327, 58, 226, 227, 228,
	229, 1221, 1430, 1420, 1428, 1408, 1426, 960, 1056, 1419,
	1407, 584, 1188, 1288, 241, 239, 54, 29, 30, 442,
	189, 185, 186, 187, 1366, 1081, 1223, 1224, 1080, 1222,
	468, 1082, 318, 636, 248, 637, 645, 744, 646, 1235,
	1236, 976, 906, 907, 328, 1239, 905, 732, 1237, 463,
	480, 734, 63, 482, 1098, 975, 932, 1316, 735, 940,
	1276, 1274, 451, 231, 633, 224, 477, 478, 742, 475,
	476, 645, 744, 646, 1427, 254, 1425, 1402, 1140, 871,
	65, 66, 67, 68, 69, 1331, 980, 452, 870, 445,
	183, 892, 894, 710, 182, 1358, 183, 974, 1382, 532,
	531, 541, 542, 534, 535, 536, 537, 538, 539, 540,
	533, 1360, 638, 543, 1364, 927, 1137, 701, 1072, 1071,
	1070, 448, 1139, 927, 440, 469, 469, 469, 469, 200,
	184, 469, 188, 1387, 927, 1298, 465, 1151, 467, 469,
	536, 537, 538, 539, 540, 533, 264, 1092, 543, 1033,
	1127, 555, 556, 488, 491, 1009, 757, 522, 458, 533,
	986, 53, 543, 464, 466, 490, 439, 971, 968, 969,
	912, 967, 543, 1243, 504, 753, 552, 794, 513, 512,
	1144, 554, 1125, 512, 514, 1192, 1393, 1253, 503, 230,
	893, 791, 792, 793, 790, 514, 978, 981, 1060, 514,
	1359, 639, 705, 569, 570, 1190, 573, 574, 575, 576,
	577, 578, 579, 580, 323, 583, 585, 585, 585, 585,
	585, 585, 585, 585, 593, 594, 595, 596, 597, 871,
	1238, 259, 940, 973, 1406, 926, 472, 473, 474, 1365,
	1363, 479, 1138, 926, 1136, 617, 861, 462, 1244, 484,
	454, 455, 456, 1096, 926, 972, 1383, 929, 565, 924,
	922, 819, 861, 923, 1040, 83, 1396, 1170, 987, 197,
	1126, 56, 197, 642, 55, 1131, 1128, 1121, 1122, 1129,
	1124, 1123, 930, 197, 1143, 1006, 1007, 1008, 509, 789,
	444, 1412, 1130, 977, 505, 1332, 1172, 1322, 1133, 197,
	197, 83, 623, 760, 761, 197, 979, 83, 586, 587,
	588, 589, 590, 591, 592, 775, 777, 778, 1321, 1111,
	470, 1110, 624, 632, 1030, 1099, 631, 1391, 755, 1231,
	1230, 1174, 1029, 1178, 1028, 1173, 1171, 1180, 181, 493,
	776, 1176, 557, 559, 560, 561, 562, 563, 513, 512,
	1175, 534, 535, 536, 537, 538, 539, 540, 533, 1093,
	572, 543, 469, 1177, 1179, 514, 962, 754, 446, 447,
	469, 645, 744, 646, 814, 513, 512, 513, 512, 716,
	715, 469, 469, 469, 469, 469, 469, 469, 469, 706,
	339, 704, 514, 699, 514, 460, 469, 469, 469, 469,
	513, 512, 453, 439, 233, 317, 1370, 553, 513, 512,
	1416, 493, 1369, 719, 197, 1194, 197, 514, 1057, 743,
	743, 1057, 197, 812, 1240, 514, 645, 744, 646, 898,
	1083, 626, 197, 645, 744, 646, 83, 83, 83, 83,
	738, 738, 83, 1349, 1399, 821, 762, 1349, 493, 1293,
	83, 1025, 717, 745, 1349, 1350, 602, 787, 1313, 1312,
	1217, 493, 197, 607, 610, 611, 612, 608, 1252, 609,
	613, 323, 700, 1063, 1064, 53, 813, 783, 1297, 493,
	709, 1248, 83, 1250, 1249, 1246, 1247, 764, 1246, 1245,
	569, 720, 721, 722, 723, 724, 725, 726, 727, 1025,
	493, 779, 26, 823, 853, 856, 728, 729, 730, 731,
	862, 988, 493, 602, 493, 601, 781, 26, 1058, 1059,
	821, 493, 1085, 324, 324, 324, 324, 324, 875, 649,
	648, 627, 1342, 1059, 60, 815, 818, 904, 617, 990,
	895, 1049, 602, 630, 629, 1158, 324, 1050, 1035, 197,
	1032, 823, 56, 492, 283, 758, 197, 197, 197, 849,
	850, 865, 866, 83, 1057, 857, 56, 56, 489, 56,
	1326, 858, 83, 934, 954, 628, 1025, 626, 602, 864,
	1211, 26, 867, 868, 877, 878, 876, 880, 80, 879,
	899, 1025, 888, 241, 1034, 703, 1031, 1088, 896, 950,
	785, 897, 900, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 901,
	941, 942, 943, 919, 335, 469, 903, 469, 945, 486,
	443, 56, 1063, 1064, 957, 469, 250, 944, 71, 1233,
	487, 1424, 955, 56, 1194, 935, 936, 937, 938, 1112,
	1066, 713, 339, 483, 885, 883, 1127, 770, 1069, 886,
	884, 946, 947, 948, 1068, 882, 881, 951, 952, 245,
	246, 1418, 788, 83, 56, 887, 1150, 611, 612, 197,
	197, 83, 991, 197, 508, 1423, 197, 1053, 1125, 1004,
	197, 1003, 83, 83, 83, 83, 83, 83, 83, 83,
	998, 506, 997, 1010, 1154, 1155, 902, 83, 83, 83,
	83, 495, 783, 1103, 908, 197, 1152, 1153, 647, 461,
	749, 197, 787, 496, 607, 610, 611, 612, 608, 996,
	609, 613, 999, 1095, 1398, 963, 1397, 965, 83, 1340,
	1089, 1291, 197, 1327, 964, 984, 712, 1148, 83, 323,
	323, 323, 323, 323, 615, 1005, 242, 243, 1018, 471,
	471, 471, 471, 1011, 323, 471, 508, 1002, 756, 236,
	1375, 237, 323, 471, 60, 1001, 1126, 1374, 1329, 1059,
	510, 1131, 1128, 1121, 1122, 1129, 1124, 1123, 1384, 1317,
	1052, 752, 1054, 62, 740, 7, 741, 6, 1130, 739,
	5, 64, 625, 1051, 1120, 521, 57, 1, 273, 272,
	828, 1024, 750, 564, 961, 1115, 970, 1400, 1356, 324,
	1227, 921, 913, 437, 70, 1392, 920, 1039, 1362, 1315,
	928, 197, 1097, 931, 197, 197, 197, 197, 197, 1232,
	1395, 1094, 1067, 782, 1037, 1084, 197, 655, 654, 197,
	652, 653, 651, 197, 657, 656, 650, 197, 197, 746,
	209, 83, 1086, 1076, 331, 1078, 208, 1012, 1013, 1014,
	1015, 332, 614, 497, 502, 640, 956, 1108, 1108, 469,
	83, 1102, 511, 1104, 1105, 1106, 335, 1090, 1091, 72,
	523, 1135, 1100, 1101, 1134, 641, 966, 1142, 733, 985,
	481, 212, 551, 1000, 469, 1109, 1075, 1079, 1077, 340,
	1201, 759, 500, 1373, 1328, 1038, 581, 1118, 859, 568,
	263, 325, 774, 277, 274, 276, 1132, 275, 261, 765,
	582, 1048, 524, 197, 262, 252, 83, 788, 83, 598,
	606, 604, 197, 603, 1065, 197, 83, 1147, 1061, 321,
	339, 1055, 1157, 1287, 1381, 769, 28, 61, 247, 191,
	23, 22, 813, 21, 19, 18, 17, 20, 16, 916,
	15, 1199, 14, 53, 1162, 1163, 875, 1161, 1202, 324,
	1195, 32, 1198, 1182, 875, 1181, 1200, 1189, 783, 1114,
	13, 1213, 1214, 1215, 1168, 441, 471, 12, 11, 10,
	9, 1203, 8, 4, 471, 238, 1205, 25, 2, 1206,
	0, 0, 0, 0, 1141, 471, 471, 471, 471, 471,
	471, 471, 471, 1207, 0, 1218, 0, 0, 1234, 0,
	471, 471, 471, 471, 1225, 1226, 0, 0, 0, 0,
	0, 0, 1241, 1242, 0, 323, 532, 531, 541, 542,
	534, 535, 536, 537, 538, 539, 540, 533, 763, 0,
	543, 766, 0, 0, 1204, 0, 0, 0, 0, 0,
	1254, 521, 0, 0, 0, 0, 1261, 471, 782, 324,
	0, 743, 0, 1256, 0, 1219, 1259, 0, 0, 0,
	0, 1017, 0, 1165, 0, 1166, 0, 0, 0, 0,
	0, 1277, 738, 0, 449, 0, 450, 1183, 1184, 1286,
	1186, 1187, 457, 0, 1263, 0, 0, 0, 1272, 0,
	820, 822, 459, 1265, 0, 0, 0, 83, 568, 1290,
	197, 0, 854, 854, 0, 0, 0, 0, 854, 863,
	1292, 0, 0, 0, 0, 0, 83, 0, 1301, 772,
	773, 1304, 1305, 1306, 1300, 1310, 854, 1269, 1270, 0,
	1271, 1309, 1307, 1273, 0, 1275, 1264, 0, 0, 0,
	890, 0, 469, 1086, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 83,
	83, 0, 83, 1324, 0, 0, 0, 0, 0, 0,
	0, 1325, 1318, 471, 1320, 323, 568, 1311, 0, 0,
	0, 0, 851, 852, 1199, 83, 1314, 1344, 197, 197,
	749, 1339, 197, 1345, 1346, 1198, 0, 1330, 0, 0,
	1343, 0, 197, 1341, 0, 916, 0, 1348, 0, 600,
	1267, 83, 0, 1347, 0, 1355, 1354, 0, 1372, 0,
	1361, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	1367, 471, 1368, 1199, 1371, 53, 0, 0, 0, 471,
	0, 0, 1385, 0, 1198, 0, 910, 0, 1386, 0,
	0, 1117, 1323, 1388, 83, 1390, 83, 0, 0, 0,
	197, 0, 0, 1394, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 1404, 0, 323, 0, 0, 0, 0,
	0, 875, 471, 1411, 0, 1409, 0, 83, 0, 83,
	83, 0, 0, 0, 1414, 0, 0, 0, 0, 1413,
	1160, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 197, 0, 0, 0, 1429, 0,
	0, 0, 83, 0, 1185, 0, 0, 1333, 1334, 0,
	1335, 1336, 1337, 0, 0, 83, 197, 0, 1020, 707,
	708, 0, 83, 711, 0, 0, 714, 1022, 1023, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	197, 992, 993, 994, 0, 502, 558, 0, 0, 0,
	0, 0, 0, 1026, 1027, 736, 916, 0, 916, 0,
	0, 1036, 0, 0, 0, 0, 1042, 0, 1043, 1044,
	1045, 1046, 1047, 499, 0, 0, 0, 0, 315, 308,
	816, 817, 771, 310, 311, 312, 313, 0, 0, 309,
	316, 0, 314, 83, 0, 83, 83, 83, 197, 83,
	1074, 206, 0, 0, 0, 0, 0, 83, 1021, 0,
	0, 192, 0, 0, 223, 0, 0, 0, 0, 471,
	0, 0, 1160, 0, 0, 232, 0, 0, 0, 218,
	0, 0, 0, 83, 83, 83, 0, 0, 0, 251,
	0, 192, 192, 0, 0, 0, 0, 192, 1041, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1113, 471, 0, 471, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 83,
	83, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 83, 916, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 83, 203,
	0, 0, 0, 0, 471, 0, 210, 205, 0, 0,
	0, 0, 0, 1117, 916, 0, 0, 0, 1167, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 207, 0, 0, 213, 0, 0, 0,
	0, 211, 0, 0, 854, 0, 192, 521, 192, 1074,
	0, 0, 854, 0, 192, 0, 0, 0, 0, 83,
	0, 0, 0, 958, 192, 0, 202, 1216, 0, 0,
	0, 0, 982, 0, 83, 983, 0, 0, 0, 0,
	471, 0, 471, 1229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 485, 214, 215, 216, 217, 222,
	0, 0, 0, 0, 220, 219, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 1255, 0, 1191, 541, 542,
	534, 535, 536, 537, 538, 539, 540, 533, 1257, 0,
	543, 0, 0, 0, 0, 1260, 1208, 1209, 0, 0,
	1210, 0, 0, 1212, 0, 0, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 1284,
	493, 0, 0, 1268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 1279, 1280, 0, 0,
	1283, 192, 0, 0, 0, 0, 1281, 493, 192, 622,
	192, 0, 0, 1294, 1295, 1296, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 1303, 1303,
	1303, 0, 1308, 0, 0, 0, 0, 0, 0, 0,
	471, 1262, 532, 531, 541, 542, 534, 535, 536, 537,
	538, 539, 540, 533, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 471, 471, 532,
	531, 541, 542, 534, 535, 536, 537, 538, 539, 540,
	533, 0, 0, 543, 0, 0, 0, 0, 0, 1289,
	493, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 521, 0, 0, 0, 0, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 1285, 1229, 0,
	0, 192, 192, 0, 0, 192, 0, 0, 192, 0,
	0, 1303, 718, 0, 0, 0, 1376, 1377, 1378, 1379,
	1380, 0, 532, 531, 541, 542, 534, 535, 536, 537,
	538, 539, 540, 533, 1389, 0, 543, 192, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 26, 27, 54,
	29, 30, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 1405, 45, 0, 0, 854,
	1410, 31, 521, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 1415, 0, 1282, 1417, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 56, 532, 531,
	541, 542, 534, 535, 536, 537, 538, 539, 540, 533,
	0, 0, 543, 0, 0, 1433, 1434, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 0, 251, 251, 0,
	0, 855, 855, 251, 0, 0, 0, 855, 0, 0,
	0, 1403, 568, 0, 0, 0, 0, 251, 251, 251,
	251, 251, 0, 192, 0, 855, 192, 192, 192, 192,
	192, 0, 0, 0, 1251, 0, 0, 672, 889, 0,
	0, 192, 0, 0, 0, 622, 0, 0, 0, 192,
	192, 33, 34, 36, 35, 38, 1258, 532, 531, 541,
	542, 534, 535, 536, 537, 538, 539, 540, 533, 0,
	0, 543, 39, 46, 47, 0, 0, 48, 49, 37,
	531, 541, 542, 534, 535, 536, 537, 538, 539, 540,
	533, 41, 42, 543, 43, 44, 50, 51, 52, 0,
	0, 0, 0, 0, 677, 134, 0, 0, 0, 516,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 192, 0, 151, 127, 0,
	0, 0, 0, 0, 192, 0, 0, 192, 1164, 0,
	0, 0, 660, 0, 0, 0, 0, 82, 0, 0,
	518, 519, 520, 0, 0, 0, 0, 0, 94, 532,
	531, 541, 542, 534, 535, 536, 537, 538, 539, 540,
	533, 673, 0, 543, 0, 0, 0, 55, 0, 0,
	0, 718, 0, 0, 0, 513, 512, 0, 0, 0,
	0, 0, 0, 251, 0, 687, 688, 689, 690, 691,
	692, 693, 514, 694, 695, 696, 697, 698, 674, 675,
	676, 658, 659, 686, 0, 661, 0, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 678, 679, 680,
	681, 682, 683, 684, 685, 0, 198, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 251,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 199, 173, 156, 172, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 251, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 171, 90, 92, 170, 132, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	180, 0, 192, 174, 175, 176, 177, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 179, 135,
	147, 96, 167, 150, 532, 531, 541, 542, 534, 535,
	536, 537, 538, 539, 540, 533, 0, 0, 543, 0,
	526, 84, 530, 116, 178, 142, 103, 169, 544, 545,
	546, 547, 548, 549, 550, 0, 527, 528, 529, 525,
	532, 531, 541, 542, 534, 535, 536, 537, 538, 539,
	540, 533, 0, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 1146, 0, 0, 1149, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 0, 532, 531, 541, 542,
	534, 535, 536, 537, 538, 539, 540, 533, 0, 251,
	543, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 0, 0,
	0, 855, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 426, 416, 0, 387,
	428, 365, 379, 436, 380, 381, 409, 351, 396, 134,
	377, 0, 368, 347, 374, 348, 366, 389, 101, 392,
	364, 418, 399, 115, 0, 0, 192, 434, 117, 404,
	0, 151, 127, 0, 0, 391, 420, 393, 414, 386,
	410, 356, 403, 429, 378, 407, 430, 0, 192, 0,
	388, 82, 0, 0, 645, 644, 646, 918, 0, 0,
	0, 0, 94, 0, 0, 0, 406, 425, 376, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 408,
	346, 405, 0, 349, 352, 435, 423, 371, 372, 1087,
	0, 0, 0, 0, 0, 0, 390, 394, 395, 411,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 369,
	0, 402, 0, 0, 0, 353, 350, 0, 0, 0,
	622, 355, 0, 370, 412, 251, 345, 415, 421, 385,
	198, 424, 383, 382, 427, 140, 0, 0, 154, 106,
	105, 114, 419, 367, 375, 97, 373, 146, 136, 166,
	401, 137, 145, 118, 158, 141, 165, 199, 173, 156,
	172, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 171, 90, 92, 170,
	132, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 180, 363, 422, 174, 175, 176,
	177, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 179, 135, 147, 96, 167, 150, 359, 362,
	357, 358, 397, 398, 431, 432, 433, 413, 354, 0,
	360, 361, 0, 417, 400, 84, 0, 116, 178, 142,
	103, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 416, 0, 387, 428, 365, 379,
	436, 380, 381, 409, 351, 396, 134, 377, 855, 368,
	347, 374, 348, 366, 389, 101, 392, 364, 418, 399,
	115, 0, 0, 0, 434, 117, 404, 0, 151, 127,
	0, 0, 391, 420, 393, 414, 386, 410, 356, 403,
	429, 378, 407, 430, 0, 0, 0, 388, 82, 0,
	0, 645, 644, 646, 918, 0, 0, 0, 0, 94,
	0, 0, 0, 406, 425, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 346, 405, 0,
	349, 352, 435, 423, 371, 372, 0, 0, 0, 0,
	0, 0, 0, 390, 394, 395, 411, 384, 0, 0,
	0, 0, 0, 0, 0, 0, 369, 0, 402, 0,
	0, 0, 353, 350, 0, 0, 0, 0, 355, 0,
	370, 412, 0, 345, 415, 421, 385, 198, 424, 383,
	382, 427, 140, 0, 0, 154, 106, 105, 114, 419,
	367, 375, 97, 373, 146, 136, 166, 401, 137, 145,
	118, 158, 141, 165, 199, 173, 156, 172, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 171, 90, 92, 170, 132, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 180, 363, 422, 174, 175, 176, 177, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 179,
	135, 147, 96, 167, 150, 359, 362, 357, 358, 397,
	398, 431, 432, 433, 413, 354, 0, 360, 361, 0,
	417, 400, 84, 0, 116, 178, 142, 103, 169, 426,
	416, 0, 387, 428, 365, 379, 436, 380, 381, 409,
	351, 396, 134, 377, 0, 368, 347, 374, 348, 366,
	389, 101, 392, 364, 418, 399, 115, 0, 0, 0,
	434, 117, 404, 0, 151, 127, 0, 0, 391, 420,
	393, 414, 386, 410, 356, 403, 429, 378, 407, 430,
	0, 0, 0, 388, 258, 0, 0, 195, 784, 194,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 406,
	425, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 346, 405, 0, 349, 352, 435, 423,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 390,
	394, 395, 411, 384, 0, 0, 0, 0, 0, 0,
	780, 0, 369, 0, 402, 0, 0, 0, 353, 350,
	0, 0, 0, 0, 355, 0, 370, 412, 0, 345,
	415, 421, 385, 198, 424, 383, 382, 427, 140, 0,
	0, 154, 106, 105, 114, 419, 367, 375, 97, 373,
	146, 136, 166, 401, 137, 145, 118, 158, 141, 165,
	199, 173, 156, 172, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 171,
	90, 92, 170, 132, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 180, 363, 422,
	174, 175, 176, 177, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 179, 135, 147, 96, 167,
	150, 359, 362, 357, 358, 397, 398, 431, 432, 433,
	413, 354, 0, 360, 361, 0, 417, 400, 84, 0,
	116, 178, 142, 103, 169, 426, 416, 0, 387, 428,
	365, 379, 436, 380, 381, 409, 351, 396, 134, 377,
	0, 368, 347, 374, 348, 366, 389, 101, 392, 364,
	418, 399, 115, 0, 0, 0, 434, 117, 404, 0,
	151, 127, 0, 0, 391, 420, 393, 414, 386, 410,
	356, 403, 429, 378, 407, 430, 0, 0, 0, 388,
	258, 0, 0, 195, 784, 194, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 406, 425, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 408, 346,
	405, 0, 349, 352, 435, 423, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 390, 394, 395, 411, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 0,
	402, 0, 0, 0, 353, 350, 0, 0, 0, 0,
	355, 0, 370, 412, 0, 345, 415, 421, 385, 198,
	424, 383, 382, 427, 140, 0, 0, 154, 106, 105,
	114, 419, 367, 375, 97, 373, 146, 136, 166, 401,
	137, 145, 118, 158, 141, 165, 199, 173, 156, 172,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 171, 90, 92, 170, 132,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 180, 363, 422, 174, 175, 176, 177,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 179, 135, 147, 96, 167, 150, 359, 362, 357,
	358, 397, 398, 431, 432, 433, 413, 354, 0, 360,
	361, 0, 417, 400, 84, 0, 116, 178, 142, 103,
	169, 426, 416, 0, 387, 428, 365, 379, 436, 380,
	381, 409, 351, 396, 134, 377, 0, 368, 347, 374,
	348, 366, 389, 101, 392, 364, 418, 399, 115, 0,
	0, 0, 434, 117, 404, 0, 151, 127, 0, 0,
	391, 420, 393, 414, 386, 410, 356, 403, 429, 378,
	407, 430, 0, 0, 0, 388, 196, 0, 0, 195,
	193, 194, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 406, 425, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 346, 405, 0, 349, 352,
	435, 423, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 390, 394, 395, 411, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 369, 0, 402, 0, 0, 0,
	353, 350, 0, 0, 0, 0, 355, 0, 370, 412,
	0, 345, 415, 421, 385, 198, 424, 383, 382, 427,
	140, 0, 0, 154, 106, 105, 114, 419, 367, 375,
	97, 373, 146, 136, 166, 401, 137, 145, 118, 158,
	141, 165, 199, 173, 156, 172, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 171, 90, 92, 170, 132, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 180,
	363, 422, 174, 175, 176, 177, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 179, 135, 147,
	96, 167, 150, 359, 362, 357, 358, 397, 398, 431,
	432, 433, 413, 354, 0, 360, 361, 0, 417, 400,
	84, 0, 116, 178, 142, 103, 169, 426, 416, 0,
	387, 428, 365, 379, 436, 380, 381, 409, 351, 396,
	134, 377, 0, 368, 347, 374, 348, 366, 389, 101,
	392, 364, 418, 399, 115, 0, 0, 0, 434, 117,
	404, 0, 151, 127, 0, 0, 391, 420, 393, 414,
	386, 410, 356, 403, 429, 378, 407, 430, 56, 0,
	0, 388, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 406, 425, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 346, 405, 0, 349, 352, 435, 423, 371, 372,
	0, 0, 0, 0, 0, 0, 0, 390, 394, 395,
	411, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 0, 402, 0, 0, 0, 353, 350, 0, 0,
	0, 0, 355, 0, 370, 412, 0, 345, 415, 421,
	385, 198, 424, 383, 382, 427, 140, 0, 0, 154,
	106, 105, 114, 419, 367, 375, 97, 373, 146, 136,
	166, 401, 137, 145, 118, 158, 141, 165, 199, 173,
	156, 172, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 171, 90, 92,
	170, 132, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 180, 363, 422, 174, 175,
	176, 177, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 179, 135, 147, 96, 167, 150, 359,
	362, 357, 358, 397, 398, 431, 432, 433, 413, 354,
	0, 360, 361, 0, 417, 400, 84, 0, 116, 178,
	142, 103, 169, 426, 416, 0, 387, 428, 365, 379,
	436, 380, 381, 409, 351, 396, 134, 377, 0, 368,
	347, 374, 348, 366, 389, 101, 392, 364, 418, 399,
	115, 0, 0, 0, 434, 117, 404, 0, 151, 127,
	0, 0, 391, 420, 393, 414, 386, 410, 356, 403,
	429, 378, 407, 430, 0, 0, 0, 388, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 406, 425, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 346, 405, 0,
	349, 352, 435, 423, 371, 372, 0, 0, 0, 0,
	0, 0, 0, 390, 394, 395, 411, 384, 0, 0,
	0, 0, 0, 0, 1159, 0, 369, 0, 402, 0,
	0, 0, 353, 350, 0, 0, 0, 0, 355, 0,
	370, 412, 0, 345, 415, 421, 385, 198, 424, 383,
	382, 427, 140, 0, 0, 154, 106, 105, 114, 419,
	367, 375, 97, 373, 146, 136, 166, 401, 137, 145,
	118, 158, 141, 165, 199, 173, 156, 172, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 171, 90, 92, 170, 132, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 180, 363, 422, 174, 175, 176, 177, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 179,
	135, 147, 96, 167, 150, 359, 362, 357, 358, 397,
	398, 431, 432, 433, 413, 354, 0, 360, 361, 0,
	417, 400, 84, 0, 116, 178, 142, 103, 169, 426,
	416, 0, 387, 428, 365, 379, 436, 380, 381, 409,
	351, 396, 134, 377, 0, 368, 347, 374, 348, 366,
	389, 101, 392, 364, 418, 399, 115, 0, 0, 0,
	434, 117, 404, 0, 151, 127, 0, 0, 391, 420,
	393, 414, 386, 410, 356, 403, 429, 378, 407, 430,
	0, 0, 0, 388, 82, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 406,
	425, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 346, 405, 0, 349, 352, 435, 423,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 390,
	394, 395, 411, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 0, 402, 0, 0, 0, 353, 350,
	0, 0, 0, 0, 355, 0, 370, 412, 0, 345,
	415, 421, 385, 198, 424, 383, 382, 427, 140, 0,
	0, 154, 106, 105, 114, 419, 367, 375, 97, 373,
	146, 136, 166, 401, 137, 145, 118, 158, 141, 165,
	199, 173, 156, 172, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 171,
	90, 92, 170, 132, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 180, 363, 422,
	174, 175, 176, 177, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 179, 135, 147, 96, 167,
	150, 359, 362, 357, 358, 397, 398, 431, 432, 433,
	413, 354, 0, 360, 361, 0, 417, 400, 84, 0,
	116, 178, 142, 103, 169, 426, 416, 0, 387, 428,
	365, 379, 436, 380, 381, 409, 351, 396, 134, 377,
	0, 368, 347, 374, 348, 366, 389, 101, 392, 364,
	418, 399, 115, 0, 0, 0, 434, 117, 404, 0,
	151, 127, 0, 0, 391, 420, 393, 414, 386, 410,
	356, 403, 429, 378, 407, 430, 0, 0, 0, 388,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 406, 425, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 408, 346,
	405, 0, 349, 352, 435, 423, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 390, 394, 395, 411, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 0,
	402, 0, 0, 0, 353, 350, 0, 0, 0, 0,
	355, 0, 370, 412, 0, 345, 415, 421, 385, 198,
	424, 383, 382, 427, 140, 0, 0, 154, 106, 105,
	114, 419, 367, 375, 97, 373, 146, 136, 166, 401,
	137, 145, 118, 158, 141, 165, 199, 173, 156, 172,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 171, 90, 343, 170, 132,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 180, 363, 422, 174, 175, 176, 177,
	0, 0, 0, 344, 342, 109, 149, 121, 112, 119,
	143, 179, 135, 147, 96, 167, 150, 359, 362, 357,
	358, 397, 398, 431, 432, 433, 413, 354, 0, 360,
	361, 0, 417, 400, 84, 0, 116, 178, 142, 103,
	169, 426, 416, 0, 387, 428, 365, 379, 436, 380,
	381, 409, 351, 396, 134, 377, 0, 368, 347, 374,
	348, 366, 389, 101, 392, 364, 418, 399, 115, 0,
	0, 0, 434, 117, 404, 0, 151, 127, 0, 0,
	391, 420, 393, 414, 386, 410, 356, 403, 429, 378,
	407, 430, 0, 0, 0, 388, 82, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 406, 425, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 346, 405, 0, 349, 352,
	435, 423, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 390, 394, 395, 411, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 369, 0, 402, 0, 0, 0,
	353, 350, 0, 0, 0, 0, 355, 0, 370, 412,
	0, 345, 415, 421, 385, 198, 424, 383, 382, 427,
	140, 0, 0, 154, 106, 105, 114, 419, 367, 375,
	97, 373, 146, 136, 166, 401, 137, 145, 118, 158,
	141, 165, 199, 173, 156, 172, 85, 155, 333, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 171, 90, 343, 170, 132, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 180,
	363, 422, 174, 175, 176, 177, 0, 0, 0, 344,
	342, 338, 337, 336, 112, 119, 143, 179, 135, 147,
	96, 167, 150, 359, 362, 357, 358, 397, 398, 431,
	432, 433, 413, 354, 0, 360, 361, 0, 417, 400,
	84, 0, 116, 178, 142, 103, 169, 134, 0, 0,
	825, 0, 260, 0, 0, 0, 101, 0, 255, 0,
	0, 115, 0, 0, 0, 294, 117, 0, 0, 151,
	127, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 284, 258,
	315, 308, 257, 256, 194, 310, 311, 312, 313, 0,
	94, 309, 316, 0, 314, 279, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	271, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 249, 0, 0, 0, 306,
	0, 270, 0, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 305, 0, 0, 198, 0,
	0, 303, 0, 140, 0, 0, 154, 106, 105, 114,
	0, 0, 0, 97, 0, 146, 136, 166, 0, 137,
	145, 118, 158, 141, 165, 199, 173, 156, 172, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 171, 90, 92, 170, 132, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 180, 0, 0, 174, 175, 176, 177, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	179, 135, 147, 96, 167, 150, 295, 304, 301, 302,
	299, 300, 298, 297, 296, 307, 287, 288, 289, 290,
	292, 0, 291, 84, 0, 116, 178, 142, 103, 169,
	134, 0, 0, 0, 0, 260, 0, 0, 0, 101,
	0, 255, 0, 0, 115, 0, 0, 0, 294, 117,
	0, 0, 151, 127, 0, 0, 0, 0, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 284, 258, 315, 308, 257, 256, 194, 310, 311,
	312, 313, 0, 94, 309, 316, 0, 314, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 271, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 249, 0,
	0, 0, 306, 0, 270, 0, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 198, 0, 0, 303, 0, 140, 0, 0, 154,
	106, 105, 114, 0, 0, 0, 97, 0, 146, 136,
	166, 0, 137, 145, 118, 158, 141, 165, 199, 173,
	156, 172, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 171, 90, 92,
	170, 132, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 180, 0, 0, 174, 175,
	176, 177, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 179, 135, 147, 96, 167, 150, 295,
	304, 301, 302, 299, 300, 298, 297, 296, 307, 287,
	288, 289, 290, 292, 0, 291, 84, 0, 116, 178,
	142, 103, 169, 134, 0, 0, 0, 0, 260, 0,
	0, 0, 101, 0, 255, 0, 0, 115, 0, 0,
	0, 294, 117, 0, 0, 151, 127, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 493, 284, 258, 315, 308, 257, 256,
	194, 310, 311, 312, 313, 0, 94, 309, 316, 0,
	314, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 271, 0, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 0, 0, 0, 0, 306, 0, 270, 0, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 305, 0, 0, 198, 0, 0, 303, 0, 140,
	0, 0, 154, 106, 105, 114, 0, 0, 0, 97,
	0, 146, 136, 166, 0, 137, 145, 118, 158, 141,
	165, 199, 173, 156, 172, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	171, 90, 92, 170, 132, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 180, 0,
	0, 174, 175, 176, 177, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 179, 135, 147, 96,
	167, 150, 295, 304, 301, 302, 299, 300, 298, 297,
	296, 307, 287, 288, 289, 290, 292, 0, 291, 84,
	0, 116, 178, 142, 103, 169, 134, 0, 0, 0,
	0, 260, 0, 0, 0, 101, 0, 255, 0, 0,
	115, 0, 0, 0, 294, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 285, 286, 0, 0, 0, 0,
	0, 0, 909, 0, 56, 0, 0, 284, 258, 315,
	308, 257, 256, 194, 310, 311, 312, 313, 0, 94,
	309, 316, 0, 314, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 271,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 0, 0, 0, 0, 306, 0,
	270, 0, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 0, 198, 0, 0,
	303, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 137, 145,
	118, 158, 141, 165, 199, 173, 156, 172, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 171, 90, 92, 170, 132, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 180, 0, 0, 174, 175, 176, 177, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 179,
	135, 147, 96, 167, 150, 295, 304, 301, 302, 299,
	300, 298, 297, 296, 307, 287, 288, 289, 290, 292,
	26, 291, 84, 0, 116, 178, 142, 103, 169, 0,
	0, 0, 134, 0, 0, 0, 0, 260, 0, 0,
	0, 101, 0, 255, 0, 0, 115, 0, 0, 0,
	294, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 284, 258, 315, 308, 257, 256, 194,
	310, 311, 312, 313, 0, 94, 309, 316, 0, 314,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 271, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 306, 0, 270, 0, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 198, 0, 0, 303, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	199, 173, 156, 172, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 171,
	90, 92, 170, 132, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 180, 0, 0,
	174, 175, 176, 177, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 179, 135, 147, 96, 167,
	150, 295, 304, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 0, 291, 84, 0,
	116, 178, 142, 103, 169, 134, 0, 498, 0, 0,
	260, 0, 0, 0, 101, 0, 255, 0, 0, 115,
	0, 0, 0, 294, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 284, 258, 315, 308,
	257, 256, 194, 310, 311, 312, 313, 0, 94, 309,
	316, 0, 314, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 271, 0,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 0, 0, 0, 0, 306, 0, 270,
	0, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 305, 0, 0, 198, 0, 0, 303,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 199, 173, 156, 172, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 171, 90, 92, 170, 132, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	180, 0, 0, 174, 175, 176, 177, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 179, 135,
	147, 96, 167, 150, 295, 304, 301, 302, 299, 300,
	298, 297, 296, 307, 287, 288, 289, 290, 292, 0,
	291, 84, 0, 116, 178, 142, 103, 169, 134, 0,
	0, 0, 0, 260, 0, 0, 0, 101, 0, 255,
	0, 0, 115, 0, 0, 0, 294, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 284,
	258, 315, 308, 257, 256, 194, 310, 311, 312, 313,
	0, 94, 309, 316, 0, 314, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 271, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	306, 0, 270, 0, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 305, 0, 0, 198,
	0, 0, 303, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 199, 173, 156, 172,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 171, 90, 92, 170, 132,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 180, 0, 0, 174, 175, 176, 177,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 179, 135, 147, 96, 167, 150, 295, 304, 301,
	302, 299, 300, 298, 297, 296, 307, 287, 288, 289,
	290, 292, 134, 291, 84, 0, 116, 178, 142, 103,
	169, 101, 0, 558, 0, 0, 115, 0, 0, 0,
	294, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 284, 258, 315, 308, 257, 256, 194,
	310, 311, 312, 313, 0, 94, 309, 316, 0, 314,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 306, 0, 270, 0, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 198, 0, 0, 303, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 1432, 137, 145, 118, 158, 141, 165,
	199, 173, 156, 172, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 171,
	90, 92, 170, 132, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 180, 0, 0,
	174, 175, 176, 177, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 179, 135, 147, 96, 167,
	150, 295, 304, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 134, 291, 84, 0,
	116, 178, 142, 103, 169, 101, 0, 558, 0, 0,
	115, 0, 0, 0, 294, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 284, 258, 315,
	308, 257, 256, 194, 310, 311, 312, 313, 0, 94,
	309, 316, 0, 314, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 0, 0, 0, 0, 306, 0,
	270, 0, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 0, 198, 0, 0,
	303, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 137, 145,
	118, 158, 141, 165, 199, 173, 156, 172, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 171, 90, 92, 170, 132, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 180, 0, 0, 174, 175, 176, 177, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 179,
	135, 147, 96, 167, 150, 295, 304, 301, 302, 299,
	300, 298, 297, 296, 307, 287, 288, 289, 290, 292,
	134, 291, 84, 0, 116, 178, 142, 103, 169, 101,
	0, 558, 0, 0, 115, 0, 0, 0, 294, 117,
	0, 0, 151, 127, 0, 0, 0, 0, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 284, 258, 315, 308, 571, 256, 194, 310, 311,
	312, 313, 0, 94, 309, 316, 0, 314, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 0, 0,
	0, 0, 306, 0, 270, 0, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 198, 0, 0, 303, 0, 140, 0, 0, 154,
	106, 105, 114, 0, 0, 0, 97, 0, 146, 136,
	166, 0, 137, 145, 118, 158, 141, 165, 199, 173,
	156, 172, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 171, 90, 92,
	170, 132, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 180, 0, 0, 174, 175,
	176, 177, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 179, 135, 147, 96, 167, 150, 295,
	304, 301, 302, 299, 300, 298, 297, 296, 307, 287,
	288, 289, 290, 292, 134, 291, 84, 0, 116, 178,
	142, 103, 169, 101, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 117, 0, 0, 151, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 94, 829, 830,
	831, 832, 833, 834, 835, 836, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 837, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	532, 531, 541, 542, 534, 535, 536, 537, 538, 539,
	540, 533, 0, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 73, 0, 0, 0, 79,
	140, 0, 0, 154, 106, 105, 114, 0, 0, 0,
	97, 0, 146, 136, 166, 0, 137, 145, 118, 158,
	141, 165, 75, 173, 156, 172, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 171, 90, 92, 170, 132, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 180,
	0, 0, 174, 175, 176, 177, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 179, 135, 147,
	96, 167, 150, 0, 76, 0, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	84, 0, 116, 178, 142, 103, 169, 101, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	82, 0, 0, 518, 519, 520, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 199, 173, 156, 172,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 171, 90, 92, 170, 132,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 180, 0, 0, 174, 175, 176, 177,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 179, 135, 147, 96, 167, 150, 0, 0, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 178, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 196, 0, 0, 195, 193, 194,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	199, 173, 156, 172, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 171,
	90, 92, 170, 132, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 180, 0, 0,
	174, 175, 176, 177, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 179, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	116, 178, 142, 103, 169, 134, 0, 0, 0, 621,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	195, 193, 194, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 199, 173, 156, 172, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 171, 90, 92, 170, 132, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	180, 0, 0, 174, 175, 176, 177, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 179, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 178, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 196, 0, 0, 195, 193, 194, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 199, 173, 156,
	172, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 171, 90, 92, 170,
	132, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 180, 0, 0, 174, 175, 176,
	177, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 179, 135, 147, 96, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 84, 0, 116, 178, 142,
	103, 169, 101, 0, 643, 0, 0, 115, 0, 0,
	0, 0, 117, 0, 0, 151, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 645, 644,
	646, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 140,
	0, 0, 154, 106, 105, 114, 0, 0, 0, 97,
	0, 146, 136, 166, 0, 137, 145, 118, 158, 141,
	165, 199, 173, 156, 172, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	171, 90, 92, 170, 132, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 180, 0,
	0, 174, 175, 176, 177, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 179, 135, 147, 96,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 116, 178, 142, 103, 169, 134, 0, 0, 0,
	621, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 117, 0, 0, 151, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 195, 193, 194, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 140, 0, 0, 154, 106, 105, 114, 0,
	0, 0, 97, 0, 146, 136, 166, 0, 619, 145,
	118, 158, 141, 165, 199, 173, 156, 172, 85, 155,
	164, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 171, 90, 92, 170, 132, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 180, 0, 0, 174, 175, 176, 177, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 179,
	135, 147, 96, 167, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 84, 0, 116, 178, 142, 103, 169, 599,
	101, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 195, 193, 194, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 199,
	173, 156, 172, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 171, 90,
	92, 170, 132, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 180, 0, 0, 174,
	175, 176, 177, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 179, 135, 147, 96, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 134, 0, 84, 0, 116,
	178, 142, 103, 169, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	195, 193, 194, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 199, 173, 156, 172, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 171, 90, 92, 170, 132, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	180, 0, 0, 174, 175, 176, 177, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 179, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 178, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 195, 193, 194, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	198, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 199, 173, 156,
	172, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 171, 90, 92, 170,
	132, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 180, 0, 0, 174, 175, 176,
	177, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 179, 135, 147, 96, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 84, 0, 116, 178, 142,
	103, 169, 101, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 117, 0, 0, 151, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 518, 519,
	520, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 140,
	0, 0, 154, 106, 105, 114, 0, 0, 0, 97,
	0, 146, 136, 166, 0, 137, 145, 118, 158, 141,
	165, 199, 173, 156, 172, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	171, 90, 92, 170, 132, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 180, 0,
	0, 174, 175, 176, 177, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 179, 135, 147, 96,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 84,
	0, 116, 178, 142, 103, 169, 101, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 117, 0, 0, 151,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 195, 784, 194, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 140, 0, 0, 154, 106, 105, 114,
	0, 0, 0, 97, 0, 146, 136, 166, 0, 137,
	145, 118, 158, 141, 165, 199, 173, 156, 172, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 171, 90, 92, 170, 132, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 180, 0, 0, 174, 175, 176, 177, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	179, 135, 147, 96, 167, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 84, 0, 116, 178, 142, 103, 169,
	101, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 195, 193, 194, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 199,
	173, 156, 172, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 171, 90,
	92, 170, 132, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 180, 0, 0, 174,
	175, 176, 177, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 179, 135, 147, 96, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 84, 0, 116,
	178, 142, 103, 169, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 767, 0, 0, 768, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 199, 173, 156, 172, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 171, 90, 92, 170, 132, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	180, 0, 0, 174, 175, 176, 177, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 179, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 178, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 199, 173, 156,
	172, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 171, 90, 92, 170,
	132, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 180, 0, 0, 174, 175, 176,
	177, 0, 0, 0, 131, 93, 109, 149, 121, 112,
	119, 143, 179, 135, 147, 96, 167, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 84, 0, 116, 178, 142,
	103, 169, 101, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 117, 0, 0, 151, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 140,
	0, 0, 154, 106, 105, 114, 0, 0, 0, 97,
	0, 146, 136, 166, 0, 137, 145, 118, 158, 141,
	165, 199, 173, 156, 172, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	171, 90, 92, 170, 132, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 180, 0,
	0, 174, 175, 176, 177, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 179, 135, 147, 96,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 116, 178, 142, 103, 169,
}

var yyPact = [...]int16{
	1991, -1000, -206, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 839, 868, -1000, -1000, -1000, -1000,
	-1000, -1000, 662, 7936, 25, 63, -46, 10241, 62, 1499,
	11003, -1000, -37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	83, 11003, 424, 655, -1000, -1000, -1000, -1000, -1000, 832,
	835, 667, 816, 707, -1000, 5602, 19, 8961, 9987, 5076,
	-1000, 423, 56, 11003, -167, 11511, 17, 17, 17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54, 11003, -1000, 11003, 15, 422, 15, 15, 15,
	11003, -1000, 101, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11003, 415, 769, 69, 3972, 3972, 3972, 3972, -29, -32,
	3972, -118, -108, 679, -1000, -1000, -1000, -1000, 3972, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11003, -1000, 698, 593, 361, 772, 6657, 6920, 839, -1000,
	655, -1000, -1000, -1000, 743, -1000, -1000, 298, 849, -1000,
	2167, 100, -1000, 6920, 2340, 590, -1000, -1000, -1000, -1000,
	590, -1000, -1000, -1000, -1000, 93, 7428, 7428, 7428, 7428,
	7428, 7428, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000,
	-1000, -1000, 6394, 590, 7682, 590, 590, 590, 590, 590,
	590, 590, 590, 6920, 590, 590, 590, 590, 590, 590,
	590, 590, 590, 590, 590, 590, 590, 590, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9733, 565, 760,
	-1000, -1000, -1000, 812, 8444, 9478, 11003, 600, -1000, 567,
	566, 4800, -38, -135, -1000, 42, -1000, -1000, -1000, 173,
	9215, -1000, -1000, 768, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 552, -1000, 2087,
	413, 3972, 48, 620, 411, 182, 409, 11003, 11003, 3972,
	23, 11003, 803, 677, 11003, 400, 399, -1000, 3696, -1000,
	3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3972, 3972, 3972, 3972, -1000,
	-122, -104, -1000, 11003, -1000, -1000, 88, 88, 11765, 11003,
	-1000, 6920, -1000, -1000, -1000, 862, 136, 390, 830, 99,
	578, -1000, 359, 832, 361, 707, 11257, 692, -1000, -1000,
	11003, -1000, 6920, 6920, 320, -1000, 10495, -1000, -1000, -1000,
	-1000, -1000, 3144, 149, 7428, 295, 155, 7428, 7428, 7428,
	7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428,
	7428, 7428, 7428, 443, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 394, -1000, 655, 1447, 1447, 118, -1000, 118,
	118, 118, 118, 118, 267, -1000, 361, 543, 330, 6394,
	5339, -1000, 7930, 5602, 5602, 6920, 6920, 10749, 10749, 5602,
	825, 222, 330, 10749, -1000, 361, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5602, 5602, 5602, 5602, 5602, 139, 11003,
	-1000, 10749, 8961, 8961, 8961, 8961, 8961, -1000, 702, 701,
	-1000, 691, 690, 711, 11003, -1000, 536, 8444, 119, 590,
	-1000, 11003, -1000, -11, 454, 8961, 11003, -1000, -1000, 4800,
	7428, 567, 566, -135, 560, -1000, -123, -129, 7428, 6128,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2868, 186,
	262, -96, -1000, -1000, -1000, -1000, 597, -1000, 597, 597,
	597, 597, -68, -68, -68, -68, -1000, -1000, -1000, -1000,
	-1000, 661, 652, -1000, 597, 597, 597, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 623, 623, 623, 598, 598, 659,
	-1000, 11003, -190, 386, 3972, 801, 3972, -1000, 106, -1000,
	11003, -1000, -1000, 11003, 3972, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 229, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 534, -1000, -1000, -1000,
	562, -1000, -1000, 722, 6920, 6920, 6920, 3420, 6920, -1000,
	749, 747, 772, -1000, 825, 836, -1000, 735, 733, 5602,
	-1000, -1000, 149, 164, -1000, -1000, 290, -1000, -1000, -1000,
	-1000, 98, 590, -1000, -1000, 2304, -1000, -1000, -1000, -1000,
	295, 7428, 7428, 7428, 7428, 1006, 1006, 2304, 2396, 1636,
	2039, 118, 94, 94, 108, 108, 108, 108, 108, 307,
	307, -1000, -1000, -1000, 361, 264, -1000, -1000, 264, -1000,
	-1000, 6920, -1000, 361, 361, 5602, 474, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 522,
	522, 357, 382, 619, -1000, 92, 617, 522, 5602, 238,
	-1000, 6920, 361, -1000, 522, 361, 361, 522, 522, 591,
	731, 590, -1000, 587, -1000, 170, 760, 658, 676, 499,
	-1000, -1000, -1000, -1000, 700, -1000, 694, -1000, -1000, -1000,
	-1000, -1000, 52, 51, 50, 11511, -1000, 847, 8961, 601,
	-1000, -1000, 2304, 560, -135, -145, -1000, -1000, 2304, -1000,
	330, -1000, 450, 545, 2581, -1000, -1000, -1000, -1000, -1000,
	-1000, 621, 792, 175, 167, 379, -1000, -1000, 784, -1000,
	258, -99, -1000, -1000, 339, -68, -68, -1000, -1000, 116,
	763, 116, 116, 116, 388, 388, -1000, -1000, -1000, -1000,
	335, -1000, -1000, -1000, 333, -1000, 675, 11511, 3972, -1000,
	4524, -1000, -1000, -1000, -1000, -1000, -1000, 708, 202, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -12, -1000, 3972, -1000, 248, 11003, 11003, 11765, 805,
	11003, 715, 330, 330, 330, 80, -1000, 762, 750, -1000,
	11003, -1000, -1000, -1000, -1000, 614, -1000, -1000, -1000, 4248,
	5602, -1000, 1006, 1006, 2304, 2119, -1000, 7428, -1000, 7428,
	-1000, 330, -1000, -1000, 522, 5602, -1000, -1000, 212, 443,
	212, 7428, 7428, 3420, 7428, 7428, -182, 599, 178, -1000,
	6920, 160, -1000, -1000, -1000, -1000, -1000, -1000, 670, 10749,
	590, -1000, 8190, -1000, 11511, 847, 839, 10749, 8961, 6920,
	6920, -1000, -1000, 6920, 604, -1000, 6920, -1000, -1000, -1000,
	590, 590, 590, 483, -1000, 839, 601, -200, -1000, -1000,
	-141, -148, -1000, -1000, -1000, 2868, -1000, 2868, 11511, -1000,
	350, 349, -1000, -1000, 665, 53, -1000, -1000, -1000, 446,
	116, 116, -1000, 193, -1000, -1000, -1000, 511, -1000, 508,
	504, 506, 11003, -1000, -1000, 491, -1000, 159, -1000, -1000,
	11511, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11511, 11003, -1000, -1000, -1000, -1000, -1000,
	11511, -1000, -1000, 388, 6920, -1000, -1000, -1000, 88, -1000,
	-1000, 4524, -1000, -1000, -1000, -1000, -1000, 847, 8961, -1000,
	-1000, 361, -1000, -1000, 7428, 2304, 2304, -1000, -1000, 361,
	597, 597, -1000, 597, 598, -1000, 597, -52, 597, -53,
	590, 361, 361, 1769, 2017, -1000, 1742, 1928, 590, -179,
	-1000, 330, 6920, -200, 794, 441, 472, -1000, -1000, 5865,
	361, 501, 78, 483, 839, 832, -1000, 479, 330, 330,
	330, 11511, 330, 11511, 11511, 11511, 8707, 11511, 832, -200,
	-1000, 5602, -1000, -1000, -1000, 2581, -1000, 481, -1000, 597,
	-1000, -1000, -92, 860, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -68, 388, -68, 332, -1000,
	311, 3972, 4524, 2868, -1000, 594, -1000, -1000, -1000, -1000,
	797, -1000, 330, -1000, 845, 479, -1000, 2304, -1000, -1000,
	105, -1000, -1000, -1000, -1000, -1000, -1000, 309, -1000, -1000,
	-1000, 7428, 7428, -1000, 7428, 7428, 7428, 361, 388, 330,
	-1000, 791, -1000, 590, -1000, -1000, 576, 10495, 10495, -1000,
	832, -200, 477, -1000, 470, 470, 470, 119, -1000, -200,
	-1000, 474, 120, 11511, -1000, 166, -1000, -153, 116, -1000,
	116, 434, 428, -1000, -1000, -1000, 11511, 590, 843, 834,
	-1000, -1000, 361, 1852, 1852, 1852, 1852, 59, -1000, -1000,
	859, -1000, 590, -1000, 655, 76, -1000, -200, -1000, 11511,
	-1000, -1000, -1000, -1000, -1000, -1000, 120, -1000, 347, 158,
	388, -1000, 275, 788, -1000, 786, -1000, -1000, -1000, -1000,
	-1000, 466, -13, -1000, 6920, 6920, -1000, -1000, -1000, -1000,
	-1000, 361, 39, -193, 10749, 472, 361, 10495, -1000, -1000,
	-1000, -1000, 305, -1000, -1000, -1000, 388, -1000, -1000, 620,
	433, -1000, 11511, 330, 468, -1000, 710, -187, -196, 444,
	-1000, -1000, -1000, -1000, -190, -1000, -13, 729, -1000, 680,
	-1000, -1000, -1000, -16, -191, -19, -194, 590, -197, 7174,
	-1000, 1852, 361, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1088, 13, 33, 1087, 1085, 1083, 879, 876, 874,
	1082, 1080, 1079, 1078, 1077, 1070, 1061, 1052, 1050, 1048,
	1047, 1046, 1045, 1044, 1043, 1041, 1040, 132, 1038, 1037,
	1036, 70, 1035, 61, 1034, 1033, 41, 65, 46, 48,
	716, 1032, 1031, 44, 75, 63, 60, 1029, 42, 1028,
	1024, 1023, 58, 1021, 1020, 1001, 1019, 55, 18, 88,
	1015, 1014, 1012, 1011, 59, 155, 1009, 1008, 1007, 1005,
	1004, 1003, 1002, 52, 7, 9, 11, 19, 1000, 226,
	6, 998, 47, 996, 995, 994, 993, 29, 992, 50,
	991, 22, 49, 990, 17, 57, 26, 24, 10, 74,
	72, 71, 989, 31, 69, 40, 987, 983, 418, 982,
	981, 980, 979, 978, 977, 142, 370, 976, 974, 971,
	969, 34, 311, 634, 400, 64, 962, 956, 5, 955,
	1503, 73, 56, 25, 952, 30, 110, 35, 951, 946,
	944, 940, 32, 940, 939, 936, 38, 935, 934, 932,
	931, 930, 928, 927, 66, 921, 920, 919, 36, 21,
	913, 912, 51, 23, 910, 909, 908, 39, 53, 906,
	43, 905, 904, 903, 902, 28, 27, 901, 16, 900,
	8, 898, 897, 2, 896, 20, 895, 3, 894, 4,
	37, 893, 15, 45, 892, 890, 12, 889, 888, 887,
	886, 0, 633, 882, 881, 91,
}

var yyR1 = [...]uint8{
	0, 199, 200, 200, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	8, 9, 9, 9, 203, 203, 44, 44, 95, 95,
	10, 10, 10, 10, 10, 10, 100, 100, 105, 105,
	105, 106, 106, 106, 106, 140, 140, 138, 138, 11,
	11, 11, 11, 11, 11, 11, 189, 189, 188, 187,
	187, 186, 186, 185, 16, 172, 173, 173, 173, 168,
	143, 143, 144, 144, 146, 146, 145, 145, 145, 145,
	145, 153, 149, 149, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 150, 150, 150, 150,
	150, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 152, 152, 152, 152,
	152, 152, 152, 152, 167, 167, 154, 154, 162, 162,
	163, 163, 163, 160, 160, 161, 161, 164, 164, 164,
	155, 155, 155, 155, 155, 155, 155, 157, 157, 165,
	165, 158, 158, 158, 159, 159, 159, 166, 166, 166,
	166, 166, 156, 156, 169, 169, 181, 181, 180, 180,
	180, 171, 171, 177, 177, 177, 177, 177, 170, 170,
	179, 179, 178, 174, 174, 174, 175, 175, 175, 176,
	176, 176, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 184, 182, 182, 183, 183, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 113, 113, 110, 110, 111, 111, 112, 112,
	112, 114, 114, 114, 141, 141, 139, 139, 139, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	24, 24, 25, 25, 25, 193, 193, 193, 193, 193,
	193, 26, 26, 26, 194, 194, 204, 27, 28, 28,
	29, 29, 29, 33, 33, 33, 31, 31, 32, 32,
	38, 38, 37, 37, 39, 39, 39, 39, 126, 126,
	126, 128, 128, 128, 128, 125, 41, 41, 42, 43,
	43, 45, 45, 46, 46, 46, 57, 57, 94, 94,
	96, 96, 47, 47, 47, 47, 48, 48, 49, 49,
	50, 50, 134, 134, 133, 133, 133, 132, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 40, 40,
	40, 40, 40, 40, 40, 109, 109, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 72, 72, 72, 72, 72, 72, 62, 62, 62,
	62, 62, 62, 62, 36, 36, 73, 73, 73, 79,
	74, 74, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 198, 197, 70, 70, 70, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 205, 205, 71, 71, 71, 71, 71, 34, 34,
	34, 34, 34, 137, 137, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 83,
	83, 35, 35, 81, 81, 82, 84, 84, 67, 67,
	67, 80, 80, 80, 123, 123, 123, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	191, 191, 66, 66, 66, 85, 85, 86, 86, 87,
	87, 88, 88, 89, 90, 90, 90, 90, 90, 90,
	90, 91, 91, 91, 91, 91, 91, 92, 92, 92,
	63, 63, 63, 63, 63, 63, 93, 93, 93, 93,
	97, 97, 75, 75, 77, 77, 76, 78, 192, 192,
	98, 98, 103, 99, 99, 101, 101, 104, 104, 104,
	102, 102, 102, 129, 129, 129, 107, 107, 115, 115,
	116, 116, 108, 108, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 118, 118, 118, 119, 119, 120,
	120, 120, 127, 127, 124, 124, 130, 130, 130, 130,
	130, 131, 131, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 196, 196, 196, 201, 202, 135,
	136, 136, 136,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 10,
	9, 9, 8, 7, 1, 1, 1, 3, 0, 4,
	3, 3, 4, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 4, 6, 4, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 1, 1, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	3, 2, 4, 4, 7, 1, 1, 1, 1, 1,
	1, 2, 4, 3, 1, 3, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 4, 5, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 4, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 2, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 3, 3, 3,
	3, 0, 2, 2, 4, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 0, 2,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -199, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 140, 141, 143, 142, 168, 144, 161,
	52, 180, 181, 183, 184, 25, 162, 163, 166, 167,
	185, 186, 187, -201, 8, 266, 56, -200, 282, -87,
	15, -29, 5, -27, -204, -27, -27, -27, -27, -27,
	-172, 56, -120, 149, 98, 176, 258, 146, 147, 153,
	-123, 64, 60, -122, 274, 180, 194, 229, 188, 214,
	206, 204, 207, 244, 71, 183, 254, 164, 203, 199,
	197, 27, 219, 279, 198, 159, 158, 220, 224, 245,
	192, 193, 248, 218, 160, 32, 276, 37, 172, 249,
	222, 247, 217, 213, 216, 191, 212, 41, 226, 225,
	227, 243, 209, 200, 18, 252, 167, 170, 221, 223,
	154, 174, 278, 250, 196, 171, 166, 253, 184, 246,
	256, 40, 231, 190, 157, 181, 178, 210, 173, 201,
	202, 215, 189, 211, 182, 175, 168, 255, 232, 280,
	208, 205, 179, 177, 236, 237, 238, 239, 277, 251,
	233, -108, 149, 151, 147, 147, 148, 149, 258, 146,
	147, -55, -130, 64, 65, 63, 60, -122, 149, 176,
	147, 135, 207, 140, 234, 148, 32, 174, -139, -141,
	147, 182, -110, 177, 236, 237, 238, 239, 60, 246,
	245, 247, 240, -130, 182, -135, -135, -135, -135, -135,
	186, 60, -130, 60, -2, -91, 17, 16, -5, -3,
	-201, 6, 20, 21, -33, 42, 43, -28, -39, 126,
	-40, -130, -60, 100, -65, 29, 64, 63, 60, -122,
	23, -67, -61, -78, -79, -80, 135, 136, 124, 125,
	132, 101, -197, -198, -70, -68, -69, -71, -64, 76,
	77, -76, -201, -123, 59, 46, 47, 267, 268, 269,
	270, 273, 271, 103, 36, 257, 265, 264, 263, 261,
	262, 259, 260, 152, 258, 146, 130, 266, 62, 72,
	66, 67, 68, 69, 75, 61, 73, -108, -43, -45,
	-46, -47, -57, -79, -201, -55, 11, -44, -57, -99,
	-101, -140, -138, 182, -104, -123, 247, 246, 245, -124,
	-102, -121, 244, 207, 243, 145, 99, 22, 24, 102,
	135, 16, 103, 134, 267, 140, 50, 259, 260, 257,
	269, 270, 258, 234, 29, 10, 25, 162, 21, 128,
	142, 106, 107, 165, 23, 163, 77, 19, 53, 11,
	13, 14, 152, 151, 119, 148, 48, 8, 59, 26,
	115, 44, 28, 46, 116, 117, 17, 261, 262, 31,
	273, 169, 130, 51, 38, 100, 75, 54, 98, 15,
	49, 118, 143, 266, 47, 146, 6, 272, 30, 161,
	45, 147, 235, 105, 150, 76, 5, 153, 9, 52,
	55, 263, 264, 265, 36, 104, 12, -173, -168, 60,
	148, -55, 266, -123, -116, 152, -116, -116, 147, -55,
	-55, -115, 152, 60, -115, -115, -115, -55, 137, -55,
	60, 30, 258, 60, 174, 147, 175, 149, -136, -201,
	-124, -123, -136, -136, -136, 178, 179, 178, 179, -136,
	248, -111, 241, 54, -136, -130, 11, 22, -201, 55,
	-76, -201, -202, 58, -92, 19, 31, -40, 20, -130,
	-88, -89, -40, -87, -2, -27, 38, -31, 21, 70,
	11, -126, 99, 98, 115, -125, 22, -128, 63, 64,
	65, -123, 137, -40, -62, 119, 100, 116, 117, 118,
	102, 121, 120, 131, 124, 125, 126, 127, 128, 129,
	130, 122, 123, 134, 108, 109, 110, 111, 112, 113,
	114, -109, -201, -79, -201, 138, 139, -65, 29, -65,
	-65, -65, -65, -65, -191, 74, -2, -74, -40, -201,
	-201, 63, -65, -201, -201, -201, -201, -201, -201, -201,
	-201, -83, -40, -201, -205, -201, -205, -205, -205, -205,
	-205, -205, -205, -201, -201, -201, -201, -201, -56, 26,
	-55, 30, 57, -51, -53, -52, -54, 44, 48, 50,
	45, 46, 47, 51, -134, 22, -43, -201, -133, 170,
	-132, 22, -130, -57, -44, -203, 57, 11, 55, 57,
	57, -99, -101, 182, -100, -105, 248, 250, 150, 108,
	-129, -123, -196, 29, 64, 63, 65, 30, 58, 57,
	-145, -149, -151, -150, -152, -153, -147, -148, 204, 205,
	135, 208, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 30, 164, 201, 202, 203, 97, 220, 221,
	222, 223, 224, 225, 226, 227, 206, 188, 189, 190,
	191, 192, 193, 194, 196, 197, 198, 199, 200, 60,
	-136, 149, -189, 55, 60, 100, 60, -55, -55, -136,
	150, -55, 23, 54, -55, 60, 60, -131, -130, -121,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, 249, -113, 235, 242, -55, -193, -3, -7,
	-9, -8, 60, -196, 64, -193, -144, -146, 60, -122,
	-194, -130, 9, 119, 57, 18, 18, 137, 57, -90,
	24, 25, -91, -202, -33, -66, -123, 66, 69, -32,
	45, -55, -40, -40, -72, 75, 100, 76, 77, -125,
	126, -131, -124, -121, 64, -65, -73, -76, -79, 74,
	119, 116, 117, 118, 102, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -137, 60, -196, 60, -64, 63, 64, -64, 74,
	-202, 57, -202, -2, -38, 21, -37, -39, -195, 78,
	79, 80, 81, 82, 83, 84, 85, 97, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, -37,
	-37, -40, -40, -80, -123, -130, -80, -37, -31, -81,
	-82, 104, -80, -202, -37, -38, -38, -37, -37, -95,
	29, 170, -55, -98, -103, -80, -45, -46, -46, -45,
	-46, 44, 44, 44, 49, 44, 49, 44, -52, -130,
	-202, -58, 52, 151, 53, -201, -132, -95, 55, -43,
	-57, -104, -65, -100, 57, 249, 251, 252, -65, 54,
	-40, -159, 134, -174, -175, -176, -124, -196, 66, -168,
	-169, -177, 154, 157, 153, -170, 148, 28, -164, 75,
	100, -160, 232, -154, 56, -154, -154, -154, -154, -158,
	207, -158, -158, -158, 56, 56, -154, -154, -154, -162,
	56, -162, -162, -163, 56, -163, -127, 55, -55, -187,
	277, -188, 60, -136, 23, -136, -117, 145, 142, 143,
	-184, 141, 229, 207, 71, 29, 15, 267, 170, 280,
	60, 171, -55, -55, -136, -112, 11, 119, 57, -202,
	57, 40, -40, -40, -40, -131, -89, 33, 33, -92,
	-107, 19, 11, 36, 36, -37, 75, 76, 77, 137,
	-201, -73, -65, -65, -65, -65, -36, 165, -36, 99,
	-202, -40, -202, -202, -37, 57, -202, -202, 57, 55,
	22, 57, 11, 137, 57, 11, -202, -37, -84, -82,
	106, -40, -202, -202, -202, -202, -202, -202, -63, 30,
	36, -2, -201, 36, -201, -42, -59, 57, 11, 12,
	108, -49, -48, 54, 55, -50, 54, -48, 44, 44,
	148, 148, 148, -96, -123, -59, -43, -59, -105, -106,
	253, 250, 256, 60, -196, 57, -176, 108, 56, 28,
	-170, -170, 60, 60, -155, 29, 75, -161, 233, 66,
	-158, -158, -159, 30, -159, -159, -159, -167, -196, -167,
	66, 66, 54, -123, -136, -186, -185, -124, -135, -190,
	176, 155, 156, 159, 158, 60, 148, 28, 154, 157,
	170, 153, -190, 176, -118, -119, 150, 22, 148, 28,
	170, -136, -114, 116, 12, -130, -130, -146, 22, -130,
	41, 137, 34, 35, 34, 35, -55, -41, 11, 126,
	-124, -38, -36, -36, 99, -65, -65, -202, -39, -142,
	135, 204, 164, 203, 199, 218, 209, 231, 201, 232,
	205, -137, -142, -65, -65, -124, -65, -65, 274, -87,
	107, -40, 105, -97, 54, -98, -75, -77, -76, -201,
	-2, -93, -128, -96, -59, -87, -103, -43, -40, -40,
	-40, 56, -40, -201, -201, -201, -202, 57, -87, -59,
	-192, 281, 250, 254, 255, -175, -176, -179, -178, -123,
	60, 60, -157, 54, -196, 66, 67, 75, 257, 72,
	58, -159, -159, 60, 135, 58, 57, 58, 57, 58,
	57, -55, 57, 108, -135, -123, -135, -123, -55, -135,
	-123, -196, -40, -193, -59, -43, -202, -65, -202, -154,
	-154, -154, -163, -154, 193, -154, 193, -201, -202, -202,
	-202, 57, 19, -202, 57, 19, -201, -35, 272, -40,
	-192, 27, -97, 57, -202, -202, -202, 57, 137, -202,
	-87, -91, -94, -123, -94, -94, -94, -133, -123, -91,
	-192, -37, 58, 57, -154, -165, 229, 9, -158, -196,
	-158, 66, 66, -136, -185, -176, 56, 26, -85, 13,
	-158, 60, 66, -65, -65, -65, -65, -65, -202, -196,
	28, -77, 36, -2, -201, -128, -128, -91, -192, 57,
	58, -202, -202, -202, -58, -192, -181, -180, 55, 160,
	71, -178, -166, 154, 28, 153, 257, -159, -159, 58,
	58, -94, -201, -86, 14, 16, -202, -202, -202, -202,
	-202, -34, 119, 277, 9, -75, -2, 137, -192, -123,
	-180, 60, -171, 108, -196, -156, 71, 28, 28, 58,
	-182, -183, 170, -40, -74, -202, 275, 51, 278, -98,
	-202, -128, 66, -196, -189, -202, 57, -123, 41, 276,
	279, -187, -183, 36, 41, 172, 277, 173, 278, -201,
	279, -65, 169, -202, -202,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 569, 0, 316, 316, 316, 316,
	316, 316, 0, 649, 632, 0, 0, 0, 0, -2,
	290, 291, 0, 293, 294, 879, 879, 879, 879, 879,
	0, 0, 0, 0, 37, 38, 877, 1, 3, 581,
	0, 0, 320, 323, 318, 0, 632, 0, 0, 0,
	69, 0, 0, 864, 0, 865, 630, 630, 630, 650,
	651, 544, 545, 546, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 866, 867, 868, 869, 870, 871, 872,
	873, 0, 0, 633, 0, 628, 0, 628, 628, 628,
	0, 244, 390, 656, 657, 658, 659, 660, 864, 865,
	0, 0, 0, 0, 880, 880, 880, 880, 0, 0,
	880, 0, 276, 265, 267, 268, 269, 270, 880, 287,
	288, 285, 275, 289, 292, 295, 296, 297, 298, 299,
	0, 301, 0, 311, 30, 587, 0, 0, 569, 32,
	0, 316, 321, 322, 326, 324, 325, 317, 0, 334,
	338, 0, 398, 0, 403, -2, -2, -2, -2, -2,
	0, 442, 443, 444, 445, 539, 0, 0, 0, 0,
	0, 0, 467, 468, 469, 470, 471, 472, 540, 407,
	408, 607, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 501, 501, 501, 501, 501,
	501, 501, 501, 0, 0, 0, 0, 0, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 0, 0, 349,
	351, 352, 353, 372, 0, 374, 0, 0, 46, 50,
	51, 0, 65, 855, 613, 654, -2, -2, -2, 0,
	0, 655, -2, 783, -2, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 0, 86, 0,
	0, 880, 0, 76, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 245,
	880, 880, 880, 880, 880, 880, 880, 880, 254, 881,
	882, 654, 255, 256, 257, 880, 880, 880, 880, 260,
	0, 0, 277, 0, 271, 300, 0, 0, 0, 0,
	313, 0, 31, 878, 25, 0, 0, 582, 583, 0,
	570, 571, 574, 581, 30, 323, 0, 328, 327, 319,
	0, 335, 0, 0, 0, 339, 0, 345, 341, 342,
	343, 344, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 428, 429, 430, 431, 432,
	433, 404, 0, 420, 0, 0, 0, 461, 559, 462,
	463, 464, 465, 466, 558, 560, 30, 0, 440, 0,
	330, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 530, 0, 493, 0, 494, 495, 496, 497,
	498, 499, 500, 0, 330, 330, 0, 0, 48, 0,
	389, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	381, 0, 0, 0, 0, 373, 0, 0, 392, 828,
	375, 0, 377, -2, 0, 0, 0, 44, 45, 0,
	0, 52, 53, 0, 55, 56, 0, 0, 0, 0,
	174, 623, 624, 625, 544, 874, 876, 621, 203, 0,
	157, 153, 97, 98, 99, 100, 146, 103, 146, 146,
	146, 146, 171, 171, 171, 171, 129, 130, 131, 132,
	133, 0, 0, 116, 146, 146, 146, 120, 136, 137,
	138, 139, 140, 141, 142, 143, 101, 104, 105, 106,
	107, 108, 109, 110, 148, 148, 148, 150, 150, 652,
	71, 0, 79, 0, 880, 0, 880, 84, 0, 219,
	0, 238, 629, 0, 880, 241, 242, 391, 661, 662,
	246, 247, 248, 249, 250, 251, 252, 253, 258, 263,
	259, 264, 261, 278, 272, 273, 266, 302, 305, 306,
	307, 308, 309, 310, 875, 303, 0, 92, 94, 95,
	312, 314, 588, 0, 0, 0, 0, 0, 0, 573,
	575, 576, 587, 33, 326, 0, 562, 0, 0, 0,
	329, 28, 399, 400, 402, 421, 0, 423, 425, 340,
	336, 0, 542, -2, -2, 409, 410, 436, 437, 438,
	0, 0, 0, 0, 0, 434, 434, 416, 0, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 460, 513, 514, 0, 458, 547, 548, 459, 561,
	439, 0, 606, 30, 0, 0, 331, 332, 474, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 536,
	533, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 388, 396, 610, 0, 350, 368, 370, 0,
	365, 379, 380, 382, 0, 384, 0, 386, 387, 354,
	355, 356, 0, 0, 0, 0, 376, 396, 0, 396,
	47, 614, 616, 54, 0, 0, 59, 60, 615, 617,
	618, 619, 0, 85, 204, 206, 209, 210, 211, 87,
	88, 0, 0, 0, 0, 0, 198, 199, 160, 158,
	0, 155, 154, 102, 0, 171, 171, 123, 124, 174,
	0, 174, 174, 174, 0, 0, 117, 118, 119, 111,
	0, 112, 113, 114, 0, 115, 0, 0, 880, 73,
	0, 77, 78, 74, 631, 75, 879, 0, 0, 644,
	220, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 0, 237, 880, 240, 281, 0, 0, 0, 0,
	0, 0, 584, 585, 586, 0, 572, 0, 0, 26,
	0, 626, 627, 563, 564, 346, 422, 424, 426, 0,
	330, 411, 434, 434, 417, 0, 412, 0, 413, 0,
	406, 441, -2, 475, 0, 0, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 0, 534,
	0, 0, 492, 503, 504, 505, 506, 507, 600, 0,
	0, -2, 0, 36, 0, 396, 569, 0, 0, 0,
	0, 362, 369, 0, 0, 363, 0, 364, 383, 385,
	0, 0, 0, 0, 360, 569, 396, 608, 57, 58,
	0, 0, 64, 175, 176, 0, 207, 0, 0, 193,
	0, 0, 196, 197, 167, 0, 159, 96, 156, 0,
	174, 174, 125, 0, 126, 127, 128, 0, 144, 0,
	0, 0, 0, 653, 72, 80, 81, 0, 212, 879,
	0, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 879, 0, 0, 879, 645, 646, 647, 648,
	0, 239, 262, 0, 0, 279, 280, 93, 0, 315,
	589, 0, 579, 580, 577, 578, 27, 396, 0, 337,
	543, 0, 414, 415, 0, 435, 418, 476, 333, 0,
	146, 146, 518, 146, 150, 521, 146, 523, 146, 526,
	0, 0, 0, 0, 0, 542, 0, 0, 0, 531,
	491, 537, 0, 608, 0, 600, 590, 602, 604, 0,
	30, 0, 596, 0, 569, 581, 611, 348, 397, 612,
	366, 0, 371, 0, 0, 0, 374, 0, 581, 608,
	43, 0, 61, 62, 63, 205, 208, 0, 200, 146,
	194, 195, 169, 0, 161, 162, 163, 164, 165, 166,
	147, 121, 122, 172, 173, 171, 0, 171, 0, 151,
	0, 880, 0, 0, 213, 0, 214, 216, 217, 218,
	0, 282, 283, 304, 565, 347, 477, 419, 480, 515,
	171, 519, 520, 522, 524, 525, 527, 0, 482, 481,
	483, 0, 0, 486, 0, 0, 0, 0, 0, 535,
	34, 0, 35, 0, 605, -2, 0, 0, 0, 49,
	581, 608, 0, 358, 0, 0, 0, 392, 361, 608,
	42, 609, 185, 0, 202, 177, 170, 0, 174, 145,
	174, 0, 0, 70, 82, 83, 0, 0, 567, 0,
	516, 517, 0, 0, 0, 0, 0, 508, 490, 532,
	0, 603, 0, -2, 0, 598, 597, 608, 40, 0,
	367, 393, 394, 395, 357, 41, 184, 186, 0, 191,
	0, 201, 182, 0, 179, 181, 168, 134, 135, 149,
	152, 0, 0, 29, 0, 0, 528, 484, 485, 487,
	488, 0, 0, 0, 0, 593, 30, 0, 39, 359,
	187, 188, 0, 192, 190, 89, 0, 178, 180, 76,
	0, 233, 0, 568, 566, 489, 0, 0, 0, 601,
	-2, 599, 189, 183, 79, 232, 0, 0, 509, 0,
	512, 215, 234, 0, 510, 0, 0, 0, 0, 0,
	511, 0, 0, 235, 236,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 129, 121, 3,
	56, 58, 126, 124, 57, 125, 137, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 282,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:374
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:465
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support FROM TableExpr with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit, Returning: yyDollar[10].returning}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:474
		{
			if yylex.(*Tokenizer).IsMySQL() && len(yyDollar[9].returning) != 0 {
				yylex.Error("MySQL/MariaDB dialect doesn't support returning with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{yyDollar[4].aliasedTableName}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableExprs, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), Returning: yyDollar[8].returning}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableExprs, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), Returning: yyDollar[7].returning}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].aliasedTableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].aliasedTableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = LocalStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:615
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:645
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:660
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:688
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:717
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:978
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:996
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1014
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1083
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1101
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1105
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1127
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.colKeyOpt = colKey
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1148
		{
			yyVAL.optVal = nil
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1239
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = yyDollar[1].str
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1330
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1335
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1363
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1379
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1383
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1403
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1408
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1506
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = "extended "
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = ""
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = "full "
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1604
		{
			yyVAL.showFilter = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1612
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = LocalStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = SessionStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = GlobalStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &Begin{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Begin{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Commit{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Rollback{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &OtherRead{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &OtherRead{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &OtherRead{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `EXECUTE prepared_statement_name (parameter_values)` statement")
				return 1
			}
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Values: yyDollar[3].valTuple}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1780
		{
			setAllowComments(yylex, true)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			yyVAL.bytes2 = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = UnionStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = UnionAllStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = UnionDistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = SQLCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = DistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = StraightJoinHint
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1844
		{
			yyVAL.selectExprs = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1848
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1858
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1864
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1876
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1881
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1963
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1973
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2016
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.empty = struct{}{}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2044
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = JoinStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = StraightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = LeftJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = RightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = NaturalJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.indexHints = nil
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2133
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2137
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2218
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2230
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = IsNullStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = IsNotNullStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = IsTrueStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = IsNotTrueStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = IsFalseStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = IsNotFalseStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = EqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = LessThanStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = GreaterThanStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = LessEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = GreaterEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = NotEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = nil
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2333
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2339
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2483
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2666
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = BooleanModeStr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = QueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2766
		{
			yyVAL.str = string("")
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2786
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2828
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &Default{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2944
		{
			yyVAL.exprs = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = nil
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.orderBy = nil
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2976
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2987
		{
			yyVAL.str = AscScr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.str = AscScr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = DescScr
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = DescNullsLastScr
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.str = AscNullsLastScr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3016
		{
			yyVAL.limit = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3032
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow 'LIMIT offset, limit' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3040
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3044
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3053
		{
			yyVAL.str = ""
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.str = ForUpdateStr
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3061
		{
			yyVAL.str = ShareModeStr
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3087
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3091
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3095
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3106
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3110
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3114
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3119
		{
			yyVAL.updateExprs = nil
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3123
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3133
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3149
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3166
		{
			yyVAL.returning = nil
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3171
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3182
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3204
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3208
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3214
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3218
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3229
		{
			yyVAL.bytes = []byte("charset")
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = &Default{}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3253
		{
			yyVAL.byt = 0
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3255
		{
			yyVAL.byt = 1
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3263
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = IgnoreStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3290
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3303
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3310
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3312
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3332
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3611
		{
			decNesting(yylex)
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3616
		{
			forceEOF(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3621
		{
			forceEOF(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			forceEOF(yylex)
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
