// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:15
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:15

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:52
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const REGEXP = 57452
const IN = 57453
const SHIFT_LEFT = 57454
const SHIFT_RIGHT = 57455
const DIV = 57456
const MOD = 57457
const UNARY = 57458
const COLLATE = 57459
const BINARY = 57460
const UNDERSCORE_BINARY = 57461
const JSON_EXTRACT_OP = 57462
const JSON_UNQUOTE_EXTRACT_OP = 57463
const CREATE = 57464
const ALTER = 57465
const DROP = 57466
const RENAME = 57467
const ANALYZE = 57468
const ADD = 57469
const SCHEMA = 57470
const TABLE = 57471
const INDEX = 57472
const VIEW = 57473
const TO = 57474
const IGNORE = 57475
const IF = 57476
const UNIQUE = 57477
const PRIMARY = 57478
const COLUMN = 57479
const CONSTRAINT = 57480
const SPATIAL = 57481
const FULLTEXT = 57482
const FOREIGN = 57483
const KEY_BLOCK_SIZE = 57484
const SHOW = 57485
const DESCRIBE = 57486
const EXPLAIN = 57487
const DATE = 57488
const ESCAPE = 57489
const REPAIR = 57490
const OPTIMIZE = 57491
const TRUNCATE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const VINDEX = 57500
const VINDEXES = 57501
const STATUS = 57502
const VARIABLES = 57503
const BEGIN = 57504
const START = 57505
const TRANSACTION = 57506
const COMMIT = 57507
const ROLLBACK = 57508
const DEALLOCATE = 57509
const PREPARE = 57510
const EXECUTE = 57511
const BIT = 57512
const TINYINT = 57513
const SMALLINT = 57514
const MEDIUMINT = 57515
const INT = 57516
const INTEGER = 57517
const BIGINT = 57518
const INTNUM = 57519
const REAL = 57520
const DOUBLE = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const DATABASES = 57558
const TABLES = 57559
const VITESS_KEYSPACES = 57560
const VITESS_SHARDS = 57561
const VITESS_TABLETS = 57562
const VSCHEMA_TABLES = 57563
const EXTENDED = 57564
const FULL = 57565
const PROCESSLIST = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const LOCAL = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const RETURNING = 57605

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	177, 281,
	178, 281,
	-2, 269,
	-1, 253,
	74, 579,
	100, 579,
	102, 579,
	108, 579,
	109, 579,
	110, 579,
	111, 579,
	112, 579,
	113, 579,
	114, 579,
	116, 579,
	117, 579,
	118, 579,
	119, 579,
	120, 579,
	121, 579,
	122, 579,
	123, 579,
	124, 579,
	125, 579,
	126, 579,
	127, 579,
	128, 579,
	129, 579,
	130, 579,
	133, 579,
	-2, 397,
	-1, 254,
	56, 672,
	108, 560,
	109, 560,
	110, 560,
	111, 560,
	112, 560,
	113, 560,
	114, 560,
	136, 677,
	137, 672,
	138, 672,
	-2, 568,
	-1, 255,
	136, 679,
	-2, 567,
	-1, 256,
	136, 680,
	-2, 673,
	-1, 257,
	136, 681,
	-2, 674,
	-1, 261,
	108, 433,
	109, 433,
	110, 433,
	111, 433,
	112, 433,
	113, 433,
	114, 433,
	-2, 465,
	-1, 262,
	108, 434,
	109, 434,
	110, 434,
	111, 434,
	112, 434,
	113, 434,
	114, 434,
	-2, 466,
	-1, 263,
	108, 435,
	109, 435,
	110, 435,
	111, 435,
	112, 435,
	113, 435,
	114, 435,
	-2, 467,
	-1, 264,
	108, 436,
	109, 436,
	110, 436,
	111, 436,
	112, 436,
	113, 436,
	114, 436,
	-2, 468,
	-1, 271,
	108, 458,
	109, 458,
	110, 458,
	111, 458,
	112, 458,
	113, 458,
	114, 458,
	-2, 490,
	-1, 272,
	108, 459,
	109, 459,
	110, 459,
	111, 459,
	112, 459,
	113, 459,
	114, 459,
	-2, 491,
	-1, 273,
	108, 460,
	109, 460,
	110, 460,
	111, 460,
	112, 460,
	113, 460,
	114, 460,
	-2, 492,
	-1, 274,
	108, 461,
	109, 461,
	110, 461,
	111, 461,
	112, 461,
	113, 461,
	114, 461,
	-2, 493,
	-1, 275,
	108, 462,
	109, 462,
	110, 462,
	111, 462,
	112, 462,
	113, 462,
	114, 462,
	-2, 494,
	-1, 276,
	108, 463,
	109, 463,
	110, 463,
	111, 463,
	112, 463,
	113, 463,
	114, 463,
	-2, 495,
	-1, 278,
	108, 561,
	109, 561,
	110, 561,
	111, 561,
	112, 561,
	113, 561,
	114, 561,
	-2, 564,
	-1, 334,
	108, 832,
	-2, 65,
	-1, 335,
	108, 860,
	-2, 66,
	-1, 336,
	108, 820,
	-2, 67,
	-1, 340,
	108, 804,
	149, 804,
	-2, 638,
	-1, 342,
	108, 842,
	149, 842,
	-2, 640,
	-1, 553,
	108, 452,
	109, 452,
	110, 452,
	111, 452,
	112, 452,
	113, 452,
	114, 452,
	-2, 484,
	-1, 573,
	56, 672,
	136, 677,
	137, 672,
	138, 672,
	-2, 568,
	-1, 575,
	108, 453,
	109, 453,
	110, 453,
	111, 453,
	112, 453,
	113, 453,
	114, 453,
	-2, 485,
	-1, 576,
	108, 454,
	109, 454,
	110, 454,
	111, 454,
	112, 454,
	113, 454,
	114, 454,
	-2, 486,
	-1, 577,
	108, 455,
	109, 455,
	110, 455,
	111, 455,
	112, 455,
	113, 455,
	114, 455,
	-2, 487,
	-1, 578,
	108, 456,
	109, 456,
	110, 456,
	111, 456,
	112, 456,
	113, 456,
	114, 456,
	-2, 488,
	-1, 579,
	108, 457,
	109, 457,
	110, 457,
	111, 457,
	112, 457,
	113, 457,
	114, 457,
	-2, 489,
	-1, 585,
	74, 567,
	136, 679,
	-2, 496,
	-1, 636,
	55, 45,
	57, 45,
	-2, 47,
	-1, 792,
	108, 562,
	109, 562,
	110, 562,
	111, 562,
	112, 562,
	113, 562,
	114, 562,
	-2, 565,
	-1, 793,
	136, 683,
	-2, 676,
	-1, 794,
	136, 677,
	-2, 672,
	-1, 806,
	108, 437,
	109, 437,
	110, 437,
	111, 437,
	112, 437,
	113, 437,
	114, 437,
	-2, 469,
	-1, 807,
	108, 438,
	109, 438,
	110, 438,
	111, 438,
	112, 438,
	113, 438,
	114, 438,
	-2, 470,
	-1, 808,
	108, 439,
	109, 439,
	110, 439,
	111, 439,
	112, 439,
	113, 439,
	114, 439,
	-2, 471,
	-1, 809,
	108, 440,
	109, 440,
	110, 440,
	111, 440,
	112, 440,
	113, 440,
	114, 440,
	-2, 472,
	-1, 810,
	108, 441,
	109, 441,
	110, 441,
	111, 441,
	112, 441,
	113, 441,
	114, 441,
	-2, 473,
	-1, 811,
	108, 442,
	109, 442,
	110, 442,
	111, 442,
	112, 442,
	113, 442,
	114, 442,
	-2, 474,
	-1, 812,
	108, 443,
	109, 443,
	110, 443,
	111, 443,
	112, 443,
	113, 443,
	114, 443,
	-2, 475,
	-1, 813,
	108, 444,
	109, 444,
	110, 444,
	111, 444,
	112, 444,
	113, 444,
	114, 444,
	-2, 476,
	-1, 814,
	108, 445,
	109, 445,
	110, 445,
	111, 445,
	112, 445,
	113, 445,
	114, 445,
	-2, 477,
	-1, 815,
	108, 446,
	109, 446,
	110, 446,
	111, 446,
	112, 446,
	113, 446,
	114, 446,
	-2, 478,
	-1, 816,
	108, 447,
	109, 447,
	110, 447,
	111, 447,
	112, 447,
	113, 447,
	114, 447,
	-2, 479,
	-1, 817,
	108, 448,
	109, 448,
	110, 448,
	111, 448,
	112, 448,
	113, 448,
	114, 448,
	-2, 480,
	-1, 818,
	108, 451,
	109, 451,
	110, 451,
	111, 451,
	112, 451,
	113, 451,
	114, 451,
	-2, 483,
	-1, 823,
	108, 449,
	109, 449,
	110, 449,
	111, 449,
	112, 449,
	113, 449,
	114, 449,
	-2, 481,
	-1, 826,
	108, 450,
	109, 450,
	110, 450,
	111, 450,
	112, 450,
	113, 450,
	114, 450,
	-2, 482,
	-1, 1068,
	5, 31,
	-2, 429,
	-1, 1093,
	5, 30,
	-2, 609,
	-1, 1200,
	108, 563,
	109, 563,
	110, 563,
	111, 563,
	112, 563,
	113, 563,
	114, 563,
	-2, 566,
	-1, 1333,
	5, 31,
	-2, 610,
	-1, 1379,
	5, 30,
	-2, 612,
	-1, 1442,
	5, 31,
	-2, 613,
}

const yyPrivate = 57344

const yyLast = 14043

var yyAct = [...]int{
	571, 1433, 988, 512, 715, 1390, 1236, 582, 1264, 920,
	1237, 902, 940, 968, 944, 290, 903, 982, 1339, 1156,
	629, 24, 631, 1113, 852, 1233, 943, 750, 339, 946,
	1097, 1043, 850, 663, 80, 1159, 1209, 1147, 581, 3,
	648, 890, 59, 954, 818, 853, 233, 1102, 224, 795,
	490, 496, 978, 436, 1063, 647, 332, 898, 633, 618,
	502, 510, 318, 242, 58, 317, 278, 1005, 598, 1328,
	333, 1462, 1452, 1460, 1440, 1458, 441, 989, 1451, 328,
	327, 1004, 1439, 237, 1228, 1325, 325, 239, 316, 54,
	29, 30, 232, 291, 53, 225, 226, 227, 228, 440,
	1399, 658, 757, 659, 1271, 1272, 1259, 1260, 935, 936,
	1275, 246, 1009, 1273, 649, 461, 650, 1258, 188, 184,
	185, 186, 934, 1003, 1415, 829, 828, 838, 839, 831,
	832, 833, 834, 835, 836, 837, 830, 1121, 745, 840,
	1120, 755, 478, 1122, 658, 757, 659, 53, 480, 747,
	1138, 961, 1351, 969, 1313, 238, 748, 1311, 1366, 229,
	646, 322, 449, 223, 475, 476, 473, 474, 1459, 1457,
	899, 1434, 1180, 1210, 900, 921, 923, 450, 443, 1391,
	181, 714, 182, 63, 1397, 182, 723, 446, 956, 651,
	1112, 1111, 1000, 997, 998, 1393, 996, 468, 956, 941,
	1110, 463, 1212, 465, 469, 469, 469, 469, 438, 199,
	469, 65, 66, 67, 68, 69, 956, 183, 469, 1420,
	1132, 1007, 1010, 252, 841, 842, 549, 550, 462, 464,
	187, 1336, 1177, 1206, 840, 278, 278, 1214, 1179, 1218,
	1191, 1213, 1211, 1220, 1076, 1037, 849, 1216, 437, 516,
	767, 517, 278, 456, 1279, 764, 1215, 1425, 1002, 509,
	833, 834, 835, 836, 837, 830, 1289, 337, 840, 1217,
	1219, 802, 830, 922, 1015, 840, 1184, 499, 962, 498,
	1001, 1100, 1416, 1392, 652, 800, 801, 799, 1230, 891,
	891, 1083, 278, 718, 1274, 1136, 552, 467, 467, 467,
	467, 827, 278, 467, 969, 1438, 1167, 955, 1398, 1396,
	900, 467, 460, 507, 1034, 1035, 1036, 955, 1006, 508,
	507, 1428, 504, 958, 486, 56, 1232, 1444, 1280, 509,
	333, 1008, 53, 1367, 1357, 955, 509, 1356, 1165, 654,
	953, 951, 1151, 798, 952, 1073, 55, 538, 959, 452,
	453, 454, 180, 548, 1167, 1150, 1139, 1178, 1423, 1176,
	831, 832, 833, 834, 835, 836, 837, 830, 655, 1072,
	840, 1071, 580, 600, 601, 602, 603, 604, 605, 606,
	1183, 1016, 658, 757, 659, 584, 1165, 587, 588, 589,
	590, 591, 592, 593, 594, 1267, 597, 599, 599, 599,
	599, 599, 599, 599, 599, 607, 608, 609, 610, 645,
	644, 637, 508, 507, 1266, 1133, 630, 991, 442, 315,
	821, 508, 507, 500, 729, 1166, 508, 507, 728, 509,
	1171, 1168, 1161, 1162, 1169, 1164, 1163, 719, 509, 717,
	469, 712, 466, 509, 785, 787, 788, 1170, 469, 458,
	451, 770, 771, 1173, 437, 231, 1448, 489, 489, 469,
	469, 469, 469, 469, 469, 469, 469, 819, 1403, 786,
	658, 757, 659, 1166, 469, 469, 469, 469, 1171, 1168,
	1161, 1162, 1169, 1164, 1163, 732, 1383, 1431, 640, 553,
	575, 576, 577, 578, 579, 1170, 444, 445, 1383, 489,
	1123, 1160, 776, 658, 757, 659, 751, 751, 278, 278,
	1402, 730, 516, 758, 756, 756, 586, 1276, 469, 1098,
	760, 1234, 766, 60, 1098, 508, 507, 337, 1383, 1384,
	1348, 1347, 641, 467, 639, 796, 1255, 489, 1335, 489,
	248, 467, 509, 1286, 1285, 772, 793, 1282, 1283, 1282,
	1281, 855, 467, 467, 467, 467, 467, 467, 467, 467,
	1099, 765, 1066, 489, 774, 1066, 820, 467, 467, 467,
	467, 26, 791, 789, 540, 541, 542, 543, 544, 545,
	546, 278, 1017, 489, 1198, 278, 615, 489, 278, 278,
	278, 278, 884, 884, 278, 1091, 855, 489, 884, 662,
	661, 1092, 508, 507, 1078, 615, 26, 1331, 278, 278,
	278, 278, 879, 880, 26, 884, 1099, 1075, 887, 509,
	1066, 56, 927, 857, 639, 615, 484, 614, 1288, 1284,
	1066, 1125, 894, 933, 896, 897, 1378, 485, 1019, 643,
	642, 895, 53, 469, 768, 239, 56, 470, 471, 472,
	1077, 1361, 477, 278, 615, 888, 56, 963, 983, 928,
	482, 1098, 469, 1074, 56, 580, 1249, 1128, 979, 857,
	974, 56, 1103, 1104, 780, 973, 71, 716, 584, 906,
	907, 905, 909, 986, 908, 487, 917, 1269, 1234, 1152,
	970, 971, 972, 925, 926, 56, 1106, 726, 481, 930,
	914, 912, 932, 1109, 1108, 915, 913, 911, 910, 322,
	322, 322, 322, 322, 1456, 792, 948, 1450, 469, 916,
	469, 624, 625, 1190, 630, 1020, 924, 1455, 469, 984,
	243, 244, 322, 620, 623, 624, 625, 621, 1095, 622,
	626, 1194, 1195, 1103, 1104, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	503, 980, 981, 822, 1192, 1193, 278, 278, 469, 278,
	1032, 1031, 1143, 1026, 1025, 493, 497, 501, 491, 660,
	278, 459, 1135, 843, 844, 845, 846, 847, 848, 1430,
	492, 1429, 518, 1376, 1129, 1329, 793, 1362, 993, 620,
	623, 624, 625, 621, 1033, 622, 626, 725, 1188, 628,
	503, 467, 234, 467, 1408, 796, 240, 241, 1030, 235,
	1024, 467, 1023, 1027, 60, 1407, 1029, 1364, 1099, 505,
	1417, 1352, 583, 763, 62, 753, 7, 754, 6, 64,
	337, 638, 596, 752, 5, 57, 1, 858, 761, 1039,
	469, 1327, 278, 551, 990, 1155, 278, 999, 1432, 945,
	1389, 1263, 950, 942, 435, 70, 1424, 931, 949, 1395,
	820, 1350, 957, 1137, 960, 937, 1065, 1268, 793, 1427,
	1134, 668, 713, 667, 665, 1059, 1038, 666, 664, 278,
	722, 670, 278, 669, 759, 574, 208, 329, 207, 330,
	627, 733, 734, 735, 736, 737, 738, 739, 740, 653,
	985, 506, 72, 1080, 1175, 1174, 741, 742, 743, 744,
	995, 1182, 746, 1014, 479, 1114, 211, 286, 279, 824,
	825, 1082, 281, 282, 283, 284, 537, 1093, 280, 287,
	1028, 285, 1119, 338, 469, 1241, 769, 495, 1116, 1406,
	964, 965, 966, 967, 1363, 1081, 1107, 1115, 1126, 1117,
	595, 889, 277, 784, 258, 792, 975, 976, 977, 775,
	1090, 1124, 539, 250, 1118, 320, 611, 619, 1140, 1141,
	617, 1142, 616, 1144, 1145, 1146, 1105, 1153, 469, 1101,
	469, 319, 1094, 1197, 1096, 1324, 1130, 1131, 1414, 779,
	28, 61, 245, 1148, 1148, 23, 22, 21, 19, 18,
	17, 20, 1149, 469, 16, 15, 14, 32, 13, 12,
	11, 322, 10, 9, 1040, 1041, 1042, 8, 4, 236,
	25, 2, 0, 1172, 0, 0, 0, 0, 469, 278,
	0, 0, 0, 0, 1158, 0, 0, 1062, 782, 783,
	0, 1187, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 0, 0, 0, 278, 0, 0,
	0, 1201, 1202, 0, 0, 257, 0, 469, 0, 0,
	0, 467, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 516, 0, 1114, 1242, 884,
	278, 278, 820, 1235, 278, 793, 467, 278, 1238, 83,
	1222, 0, 1208, 196, 0, 1245, 196, 1221, 0, 0,
	1243, 0, 0, 1229, 0, 583, 469, 196, 469, 1265,
	881, 882, 0, 1240, 0, 0, 0, 0, 0, 0,
	1244, 945, 1262, 196, 196, 83, 0, 1257, 0, 196,
	0, 83, 1261, 1277, 1278, 0, 1038, 0, 1256, 0,
	992, 1291, 994, 0, 0, 1270, 0, 0, 0, 0,
	1013, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 278, 1239, 1157, 53, 0,
	0, 0, 469, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 1252, 1253, 469, 1290, 0,
	751, 0, 0, 1297, 0, 0, 1299, 0, 756, 1301,
	0, 1292, 0, 0, 1295, 0, 0, 0, 1300, 0,
	0, 0, 1309, 278, 0, 1200, 0, 0, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 1340, 1340, 1340, 0, 1345, 196, 0, 196,
	0, 1330, 469, 0, 0, 196, 0, 0, 1204, 1205,
	1341, 1342, 1343, 0, 1225, 196, 1126, 1344, 488, 83,
	83, 83, 83, 0, 0, 83, 0, 0, 469, 469,
	469, 1338, 322, 83, 0, 1353, 0, 1355, 1223, 1224,
	0, 1226, 1227, 1346, 1360, 196, 1021, 1022, 1359, 497,
	0, 0, 1354, 0, 1314, 0, 0, 0, 0, 0,
	0, 1365, 1323, 945, 83, 945, 0, 0, 0, 278,
	0, 0, 0, 0, 0, 0, 516, 516, 0, 1381,
	1382, 0, 1377, 0, 0, 0, 0, 1238, 0, 1265,
	0, 0, 0, 1375, 1388, 1374, 0, 1394, 0, 0,
	0, 0, 1340, 0, 0, 0, 1400, 0, 1401, 0,
	0, 0, 0, 1379, 572, 0, 0, 0, 0, 0,
	1404, 467, 0, 0, 1421, 1418, 0, 0, 0, 1200,
	0, 196, 0, 0, 1238, 1422, 1067, 0, 196, 196,
	196, 0, 0, 0, 1304, 83, 0, 0, 278, 278,
	0, 0, 191, 0, 83, 222, 1436, 0, 884, 1419,
	0, 516, 0, 1426, 1443, 1239, 230, 1303, 1380, 1441,
	1154, 0, 1084, 0, 0, 1449, 1446, 0, 323, 0,
	249, 0, 191, 191, 0, 0, 0, 0, 191, 1453,
	1454, 0, 0, 0, 0, 1181, 1405, 0, 1445, 945,
	828, 838, 839, 831, 832, 833, 834, 835, 836, 837,
	830, 0, 1239, 840, 53, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1157, 945, 0, 1306,
	1307, 0, 1308, 0, 0, 1310, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	0, 0, 439, 0, 0, 83, 0, 0, 0, 0,
	0, 196, 196, 83, 0, 196, 0, 0, 196, 0,
	0, 0, 196, 0, 83, 83, 83, 83, 83, 83,
	83, 83, 1368, 1369, 1349, 1370, 1371, 1372, 0, 83,
	83, 83, 83, 1461, 0, 0, 191, 196, 191, 0,
	0, 0, 0, 196, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 83, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 83, 829, 828,
	838, 839, 831, 832, 833, 834, 835, 836, 837, 830,
	0, 555, 840, 0, 483, 0, 0, 0, 0, 494,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	447, 0, 448, 0, 1231, 0, 494, 0, 455, 0,
	0, 0, 520, 1044, 523, 0, 0, 0, 457, 0,
	1246, 1247, 0, 0, 1248, 205, 0, 1250, 521, 522,
	519, 525, 524, 534, 535, 527, 528, 529, 530, 531,
	532, 533, 526, 0, 0, 536, 494, 261, 0, 0,
	0, 0, 0, 217, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 196, 0,
	191, 196, 196, 196, 196, 196, 0, 191, 635, 191,
	0, 0, 0, 196, 0, 0, 196, 0, 0, 0,
	196, 0, 0, 0, 196, 196, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	1358, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 1321, 489, 0, 0, 0, 200, 0, 0,
	0, 0, 202, 0, 613, 0, 0, 0, 0, 209,
	204, 0, 0, 636, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 0, 773, 0,
	583, 0, 0, 0, 0, 0, 206, 0, 0, 212,
	196, 0, 0, 83, 210, 83, 0, 0, 0, 196,
	0, 0, 196, 83, 829, 828, 838, 839, 831, 832,
	833, 834, 835, 836, 837, 830, 0, 0, 840, 201,
	191, 191, 0, 0, 191, 0, 0, 191, 0, 0,
	0, 731, 0, 0, 0, 0, 261, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 213, 214,
	215, 216, 221, 261, 0, 0, 191, 219, 218, 220,
	854, 856, 762, 1318, 489, 829, 828, 838, 839, 831,
	832, 833, 834, 835, 836, 837, 830, 0, 893, 840,
	191, 0, 494, 494, 720, 721, 0, 0, 724, 0,
	0, 727, 731, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 0, 0, 919, 838,
	839, 831, 832, 833, 834, 835, 836, 837, 830, 0,
	749, 840, 0, 0, 0, 829, 828, 838, 839, 831,
	832, 833, 834, 835, 836, 837, 830, 0, 0, 840,
	0, 0, 0, 0, 781, 0, 0, 0, 1435, 583,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 494,
	0, 0, 249, 249, 494, 494, 885, 885, 249, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 489, 0,
	0, 0, 249, 249, 249, 249, 554, 191, 0, 885,
	191, 191, 191, 191, 191, 0, 0, 0, 0, 0,
	83, 0, 918, 196, 0, 191, 0, 0, 0, 635,
	0, 0, 0, 191, 191, 0, 1319, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1018, 829,
	828, 838, 839, 831, 832, 833, 834, 835, 836, 837,
	830, 901, 260, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 83, 0, 83, 829, 828, 838, 839,
	831, 832, 833, 834, 835, 836, 837, 830, 929, 0,
	840, 566, 0, 0, 0, 0, 0, 0, 83, 191,
	0, 196, 196, 0, 0, 196, 0, 0, 191, 0,
	1046, 191, 0, 0, 196, 0, 0, 0, 0, 261,
	261, 0, 0, 83, 0, 0, 829, 828, 838, 839,
	831, 832, 833, 834, 835, 836, 837, 830, 0, 1064,
	840, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	494, 494, 731, 494, 0, 0, 0, 272, 0, 0,
	0, 823, 826, 987, 249, 0, 0, 0, 1069, 1070,
	0, 0, 1011, 0, 0, 1012, 1079, 0, 0, 0,
	83, 1085, 83, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 0, 261, 0, 0, 0, 261, 0, 0, 261,
	261, 261, 261, 0, 0, 261, 0, 0, 0, 0,
	0, 83, 0, 83, 83, 0, 0, 0, 0, 261,
	261, 261, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 260, 0, 731, 0, 249, 0, 196, 0,
	494, 0, 0, 0, 0, 0, 83, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	196, 0, 0, 0, 261, 0, 83, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 494, 83, 0, 1203,
	0, 0, 0, 0, 196, 0, 0, 0, 260, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 260, 829,
	828, 838, 839, 831, 832, 833, 834, 835, 836, 837,
	830, 0, 191, 840, 0, 0, 0, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 272, 272, 0, 0,
	0, 0, 0, 0, 0, 83, 1045, 83, 83, 83,
	196, 83, 0, 272, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 1207, 0, 829, 828, 838, 839,
	831, 832, 833, 834, 835, 836, 837, 830, 0, 0,
	840, 0, 0, 83, 83, 83, 0, 261, 261, 0,
	261, 0, 0, 272, 264, 0, 321, 0, 0, 0,
	0, 261, 0, 272, 0, 0, 0, 0, 0, 0,
	1185, 1186, 1254, 0, 1189, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 83, 83, 249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 249, 0, 1060, 1061, 0, 0, 0, 0, 0,
	0, 731, 0, 261, 0, 0, 0, 261, 494, 83,
	0, 0, 0, 0, 0, 0, 885, 1196, 0, 0,
	0, 565, 0, 885, 494, 494, 0, 0, 494, 0,
	1302, 494, 0, 0, 0, 0, 0, 0, 1305, 0,
	261, 0, 0, 261, 260, 260, 83, 0, 0, 0,
	1315, 1316, 1317, 0, 0, 1320, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 0, 1337, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 264, 264, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 494,
	264, 0, 0, 0, 0, 0, 0, 260, 547, 0,
	0, 260, 0, 191, 260, 260, 260, 260, 883, 886,
	260, 0, 0, 0, 892, 0, 0, 0, 0, 272,
	272, 1287, 0, 0, 260, 260, 260, 260, 0, 0,
	264, 904, 0, 1373, 0, 0, 0, 494, 0, 0,
	264, 0, 0, 1294, 494, 0, 0, 0, 0, 0,
	1385, 1386, 1387, 0, 0, 0, 0, 0, 0, 635,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 0, 0, 0, 0, 0, 1409, 1410, 1411, 1412,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 0, 0, 272, 0, 261, 272,
	272, 272, 272, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 0, 0, 0, 272,
	272, 272, 272, 1437, 0, 0, 0, 0, 1442, 0,
	0, 261, 261, 249, 0, 261, 271, 271, 261, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 0, 557, 0, 0,
	0, 0, 260, 260, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 494, 0, 0, 261, 0, 0, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 264, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 260, 0,
	0, 261, 260, 0, 0, 0, 0, 272, 272, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 0, 570, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	0, 0, 0, 264, 0, 0, 264, 264, 264, 264,
	0, 0, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 264, 264, 264,
	0, 0, 0, 0, 321, 321, 321, 321, 321, 0,
	261, 0, 0, 272, 0, 0, 0, 272, 0, 321,
	0, 0, 0, 276, 0, 0, 0, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 26, 27, 54, 29, 30, 0, 0, 0,
	272, 0, 0, 272, 0, 0, 0, 0, 0, 271,
	271, 45, 263, 263, 0, 0, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 261,
	261, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 271, 260, 0, 0, 271, 0, 0, 271,
	271, 271, 271, 0, 0, 271, 0, 0, 0, 0,
	260, 0, 0, 0, 264, 264, 0, 264, 904, 271,
	271, 271, 271, 0, 0, 904, 260, 260, 264, 0,
	260, 0, 0, 260, 0, 33, 34, 36, 35, 38,
	0, 0, 0, 0, 0, 0, 0, 273, 797, 0,
	0, 0, 276, 276, 0, 0, 39, 46, 47, 0,
	272, 48, 49, 37, 271, 0, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 41, 42, 0, 43, 44,
	50, 51, 52, 0, 0, 0, 569, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 264, 272, 0, 0, 0, 276,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 272, 272, 0, 0, 272, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 260,
	0, 55, 0, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 271, 271, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 263, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 260, 0, 0, 0, 0,
	0, 272, 0, 271, 0, 0, 0, 271, 263, 0,
	0, 0, 263, 273, 0, 263, 263, 263, 263, 0,
	0, 263, 0, 273, 0, 0, 0, 264, 0, 0,
	0, 0, 0, 0, 0, 263, 263, 263, 263, 0,
	271, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 0, 0, 0,
	0, 275, 275, 0, 0, 276, 276, 0, 0, 0,
	0, 0, 264, 0, 260, 260, 0, 0, 275, 0,
	263, 0, 0, 0, 904, 0, 0, 0, 264, 264,
	272, 0, 264, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 276, 0,
	0, 0, 276, 0, 0, 276, 276, 276, 276, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 276, 276, 276, 272,
	272, 0, 0, 264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 0,
	271, 0, 0, 263, 263, 0, 263, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 263, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 264, 273,
	273, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 271, 0, 0, 271, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 263, 0, 0, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 273, 0, 0, 273,
	273, 273, 273, 0, 0, 273, 263, 264, 0, 263,
	0, 0, 0, 276, 276, 0, 276, 0, 0, 273,
	273, 273, 273, 0, 275, 275, 271, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 274, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 274, 0,
	0, 271, 0, 0, 0, 0, 264, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 276,
	0, 275, 0, 276, 275, 275, 275, 275, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 275, 275, 275, 275, 274, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	271, 0, 0, 0, 0, 0, 0, 273, 273, 0,
	273, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 262, 0, 0, 0, 263, 263, 0,
	0, 263, 0, 0, 263, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 273, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 275, 275, 0, 275, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	273, 0, 263, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 274, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 276, 0,
	263, 276, 0, 0, 276, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 274, 275, 0,
	0, 274, 0, 0, 274, 274, 274, 274, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 274, 274, 274, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 0,
	273, 0, 0, 0, 0, 859, 860, 861, 862, 863,
	864, 865, 866, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 867, 0, 0, 0, 273, 274,
	276, 0, 0, 0, 0, 262, 262, 276, 0, 0,
	0, 0, 0, 0, 0, 273, 829, 828, 838, 839,
	831, 832, 833, 834, 835, 836, 837, 830, 0, 0,
	840, 273, 273, 0, 0, 273, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 263, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 262, 0,
	0, 0, 262, 0, 0, 262, 262, 262, 262, 0,
	0, 262, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 0, 275, 0, 262, 262, 262, 262, 0,
	0, 0, 274, 274, 0, 274, 273, 0, 0, 0,
	275, 685, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 275, 0, 0,
	275, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 276, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 686, 0, 0, 0, 0, 0,
	273, 0, 0, 262, 262, 0, 262, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 275, 262, 700, 701,
	702, 703, 704, 705, 706, 0, 707, 708, 709, 710,
	711, 687, 688, 689, 671, 672, 699, 0, 674, 0,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	691, 692, 693, 694, 695, 696, 697, 698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 262, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 275, 274, 274, 0, 0,
	274, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 262, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 262, 0,
	0, 262, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 414, 0, 386, 426, 364, 378,
	434, 379, 380, 407, 350, 394, 133, 376, 0, 367,
	345, 373, 346, 365, 388, 100, 391, 363, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 390, 418, 392, 412, 385, 408, 355, 401,
	427, 377, 405, 428, 0, 0, 262, 387, 82, 0,
	0, 658, 657, 659, 947, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 344, 403, 0,
	348, 351, 433, 421, 370, 371, 1127, 0, 0, 0,
	0, 0, 0, 389, 393, 409, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 262, 262, 354, 0, 369,
	410, 0, 343, 413, 419, 384, 197, 422, 382, 381,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 366,
	374, 96, 372, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 347, 0, 151, 167,
	179, 362, 420, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 358, 361, 356, 357, 395, 396,
	429, 430, 431, 411, 353, 0, 359, 360, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 386, 426, 364, 378, 434, 379, 380, 407, 350,
	394, 133, 376, 0, 367, 345, 373, 346, 365, 388,
	100, 391, 363, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 390, 418, 392,
	412, 385, 408, 355, 401, 427, 377, 405, 428, 0,
	0, 0, 387, 82, 0, 0, 658, 657, 659, 947,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 344, 403, 0, 348, 351, 433, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	409, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	0, 0, 354, 0, 369, 410, 0, 343, 413, 419,
	384, 197, 422, 382, 381, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 366, 374, 96, 372, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 347, 0, 151, 167, 179, 362, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 358,
	361, 356, 357, 395, 396, 429, 430, 431, 411, 353,
	0, 359, 360, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 424, 414, 0, 386, 426, 364, 378,
	434, 379, 380, 407, 350, 394, 133, 376, 0, 367,
	345, 373, 346, 365, 388, 100, 391, 363, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 390, 418, 392, 412, 385, 408, 355, 401,
	427, 377, 405, 428, 0, 0, 0, 387, 256, 0,
	0, 194, 794, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 344, 403, 0,
	348, 351, 433, 421, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 389, 393, 409, 383, 0, 0, 0,
	0, 0, 0, 790, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 0, 0, 354, 0, 369,
	410, 0, 343, 413, 419, 384, 197, 422, 382, 381,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 366,
	374, 96, 372, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 347, 0, 151, 167,
	179, 362, 420, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 358, 361, 356, 357, 395, 396,
	429, 430, 431, 411, 353, 0, 359, 360, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 386, 426, 364, 378, 434, 379, 380, 407, 350,
	394, 133, 376, 0, 367, 345, 373, 346, 365, 388,
	100, 391, 363, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 390, 418, 392,
	412, 385, 408, 355, 401, 427, 377, 405, 428, 0,
	0, 0, 387, 256, 0, 0, 194, 794, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 344, 403, 0, 348, 351, 433, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	409, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	0, 0, 354, 0, 369, 410, 0, 343, 413, 419,
	384, 197, 422, 382, 381, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 366, 374, 96, 372, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 347, 0, 151, 167, 179, 362, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 358,
	361, 356, 357, 395, 396, 429, 430, 431, 411, 353,
	0, 359, 360, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 424, 414, 0, 386, 426, 364, 378,
	434, 379, 380, 407, 350, 394, 133, 376, 0, 367,
	345, 373, 346, 365, 388, 100, 391, 363, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 390, 418, 392, 412, 385, 408, 355, 401,
	427, 377, 405, 428, 0, 0, 0, 387, 195, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 344, 403, 0,
	348, 351, 433, 421, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 389, 393, 409, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 0, 0, 354, 0, 369,
	410, 0, 343, 413, 419, 384, 197, 422, 382, 381,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 366,
	374, 96, 372, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 347, 0, 151, 167,
	179, 362, 420, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 358, 361, 356, 357, 395, 396,
	429, 430, 431, 411, 353, 0, 359, 360, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 386, 426, 364, 378, 434, 379, 380, 407, 350,
	394, 133, 376, 0, 367, 345, 373, 346, 365, 388,
	100, 391, 363, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 390, 418, 392,
	412, 385, 408, 355, 401, 427, 377, 405, 428, 56,
	0, 0, 387, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 344, 403, 0, 348, 351, 433, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	409, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	0, 0, 354, 0, 369, 410, 0, 343, 413, 419,
	384, 197, 422, 382, 381, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 366, 374, 96, 372, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 347, 0, 151, 167, 179, 362, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 358,
	361, 356, 357, 395, 396, 429, 430, 431, 411, 353,
	0, 359, 360, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 424, 414, 0, 386, 426, 364, 378,
	434, 379, 380, 407, 350, 394, 133, 376, 0, 367,
	345, 373, 346, 365, 388, 100, 391, 363, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 390, 418, 392, 412, 385, 408, 355, 401,
	427, 377, 405, 428, 0, 0, 0, 387, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 344, 403, 0,
	348, 351, 433, 421, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 389, 393, 409, 383, 0, 0, 0,
	0, 0, 0, 1199, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 0, 0, 354, 0, 369,
	410, 0, 343, 413, 419, 384, 197, 422, 382, 381,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 366,
	374, 96, 372, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 347, 0, 151, 167,
	179, 362, 420, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 358, 361, 356, 357, 395, 396,
	429, 430, 431, 411, 353, 0, 359, 360, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 386, 426, 364, 378, 434, 379, 380, 407, 350,
	394, 133, 376, 0, 367, 345, 373, 346, 365, 388,
	100, 391, 363, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 390, 418, 392,
	412, 385, 408, 355, 401, 427, 377, 405, 428, 0,
	0, 0, 387, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 344, 403, 0, 348, 351, 433, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	409, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	0, 0, 354, 0, 369, 410, 0, 343, 413, 419,
	384, 197, 422, 382, 381, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 366, 374, 96, 372, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 347, 0, 151, 167, 179, 362, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 358,
	361, 356, 357, 395, 396, 429, 430, 431, 411, 353,
	0, 359, 360, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 424, 414, 0, 386, 426, 364, 378,
	434, 379, 380, 407, 350, 394, 133, 376, 0, 367,
	345, 373, 346, 365, 388, 100, 391, 363, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 390, 418, 392, 412, 385, 408, 355, 401,
	427, 377, 405, 428, 0, 0, 0, 387, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 344, 403, 0,
	348, 351, 433, 421, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 389, 393, 409, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 0, 0, 354, 0, 369,
	410, 0, 343, 413, 419, 384, 197, 422, 382, 381,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 366,
	374, 96, 372, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 341, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 347, 0, 151, 167,
	179, 362, 420, 173, 174, 175, 176, 0, 0, 0,
	342, 340, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 358, 361, 356, 357, 395, 396,
	429, 430, 431, 411, 353, 0, 359, 360, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 386, 426, 364, 378, 434, 379, 380, 407, 350,
	394, 133, 376, 0, 367, 345, 373, 346, 365, 388,
	100, 391, 363, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 390, 418, 392,
	412, 385, 408, 355, 401, 427, 377, 405, 428, 0,
	0, 0, 387, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 344, 403, 0, 348, 351, 433, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	409, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	0, 0, 354, 0, 369, 410, 0, 343, 413, 419,
	384, 197, 422, 382, 381, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 366, 374, 96, 372, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 331, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 341,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 347, 0, 151, 167, 179, 362, 420, 173, 174,
	175, 176, 0, 0, 0, 342, 340, 336, 335, 334,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 358,
	361, 356, 357, 395, 396, 429, 430, 431, 411, 353,
	0, 359, 360, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 133, 0, 0, 851, 0, 259, 0,
	0, 0, 100, 0, 253, 0, 0, 114, 0, 0,
	0, 302, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 292, 256, 286, 279, 255, 254,
	193, 281, 282, 283, 284, 0, 93, 280, 287, 0,
	285, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 270, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 268,
	247, 0, 0, 0, 313, 0, 269, 0, 0, 265,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 311, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 303, 312, 309, 310, 307, 308, 306, 305, 304,
	314, 295, 296, 297, 298, 300, 0, 299, 84, 0,
	115, 177, 141, 102, 168, 133, 0, 0, 0, 0,
	259, 0, 0, 0, 100, 0, 253, 0, 0, 114,
	0, 0, 0, 302, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 292, 256, 286, 279,
	255, 254, 193, 281, 282, 283, 284, 0, 93, 280,
	287, 0, 285, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 270, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 247, 0, 0, 0, 313, 0, 269, 0,
	0, 265, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 311, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 303, 312, 309, 310, 307, 308, 306,
	305, 304, 314, 295, 296, 297, 298, 300, 0, 299,
	84, 0, 115, 177, 141, 102, 168, 133, 0, 0,
	0, 0, 259, 0, 0, 0, 100, 0, 253, 0,
	0, 114, 0, 0, 0, 302, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 489, 292, 256,
	286, 279, 255, 254, 193, 281, 282, 283, 284, 0,
	93, 280, 287, 0, 285, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	270, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 268, 0, 0, 0, 0, 313, 0,
	269, 0, 0, 265, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	311, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 303, 312, 309, 310, 307,
	308, 306, 305, 304, 314, 295, 296, 297, 298, 300,
	0, 299, 84, 0, 115, 177, 141, 102, 168, 133,
	0, 0, 0, 0, 259, 0, 0, 0, 100, 0,
	253, 0, 0, 114, 0, 0, 0, 302, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 938, 0, 56, 0, 0,
	292, 256, 286, 279, 255, 254, 193, 281, 282, 283,
	284, 0, 93, 280, 287, 0, 285, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 270, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 268, 0, 0, 0, 0,
	313, 0, 269, 0, 0, 265, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 311, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 303, 312, 309,
	310, 307, 308, 306, 305, 304, 314, 295, 296, 297,
	298, 300, 26, 299, 84, 0, 115, 177, 141, 102,
	168, 0, 0, 0, 133, 0, 0, 0, 0, 259,
	0, 0, 0, 100, 0, 253, 0, 0, 114, 0,
	0, 0, 302, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 292, 256, 286, 279, 255,
	254, 193, 281, 282, 283, 284, 0, 93, 280, 287,
	0, 285, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 270, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	268, 0, 0, 0, 0, 313, 0, 269, 0, 0,
	265, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 311, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 303, 312, 309, 310, 307, 308, 306, 305,
	304, 314, 295, 296, 297, 298, 300, 0, 299, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 0, 0,
	0, 259, 0, 0, 0, 100, 0, 253, 0, 0,
	114, 0, 0, 0, 302, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 292, 256, 286,
	279, 255, 254, 193, 281, 282, 283, 284, 0, 93,
	280, 287, 0, 285, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 270,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 0, 0, 0, 0, 313, 0, 269,
	0, 0, 265, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 311,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 303, 312, 309, 310, 307, 308,
	306, 305, 304, 314, 295, 296, 297, 298, 300, 133,
	299, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	574, 0, 0, 114, 0, 0, 0, 302, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	292, 256, 286, 279, 255, 573, 193, 281, 282, 283,
	284, 0, 93, 280, 287, 0, 285, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 0, 0, 0, 0,
	313, 0, 563, 0, 0, 559, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 311, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 1464,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 303, 312, 309,
	310, 307, 308, 306, 305, 304, 314, 295, 296, 297,
	298, 300, 133, 299, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 574, 0, 0, 114, 0, 0, 0,
	302, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 292, 256, 286, 279, 255, 573, 193,
	281, 282, 283, 284, 0, 93, 280, 287, 0, 285,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 0,
	0, 0, 0, 313, 0, 563, 0, 0, 559, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 311, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	303, 312, 309, 310, 307, 308, 306, 305, 304, 314,
	295, 296, 297, 298, 300, 133, 299, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 574, 0, 0, 114,
	0, 0, 0, 302, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 292, 256, 286, 279,
	585, 573, 193, 281, 282, 283, 284, 0, 93, 280,
	287, 0, 285, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 0, 0, 0, 0, 313, 0, 563, 0,
	0, 559, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 311, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 303, 312, 309, 310, 307, 308, 306,
	305, 304, 314, 295, 296, 297, 298, 300, 0, 299,
	84, 0, 115, 177, 141, 102, 168, 133, 0, 0,
	0, 511, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 513, 514, 515, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 508, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	73, 0, 0, 0, 79, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 75, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 76,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 82, 0, 0, 513, 514,
	515, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 195, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 115, 177, 141, 102, 168, 133, 0,
	0, 0, 634, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 195, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 84, 0, 115, 177,
	141, 102, 168, 100, 0, 656, 0, 0, 114, 0,
	0, 0, 0, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 658,
	657, 659, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 0, 0,
	634, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 632, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 84, 0, 115, 177, 141, 102, 168, 612, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 513, 514, 515, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 194, 794, 193,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 81, 0, 777, 0, 0, 778,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 115, 177,
	141, 102, 168,
}

var yyPact = [...]int{
	2956, -1000, -217, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 809, 829, -1000, -1000, -1000, -1000,
	-1000, -1000, 620, 10202, 32, 71, -27, 12498, 63, 1613,
	13257, -1000, -18, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-26, 13257, 395, 608, -1000, -1000, -1000, -1000, -1000, 795,
	803, 639, 796, 688, -1000, 7877, 35, 11223, 12245, 7353,
	-1000, 394, 61, 13257, -166, 13763, 27, 27, 27, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41, 13257, -1000, 13257, 26, 390, 26, 26, 26, 13257,
	-1000, 117, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13257,
	389, 751, 55, 6253, 6253, 6253, 6253, -11, -13, 6253,
	-105, -92, 644, -1000, -1000, -1000, -1000, 6253, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13257,
	615, 630, 400, 759, 8928, 8928, 809, -1000, 608, -1000,
	-1000, -1000, 739, -1000, -1000, 252, 818, -1000, 9949, 115,
	-1000, 8928, 1532, 590, -1000, -1000, -1000, -1000, 466, 590,
	89, 222, -1000, -1000, -1000, 9434, 9434, 9434, 9434, 9434,
	9434, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 590, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8666, 9687, 590, 590, 590, 590, 590, 590, 590,
	590, 8928, 590, 590, 590, 590, 590, 590, 590, 590,
	590, 590, 590, 590, 590, 11992, 597, 755, -1000, -1000,
	-1000, 787, 10708, 11738, 13257, 477, -1000, 583, 582, 7078,
	-21, -133, -1000, 40, -1000, -1000, -1000, 176, 11476, -1000,
	-1000, 749, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 542, -1000, 4201, 381, 6253,
	33, 622, 379, 193, 377, 13257, 13257, 6253, 37, 13257,
	784, 643, 13257, 368, 364, -1000, 5978, -1000, 6253, 6253,
	6253, 6253, 6253, 6253, 6253, 6253, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6253, 6253, 6253, 6253, -1000, -110, -85,
	-1000, 13257, -1000, -1000, 81, 81, 4201, 13257, -1000, -1000,
	-1000, 824, 137, 504, 114, 587, -1000, 427, 795, 400,
	688, 13510, 629, -1000, -1000, 13257, -1000, 8928, 8928, 369,
	-1000, 12751, -1000, -1000, -1000, -1000, -1000, 5428, 144, 269,
	169, 9434, 9434, 9434, 9434, 9434, 9434, 9434, 9434, 9434,
	9434, 9434, 9434, 9434, 9434, 9434, 407, -1000, 360, 9434,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 608, 866,
	866, 227, -1000, 101, 87, 222, -1000, -1000, -1000, 9434,
	9434, 9434, 9434, 9434, 9434, -1000, -1000, -1000, -1000, -1000,
	-1000, 590, 110, -1000, -1000, 101, 101, 101, 101, 101,
	7615, 400, 539, 328, 8666, -1000, 4007, 7877, 7877, 8928,
	8928, 13004, 13004, 7877, 789, 186, 328, 13004, -1000, 400,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7877, 7877, 7877,
	7877, 141, 13257, -1000, 13004, 11223, 11223, 11223, 11223, 11223,
	-1000, 664, 663, -1000, 657, 656, 675, 13257, -1000, 529,
	10708, 123, 590, -1000, 13257, -1000, 5, 567, 11223, 13257,
	-1000, -1000, 7078, 9434, 583, 582, -133, 576, -1000, -126,
	-142, 9434, 8401, 66, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5153, 188, 248, -80, -1000, -1000, -1000, -1000, 601,
	-1000, 601, 601, 601, 601, -53, -53, -53, -53, -1000,
	-1000, -1000, -1000, -1000, 619, 614, -1000, 601, 601, 601,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 612, 612, 612,
	602, 602, 628, -1000, 13257, -199, 357, 6253, 775, 6253,
	-1000, 52, -1000, 13257, -1000, -1000, 13257, 6253, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 263, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 525,
	-1000, 581, -1000, -1000, 685, 8928, 8928, 5703, 8928, -1000,
	741, 740, 759, -1000, 789, 807, -1000, 735, 734, 7877,
	-1000, -1000, 144, 214, -1000, -1000, 239, -1000, -1000, -1000,
	-1000, 109, 590, -1000, -1000, -1000, -1000, -1000, -1000, 269,
	9434, 9434, 9434, 1469, 1947, 2227, 1788, 1340, 101, 135,
	135, 142, 142, 142, 142, 142, 237, 237, -1000, -1000,
	-1000, 400, 1947, 222, -1000, -1000, 222, -1000, 9434, 9434,
	9434, 9434, 9434, 9434, 9434, 9434, 9434, 9434, 9434, 9434,
	407, 866, 866, 101, 101, 101, 101, 101, 101, 5703,
	400, 7877, 563, -1000, -1000, 8928, -1000, 400, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 505,
	505, 314, 323, 606, -1000, 108, 593, 505, 7877, 185,
	-1000, 8928, 400, -1000, 505, 400, 505, 505, 565, 702,
	590, -1000, 604, -1000, 173, 755, 618, 642, 689, -1000,
	-1000, -1000, -1000, 660, -1000, 659, -1000, -1000, -1000, -1000,
	-1000, 53, 44, 43, 13763, -1000, 816, 11223, 548, -1000,
	-1000, 1947, 576, -133, -112, -1000, -1000, 1947, -1000, 328,
	-1000, 440, 574, 4878, -1000, -1000, -1000, -1000, -1000, -1000,
	611, 766, 170, 160, 355, -1000, -1000, 753, -1000, 220,
	-82, -1000, -1000, 290, -53, -53, -1000, -1000, 66, 742,
	66, 66, 66, 319, 319, -1000, -1000, -1000, -1000, 289,
	-1000, -1000, -1000, 276, -1000, 635, 13763, 6253, -1000, 6803,
	-1000, -1000, -1000, -1000, -1000, -1000, 326, 278, 210, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3, -1000, 6253, -1000, 264, 13257, 13257, 4201, 786, 13257,
	682, 328, 328, 104, -1000, 730, 707, -1000, 13257, -1000,
	-1000, -1000, -1000, 573, -1000, -1000, -1000, 6528, 7877, -1000,
	1469, 1947, 2170, -1000, 9434, 9434, -1000, 1788, 1340, 101,
	135, 135, 142, 142, 142, 142, 142, 237, 237, -1000,
	222, 222, 590, 97, -1000, 505, 7877, 328, -1000, -1000,
	-1000, 39, 407, 39, 9434, 9434, 5703, 9434, 9434, -189,
	508, 181, -1000, 8928, 221, -1000, -1000, -1000, -1000, -1000,
	634, 13004, 590, -1000, 10455, -1000, 13763, 809, 13004, 8928,
	8928, -1000, -1000, 8928, 610, -1000, 8928, -1000, -1000, -1000,
	590, 590, 590, 479, -1000, 809, 548, -1000, -1000, -1000,
	-132, -147, -1000, -1000, -1000, 5153, -1000, 5153, 13763, -1000,
	354, 335, -1000, -1000, 633, 38, -1000, -1000, -1000, 459,
	66, 66, -1000, 194, -1000, -1000, -1000, 492, -1000, 490,
	572, 486, 13257, -1000, -1000, 571, -1000, 158, -1000, -1000,
	13763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13763, 13257, -1000, -1000, -1000, -1000, -1000,
	13763, -1000, -1000, 319, 8928, -1000, -1000, -1000, 81, -1000,
	-1000, 6803, -1000, -1000, -1000, -1000, -1000, 816, 11223, -1000,
	-1000, 400, -1000, 9434, 1947, 1947, 6803, -1000, -1000, 400,
	601, 601, -1000, 601, 602, -1000, 601, -35, 601, -38,
	590, 400, 400, 1806, 1997, -1000, 1685, 1746, 590, -186,
	-1000, 328, 8928, -211, 768, 467, 550, -1000, -1000, 8139,
	400, 481, 95, 479, 795, -1000, 328, 328, 328, 13763,
	328, 13763, 13763, 13763, 10970, 13763, 795, -1000, -1000, -1000,
	-1000, 4878, -1000, 473, -1000, 601, -1000, -1000, -76, 822,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -53, 319, -53, 271, -1000, 268, 6253, 6803, 5153,
	-1000, 595, -1000, -1000, -1000, -1000, 771, -1000, 328, -1000,
	814, 568, -1000, 1947, -1000, -1000, -1000, 98, -1000, -1000,
	-1000, -1000, -1000, -1000, 267, -1000, -1000, -1000, 9434, 9434,
	-1000, 9434, 9434, 9434, 400, 319, 328, -1000, 7877, 765,
	-1000, 590, -1000, -1000, 600, 12751, 12751, -1000, -1000, 471,
	-1000, 441, 441, 441, 123, -1000, -1000, 124, 13763, -1000,
	156, -1000, -156, 66, -1000, 66, 452, 410, -1000, -1000,
	-1000, 13763, 590, 811, 798, -1000, -1000, 400, 1920, 1920,
	1920, 1920, 6, -1000, -1000, 563, 821, -1000, 590, -1000,
	608, 83, -1000, 13763, -1000, -1000, -1000, -1000, -1000, 124,
	-1000, 298, 149, 319, -1000, 250, 763, -1000, 761, -1000,
	-1000, -1000, -1000, -1000, 429, 2, -1000, 8928, 8928, -1000,
	-1000, -1000, -1000, -1000, 400, 31, -203, 13004, 550, 400,
	12751, -1000, -1000, -1000, 261, -1000, -1000, -1000, 319, -1000,
	-1000, 622, 399, -1000, 13763, 328, 494, -1000, 676, -197,
	-206, 462, -1000, -1000, -1000, -1000, -199, -1000, 2, 691,
	-1000, 673, -1000, -1000, -1000, -2, -201, -4, -204, 590,
	-207, 9181, -1000, 1920, 400, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1031, 38, 21, 1030, 1029, 1028, 843, 837, 835,
	1027, 1023, 1022, 1020, 1019, 1018, 1017, 1016, 1015, 1014,
	1011, 1010, 1009, 1008, 1007, 1006, 1005, 183, 1002, 1001,
	1000, 60, 999, 63, 998, 995, 31, 24, 32, 45,
	540, 993, 20, 65, 62, 991, 47, 989, 986, 86,
	982, 59, 980, 977, 1438, 976, 975, 9, 30, 973,
	3607, 972, 970, 1601, 223, 969, 964, 3456, 3146, 3041,
	2877, 963, 49, 7, 6, 15, 10, 2747, 2308, 1986,
	962, 961, 41, 960, 955, 954, 949, 42, 947, 51,
	946, 46, 50, 945, 18, 57, 23, 25, 11, 80,
	55, 79, 943, 16, 56, 40, 942, 940, 352, 936,
	926, 924, 923, 922, 921, 162, 418, 920, 915, 914,
	912, 28, 1075, 0, 197, 61, 911, 910, 3, 909,
	1374, 54, 58, 22, 900, 48, 442, 44, 899, 898,
	897, 896, 36, 894, 33, 893, 891, 888, 887, 884,
	883, 881, 278, 880, 879, 877, 13, 12, 874, 873,
	52, 17, 872, 871, 869, 37, 53, 868, 43, 866,
	865, 864, 863, 26, 14, 862, 8, 861, 5, 860,
	858, 1, 857, 19, 855, 2, 854, 4, 35, 853,
	851, 27, 848, 847, 29, 2471, 2081, 846, 845, 93,
	1278, 841, 839, 68,
}

var yyR1 = [...]int{
	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 201, 201, 49, 49, 95, 95, 10,
	10, 10, 10, 10, 10, 100, 100, 105, 105, 105,
	106, 106, 106, 106, 140, 140, 138, 138, 11, 11,
	11, 11, 11, 11, 11, 187, 187, 186, 185, 185,
	184, 184, 183, 16, 170, 171, 171, 171, 166, 143,
	143, 144, 144, 144, 144, 144, 151, 147, 147, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 148, 148, 148, 148, 148, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 150, 150, 150, 150, 150, 150, 150, 150, 165,
	165, 152, 152, 160, 160, 161, 161, 161, 158, 158,
	159, 159, 162, 162, 162, 153, 153, 153, 153, 153,
	153, 153, 155, 155, 163, 163, 156, 156, 156, 157,
	157, 157, 164, 164, 164, 164, 164, 154, 154, 167,
	167, 179, 179, 178, 178, 178, 169, 169, 175, 175,
	175, 175, 175, 168, 168, 177, 177, 176, 172, 172,
	172, 173, 173, 173, 174, 174, 174, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 182, 180, 180,
	181, 181, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 113, 113, 110,
	110, 111, 111, 112, 112, 112, 114, 114, 114, 141,
	141, 139, 139, 139, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 191,
	191, 191, 191, 191, 191, 26, 26, 192, 192, 202,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 126, 126, 126, 128, 128, 128, 128, 125, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	94, 94, 96, 96, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 134, 134, 133, 133, 133, 132,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 109, 109, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 71, 71, 71, 71, 71, 71, 61, 61, 61,
	61, 61, 61, 61, 36, 36, 72, 72, 72, 78,
	73, 73, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 196, 195, 69, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 203, 203, 70, 70, 70, 70,
	34, 34, 34, 34, 34, 137, 137, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 83, 83, 35, 35, 81, 81, 82, 84, 84,
	80, 80, 80, 80, 79, 79, 79, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	189, 189, 65, 65, 65, 85, 85, 86, 86, 87,
	87, 88, 88, 89, 90, 90, 90, 90, 90, 90,
	90, 91, 91, 91, 91, 92, 92, 92, 62, 62,
	62, 62, 62, 62, 93, 93, 93, 93, 97, 97,
	74, 74, 76, 76, 75, 77, 190, 190, 98, 98,
	103, 99, 99, 101, 101, 104, 104, 104, 102, 102,
	102, 129, 129, 129, 107, 107, 115, 115, 116, 116,
	108, 108, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 118, 118, 118, 119, 119, 120, 120, 120,
	127, 127, 123, 123, 123, 124, 124, 130, 130, 130,
	130, 130, 131, 131, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 194, 194, 194, 199, 200, 135,
	136, 136, 136,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	4, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 1, 3, 5, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 2, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 3, 3, 3,
	3, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 0, 2, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 139, 140, 142, 141, 167, 143, 160,
	52, 179, 180, 182, 183, 25, 161, 162, 165, 166,
	184, 185, 186, -199, 8, 265, 56, -198, 281, -87,
	15, -29, 5, -27, -202, -27, -27, -27, -27, -27,
	-170, 56, -120, 148, 98, 175, 257, 145, 146, 152,
	-123, 64, 60, -122, 273, 179, 193, 187, 213, 205,
	203, 206, 243, 71, 182, 253, 163, 202, 198, 196,
	27, 218, 278, 197, 158, 157, 219, 223, 244, 191,
	192, 247, 217, 159, 32, 275, 37, 171, 248, 221,
	246, 216, 212, 215, 190, 211, 41, 225, 224, 226,
	242, 208, 199, 18, 251, 166, 169, 220, 222, 153,
	173, 277, 249, 195, 170, 165, 252, 183, 245, 255,
	40, 230, 189, 156, 180, 177, 209, 172, 200, 201,
	214, 188, 210, 181, 174, 167, 254, 231, 279, 207,
	204, 178, 176, 235, 236, 237, 238, 276, 250, 232,
	-108, 148, 150, 146, 146, 147, 148, 257, 145, 146,
	-54, -130, 64, 65, 63, 60, -122, 148, 175, 146,
	134, 206, 139, 233, 147, 32, 173, -139, -141, 146,
	181, -110, 176, 235, 236, 237, 238, 60, 245, 244,
	246, 239, -130, 181, -135, -135, -135, -135, -135, 185,
	-130, 60, -2, -91, 17, 16, -5, -3, -199, 6,
	20, 21, -33, 42, 43, -28, -39, 125, -40, -130,
	-59, 100, -64, 29, 64, 63, 60, -122, -66, 23,
	-79, -63, -60, -77, -78, 134, 135, 123, 124, 131,
	101, -195, -196, -69, -67, -68, -70, -80, -123, 62,
	72, 66, 67, 68, 69, 75, 61, 73, 76, 77,
	-75, -199, 59, 46, 47, 266, 267, 268, 269, 272,
	270, 103, 36, 256, 264, 263, 262, 260, 261, 258,
	259, 151, 257, 129, 265, -108, -42, -43, -44, -45,
	-56, -78, -199, -54, 11, -49, -54, -99, -101, -140,
	-138, 181, -104, -123, 246, 245, 244, -124, -102, -121,
	243, 206, 242, 144, 99, 22, 24, 228, 102, 134,
	16, 103, 133, 266, 139, 50, 258, 259, 256, 268,
	269, 257, 233, 29, 10, 25, 161, 21, 127, 141,
	106, 107, 164, 23, 162, 77, 19, 53, 11, 13,
	14, 151, 150, 118, 147, 48, 8, 59, 26, 115,
	44, 28, 46, 116, 17, 260, 261, 31, 272, 168,
	129, 51, 38, 100, 75, 54, 98, 15, 49, 117,
	142, 265, 47, 145, 6, 271, 30, 160, 45, 146,
	234, 105, 149, 76, 5, 152, 9, 52, 55, 262,
	263, 264, 36, 104, 12, -171, -166, 60, 147, -54,
	265, -123, -116, 151, -116, -116, 146, -54, -54, -115,
	151, 60, -115, -115, -115, -54, 136, -54, 60, 30,
	257, 60, 173, 146, 174, 148, -136, -199, -124, -123,
	-136, -136, -136, 177, 178, 177, 178, -136, 247, -111,
	240, 54, -136, -130, 11, 22, -199, 55, -200, 58,
	-92, 19, 31, -40, -130, -88, -89, -40, -87, -2,
	-27, 38, -31, 21, 70, 11, -126, 99, 98, 115,
	-125, 22, -128, 63, 64, 65, -123, 136, -40, 118,
	100, 116, 117, 102, 120, 119, 130, 123, 124, 125,
	126, 127, 128, 129, 121, 122, 133, -109, -199, -61,
	108, 109, 110, 111, 112, 113, 114, -78, -199, 137,
	138, -189, 74, -64, -79, -63, -60, -77, -78, 134,
	135, 123, 124, 131, 101, -195, -196, -69, -67, -68,
	-70, -123, -130, 64, 29, -64, -64, -64, -64, -64,
	-199, -2, -73, -40, -199, 63, -64, -199, -199, -199,
	-199, -199, -199, -199, -199, -83, -40, -199, -203, -199,
	-203, -203, -203, -203, -203, -203, -203, -199, -199, -199,
	-199, -55, 26, -54, 30, 57, -50, -52, -51, -53,
	44, 48, 50, 45, 46, 47, 51, -134, 22, -42,
	-199, -133, 169, -132, 22, -130, -54, -49, -201, 57,
	11, 55, 57, 57, -99, -101, 181, -100, -105, 247,
	249, 149, 108, -129, -123, -194, 29, 64, 63, 65,
	30, 58, 57, -144, -147, -149, -148, -150, -151, -145,
	-146, 203, 204, 134, 207, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 30, 163, 200, 201, 202,
	97, 219, 220, 221, 222, 223, 224, 225, 226, 205,
	187, 188, 189, 190, 191, 192, 193, 195, 196, 197,
	198, 199, 60, -136, 148, -187, 55, 60, 100, 60,
	-54, -54, -136, 149, -54, 23, 54, -54, 60, 60,
	-131, -130, -121, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, 248, -113, 234, 241, -54,
	-191, -3, -7, -9, -8, 60, -194, 64, -191, -143,
	-144, -192, -130, 9, 118, 57, 18, 136, 57, -90,
	24, 25, -91, -200, -33, -65, -123, 66, 69, -32,
	45, -54, -40, -40, -71, 75, 100, 76, 77, -125,
	125, -131, -124, -121, 64, -72, -75, -78, 74, 118,
	116, 117, 102, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -137, 60,
	-194, 60, -64, -63, 63, 64, -63, 74, 120, 119,
	130, 123, 124, 125, 126, 127, 128, 129, 121, 122,
	133, 137, 138, -64, -64, -64, -64, -64, -64, 136,
	-38, 21, -37, -39, -200, 57, -200, -2, -193, 78,
	79, 80, 81, 82, 83, 84, 85, 97, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, -37,
	-37, -40, -40, -79, -123, -130, -79, -37, -31, -81,
	-82, 104, -79, -200, -37, -38, -37, -37, -95, 29,
	169, -54, -98, -103, -79, -43, -44, -44, -43, -44,
	44, 44, 44, 49, 44, 49, 44, -51, -130, -200,
	-57, 52, 150, 53, -199, -132, -95, 55, -42, -54,
	-104, -64, -100, 57, 248, 250, 251, -64, 54, -40,
	-157, 133, -172, -173, -174, -124, -194, 66, -166, -167,
	-175, 153, 156, 152, -168, 147, 28, -162, 75, 100,
	-158, 231, -152, 56, -152, -152, -152, -152, -156, 206,
	-156, -156, -156, 56, 56, -152, -152, -152, -160, 56,
	-160, -160, -161, 56, -161, -127, 55, -54, -185, 276,
	-186, 60, -136, 23, -136, -117, 144, 141, 142, -182,
	140, 228, 206, 71, 29, 15, 266, 169, 279, 60,
	170, -54, -54, -136, -112, 11, 118, 57, -200, 57,
	40, -40, -40, -131, -89, 33, 33, -92, -107, 19,
	11, 36, 36, -37, 75, 76, 77, 136, -199, -72,
	-64, -64, -64, -36, 164, 99, -200, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -137,
	-63, -63, -124, -131, -200, -37, 57, -40, -200, -200,
	-200, 57, 55, 22, 57, 11, 136, 57, 11, -200,
	-37, -84, -82, 106, -40, -200, -200, -200, -200, -200,
	-62, 30, 36, -2, -199, 36, -199, -58, 57, 12,
	108, -47, -46, 54, 55, -48, 54, -46, 44, 44,
	147, 147, 147, -96, -123, -58, -42, -58, -105, -106,
	252, 249, 255, 60, -194, 57, -174, 108, 56, 28,
	-168, -168, 60, 60, -153, 29, 75, -159, 232, 66,
	-156, -156, -157, 30, -157, -157, -157, -165, -194, -165,
	66, 66, 54, -123, -136, -184, -183, -124, -135, -188,
	175, 154, 155, 158, 157, 60, 147, 28, 153, 156,
	169, 152, -188, 175, -118, -119, 149, 22, 147, 28,
	169, -136, -114, 116, 12, -130, -130, -144, 22, -130,
	41, 136, 34, 35, 34, 35, -54, -41, 11, 125,
	-124, -38, -36, 99, -64, -64, 136, -200, -39, -142,
	134, 203, 163, 202, 198, 217, 208, 230, 200, 231,
	204, -137, -142, -64, -64, -124, -64, -64, 273, -87,
	107, -40, 105, -97, 54, -98, -74, -76, -75, -199,
	-2, -93, -128, -96, -87, -103, -40, -40, -40, 56,
	-40, -199, -199, -199, -200, 57, -87, -58, 249, 253,
	254, -173, -174, -177, -176, -123, 60, 60, -155, 54,
	-194, 66, 67, 75, 256, 72, 58, -157, -157, 60,
	134, 58, 57, 58, 57, 58, 57, -54, 57, 108,
	-135, -123, -135, -123, -54, -135, -123, -194, -40, -191,
	-58, -42, -200, -64, -124, -200, -152, -152, -152, -161,
	-152, 192, -152, 192, -199, -200, -200, -200, 57, 19,
	-200, 57, 19, -199, -35, 271, -40, -190, 280, 27,
	-97, 57, -200, -200, -200, 57, 136, -200, -91, -94,
	-123, -94, -94, -94, -133, -123, -91, 58, 57, -152,
	-163, 228, 9, -156, -194, -156, 66, 66, -136, -183,
	-174, 56, 26, -85, 13, -156, 60, 66, -64, -64,
	-64, -64, -64, -200, -194, -37, 28, -76, 36, -2,
	-199, -128, -128, 57, 58, -200, -200, -200, -57, -179,
	-178, 55, 159, 71, -176, -164, 153, 28, 152, 256,
	-157, -157, 58, 58, -94, -199, -86, 14, 16, -200,
	-200, -200, -200, -200, -34, 118, 276, 9, -74, -2,
	136, -123, -178, 60, -169, 108, -194, -154, 71, 28,
	28, 58, -180, -181, 169, -40, -73, -200, 274, 51,
	277, -98, -200, -128, 66, -194, -187, -200, 57, -123,
	41, 275, 278, -185, -181, 36, 41, 171, 276, 172,
	277, -199, 278, -64, 168, -200, -200,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 589, 0, 309, 309, 309, 309,
	309, 309, 0, 667, 650, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 899, 899, 899, 899, 899,
	0, 0, 0, 0, 37, 38, 897, 1, 3, 601,
	0, 0, 313, 316, 311, 0, 650, 0, 0, 0,
	68, 0, 0, 884, 0, 885, 648, 648, 648, 668,
	669, 672, 673, 674, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 886, 887, 888, 889, 890, 891, 892, 893,
	0, 0, 651, 0, 646, 0, 646, 646, 646, 0,
	239, 382, 677, 678, 679, 680, 681, 884, 885, 0,
	0, 0, 0, 900, 900, 900, 900, 0, 0, 900,
	0, 271, 260, 262, 263, 264, 265, 900, 282, 283,
	280, 270, 284, 287, 290, 291, 292, 293, 294, 0,
	0, 305, 30, 605, 0, 0, 589, 32, 0, 309,
	314, 315, 319, 317, 318, 310, 0, 327, 331, 0,
	390, 0, 395, -2, -2, -2, -2, -2, 0, 0,
	464, -2, -2, -2, -2, 0, 0, 0, 0, 0,
	0, -2, -2, -2, -2, -2, -2, 432, -2, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 399, 400,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 524, 524, 524, 524, 524, 524, 524,
	524, 0, 0, 0, 0, 0, 0, 341, 343, 344,
	345, 364, 0, 366, 0, 0, 45, 49, 50, 0,
	64, 875, 631, 675, -2, -2, -2, 0, 0, 676,
	-2, 803, -2, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 0, 85, 0, 0, 900,
	0, 75, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 238, 0, 240, 900, 900,
	900, 900, 900, 900, 900, 900, 249, 901, 902, 675,
	250, 251, 252, 900, 900, 900, 900, 255, 0, 0,
	272, 0, 266, 295, 0, 0, 0, 0, 31, 898,
	25, 0, 0, 602, 0, 590, 591, 594, 601, 30,
	316, 0, 321, 320, 312, 0, 328, 0, 0, 0,
	332, 0, 338, 334, 335, 336, 337, 0, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	417, 418, 419, 420, 421, 422, 423, 410, 0, 0,
	0, 578, 580, -2, 464, 465, 466, 467, 468, 0,
	0, 0, 0, 0, 0, 490, 491, 492, 493, 494,
	495, 564, 0, -2, 579, -2, -2, -2, -2, -2,
	323, 30, 0, 430, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 552, 0, 516, 0,
	517, 518, 519, 520, 521, 522, 523, 0, 323, 0,
	0, 47, 0, 381, 0, 0, 0, 0, 0, 0,
	370, 0, 0, 373, 0, 0, 0, 0, 365, 0,
	0, 384, 848, 367, 0, 369, -2, 0, 0, 0,
	43, 44, 0, 0, 51, 52, 0, 54, 55, 0,
	0, 0, 0, 169, 641, 642, 643, 672, 894, 896,
	639, 198, 0, 152, 148, 92, 93, 94, 95, 141,
	98, 141, 141, 141, 141, 166, 166, 166, 166, 124,
	125, 126, 127, 128, 0, 0, 111, 141, 141, 141,
	115, 131, 132, 133, 134, 135, 136, 137, 138, 96,
	99, 100, 101, 102, 103, 104, 105, 143, 143, 143,
	145, 145, 670, 70, 0, 78, 0, 900, 0, 900,
	83, 0, 214, 0, 233, 647, 0, 900, 236, 237,
	383, 682, 683, 241, 242, 243, 244, 245, 246, 247,
	248, 253, 258, 254, 259, 256, 273, 267, 268, 261,
	296, 299, 300, 301, 302, 303, 304, 895, 297, 0,
	89, 306, 307, 606, 0, 0, 0, 0, 0, 593,
	595, 596, 605, 33, 319, 0, 582, 0, 0, 0,
	322, 28, 391, 392, 394, 411, 0, 413, 415, 333,
	329, 0, -2, -2, -2, 402, 426, 427, 428, 0,
	0, 0, 0, 424, 406, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 535,
	536, 0, 401, -2, 567, 568, -2, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 485, 486, 487, 488, 489, 0,
	0, 0, 324, 325, 429, 0, 624, 30, 497, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 0,
	0, 0, 0, 0, 564, 0, 0, 0, 0, 558,
	555, 0, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 380, 388, 628, 0, 342, 360, 362, 0, 357,
	371, 372, 374, 0, 376, 0, 378, 379, 346, 347,
	348, 0, 0, 0, 0, 368, 388, 0, 388, 46,
	632, 634, 53, 0, 0, 58, 59, 633, 635, 636,
	637, 0, 84, 199, 201, 204, 205, 206, 86, 87,
	0, 0, 0, 0, 0, 193, 194, 155, 153, 0,
	150, 149, 97, 0, 166, 166, 118, 119, 169, 0,
	169, 169, 169, 0, 0, 112, 113, 114, 106, 0,
	107, 108, 109, 0, 110, 0, 0, 900, 72, 0,
	76, 77, 73, 649, 74, 899, 0, 0, 662, 215,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	0, 232, 900, 235, 276, 0, 0, 0, 0, 0,
	0, 603, 604, 0, 592, 0, 0, 26, 0, 644,
	645, 583, 584, 339, 412, 414, 416, 0, 323, 403,
	424, 407, 0, 404, 0, 0, 398, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 483,
	481, 482, 565, 0, 498, 0, 0, 431, -2, 501,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 556, 0, 0, 515, 526, 527, 528, 529,
	618, 0, 0, -2, 0, 36, 0, 589, 0, 0,
	0, 354, 361, 0, 0, 355, 0, 356, 375, 377,
	0, 0, 0, 0, 352, 589, 388, 42, 56, 57,
	0, 0, 63, 170, 171, 0, 202, 0, 0, 188,
	0, 0, 191, 192, 162, 0, 154, 91, 151, 0,
	169, 169, 120, 0, 121, 122, 123, 0, 139, 0,
	0, 0, 0, 671, 71, 79, 80, 0, 207, 899,
	0, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 899, 0, 0, 899, 663, 664, 665, 666,
	0, 234, 257, 0, 0, 274, 275, 90, 0, 308,
	607, 0, 599, 600, 597, 598, 27, 388, 0, 330,
	-2, 0, 405, 0, 425, 408, 0, 499, 326, 0,
	141, 141, 540, 141, 145, 543, 141, 545, 141, 548,
	0, 0, 0, 0, 0, 565, 0, 0, 0, 553,
	514, 559, 0, 626, 0, 618, 608, 620, 622, 0,
	30, 0, 614, 0, 601, 629, 389, 630, 358, 0,
	363, 0, 0, 0, 366, 0, 601, 41, 60, 61,
	62, 200, 203, 0, 195, 141, 189, 190, 164, 0,
	156, 157, 158, 159, 160, 161, 142, 116, 117, 167,
	168, 166, 0, 166, 0, 146, 0, 900, 0, 0,
	208, 0, 209, 211, 212, 213, 0, 277, 278, 298,
	585, 340, 500, 409, 566, 503, 537, 166, 541, 542,
	544, 546, 547, 549, 0, 505, 504, 506, 0, 0,
	509, 0, 0, 0, 0, 0, 557, 34, 0, 0,
	35, 0, 623, -2, 0, 0, 0, 48, 39, 0,
	350, 0, 0, 0, 384, 353, 40, 180, 0, 197,
	172, 165, 0, 169, 140, 169, 0, 0, 69, 81,
	82, 0, 0, 587, 0, 538, 539, 0, 0, 0,
	0, 0, 530, 513, 554, 627, 0, 621, 0, -2,
	0, 616, 615, 0, 359, 385, 386, 387, 349, 179,
	181, 0, 186, 0, 196, 177, 0, 174, 176, 163,
	129, 130, 144, 147, 0, 0, 29, 0, 0, 550,
	507, 508, 510, 511, 0, 0, 0, 0, 611, 30,
	0, 351, 182, 183, 0, 187, 185, 88, 0, 173,
	175, 75, 0, 228, 0, 588, 586, 512, 0, 0,
	0, 619, -2, 617, 184, 178, 78, 227, 0, 0,
	531, 0, 534, 210, 229, 0, 532, 0, 0, 0,
	0, 0, 533, 0, 0, 230, 231,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 128, 120, 3,
	56, 58, 125, 123, 57, 124, 136, 126, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 281,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 130, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 131,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	121, 122, 127, 129, 132, 133, 134, 135, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:359
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:411
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:424
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:434
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:483
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:586
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:616
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:631
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:642
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:647
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:659
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:678
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:688
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:931
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:935
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:956
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:962
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:997
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1057
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1096
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1193
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1243
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1247
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1251
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1255
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1268
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1278
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1283
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1311
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1327
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1331
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1343
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1351
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1356
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1454
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1512
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1538
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1552
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1710
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1715
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1725
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1729
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1811
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1816
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1850
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1892
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1902
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1912
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1925
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1929
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1933
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1945
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1949
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1955
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1960
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1965
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1973
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2025
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2054
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2058
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2062
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2066
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2085
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2093
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2223
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2546
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = BooleanModeStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = QueryExpansionStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2814
		{
			yyVAL.str = string("")
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2834
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support double quoted column_name")
				return 1
			}

			yyVAL.colName = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2864
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2868
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2882
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &NullVal{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2933
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &Default{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2983
		{
			yyVAL.exprs = nil
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = nil
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.orderBy = nil
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3005
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.str = AscScr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.str = AscScr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.str = DescScr
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.str = DescNullsLastScr
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.str = AscNullsLastScr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3055
		{
			yyVAL.limit = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3063
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3067
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3072
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.str = ForUpdateStr
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3080
		{
			yyVAL.str = ShareModeStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3093
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3106
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3110
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3114
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3125
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3133
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3138
		{
			yyVAL.updateExprs = nil
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3142
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3152
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3162
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3185
		{
			yyVAL.returning = nil
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3190
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3201
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3217
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3223
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3237
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.bytes = []byte("charset")
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.expr = &Default{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3272
		{
			yyVAL.byt = 0
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3274
		{
			yyVAL.byt = 1
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.str = IgnoreStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3306
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3329
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3339
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3350
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3630
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3639
		{
			decNesting(yylex)
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3644
		{
			forceEOF(yylex)
		}
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			forceEOF(yylex)
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3653
		{
			forceEOF(yylex)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3657
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
