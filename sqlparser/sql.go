// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

// setErrorVerbose configures format of ErrorMessages from parser. If false then only "syntax error" will be shown.
// Default is false
func SetSQLParserErrorVerboseLevel(verbose bool) {
	yyErrorVerbose = verbose
}

// setDebugLevel configures debug level of log messages from parser. Default is 0
func setDebugLevel(level int) {
	if level < 0 {
		panic("unsupported debug level for sqlparser")
	}
	yyDebug = level
}

//line sql.y:68
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const ILIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const JSON_EXTRACT_OP = 57463
const JSON_UNQUOTE_EXTRACT_OP = 57464
const CREATE = 57465
const ALTER = 57466
const DROP = 57467
const RENAME = 57468
const ANALYZE = 57469
const ADD = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const CONSTRAINT = 57481
const SPATIAL = 57482
const FULLTEXT = 57483
const FOREIGN = 57484
const KEY_BLOCK_SIZE = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const MAXVALUE = 57494
const PARTITION = 57495
const REORGANIZE = 57496
const LESS = 57497
const THAN = 57498
const PROCEDURE = 57499
const TRIGGER = 57500
const VINDEX = 57501
const VINDEXES = 57502
const STATUS = 57503
const VARIABLES = 57504
const BEGIN = 57505
const START = 57506
const TRANSACTION = 57507
const COMMIT = 57508
const ROLLBACK = 57509
const DEALLOCATE = 57510
const PREPARE = 57511
const EXECUTE = 57512
const BIT = 57513
const TINYINT = 57514
const SMALLINT = 57515
const MEDIUMINT = 57516
const INT = 57517
const INTEGER = 57518
const BIGINT = 57519
const INTNUM = 57520
const REAL = 57521
const DOUBLE = 57522
const FLOAT_TYPE = 57523
const DECIMAL = 57524
const NUMERIC = 57525
const TIME = 57526
const TIMESTAMP = 57527
const DATETIME = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const BLOB = 57539
const TINYBLOB = 57540
const MEDIUMBLOB = 57541
const LONGBLOB = 57542
const JSON = 57543
const ENUM = 57544
const GEOMETRY = 57545
const POINT = 57546
const LINESTRING = 57547
const POLYGON = 57548
const GEOMETRYCOLLECTION = 57549
const MULTIPOINT = 57550
const MULTILINESTRING = 57551
const MULTIPOLYGON = 57552
const NULLX = 57553
const AUTO_INCREMENT = 57554
const APPROXNUM = 57555
const SIGNED = 57556
const UNSIGNED = 57557
const ZEROFILL = 57558
const DATABASES = 57559
const TABLES = 57560
const VITESS_KEYSPACES = 57561
const VITESS_SHARDS = 57562
const VITESS_TABLETS = 57563
const VSCHEMA_TABLES = 57564
const EXTENDED = 57565
const FULL = 57566
const PROCESSLIST = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const LOCAL = 57572
const ISOLATION = 57573
const LEVEL = 57574
const READ = 57575
const WRITE = 57576
const ONLY = 57577
const REPEATABLE = 57578
const COMMITTED = 57579
const UNCOMMITTED = 57580
const SERIALIZABLE = 57581
const CURRENT_TIMESTAMP = 57582
const DATABASE = 57583
const CURRENT_DATE = 57584
const CURRENT_TIME = 57585
const LOCALTIME = 57586
const LOCALTIMESTAMP = 57587
const UTC_DATE = 57588
const UTC_TIME = 57589
const UTC_TIMESTAMP = 57590
const REPLACE = 57591
const CONVERT = 57592
const CAST = 57593
const SUBSTR = 57594
const SUBSTRING = 57595
const GROUP_CONCAT = 57596
const SEPARATOR = 57597
const MATCH = 57598
const AGAINST = 57599
const BOOLEAN = 57600
const LANGUAGE = 57601
const WITH = 57602
const QUERY = 57603
const EXPANSION = 57604
const UNUSED = 57605
const RETURNING = 57606

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"ILIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	178, 281,
	179, 281,
	-2, 269,
	-1, 253,
	74, 550,
	100, 550,
	102, 550,
	108, 550,
	109, 550,
	110, 550,
	111, 550,
	112, 550,
	113, 550,
	114, 550,
	116, 550,
	117, 550,
	118, 550,
	119, 550,
	120, 550,
	121, 550,
	122, 550,
	123, 550,
	124, 550,
	125, 550,
	126, 550,
	127, 550,
	128, 550,
	129, 550,
	130, 550,
	131, 550,
	134, 550,
	-2, 397,
	-1, 254,
	56, 535,
	74, 539,
	137, 647,
	138, 535,
	139, 535,
	-2, 529,
	-1, 255,
	137, 649,
	-2, 538,
	-1, 256,
	137, 650,
	-2, 536,
	-1, 257,
	137, 651,
	-2, 537,
	-1, 333,
	108, 803,
	-2, 65,
	-1, 334,
	108, 831,
	-2, 66,
	-1, 335,
	108, 791,
	-2, 67,
	-1, 339,
	108, 775,
	150, 775,
	-2, 611,
	-1, 341,
	108, 813,
	150, 813,
	-2, 613,
	-1, 567,
	74, 538,
	137, 649,
	-2, 465,
	-1, 618,
	55, 45,
	57, 45,
	-2, 47,
	-1, 776,
	137, 653,
	-2, 646,
	-1, 777,
	137, 647,
	-2, 535,
	-1, 1014,
	5, 31,
	-2, 431,
	-1, 1042,
	5, 30,
	-2, 582,
	-1, 1281,
	5, 31,
	-2, 583,
	-1, 1327,
	5, 30,
	-2, 585,
	-1, 1392,
	5, 31,
	-2, 586,
}

const yyPrivate = 57344

const yyLast = 11848

var yyAct = [...]int16{
	280, 53, 1383, 951, 697, 513, 263, 563, 1340, 865,
	1185, 1287, 1213, 1275, 611, 1186, 279, 883, 1105, 1182,
	613, 903, 945, 24, 562, 3, 732, 906, 1062, 1158,
	338, 1008, 907, 233, 1108, 59, 866, 817, 645, 820,
	1096, 804, 917, 853, 1046, 630, 779, 490, 436, 497,
	941, 224, 861, 629, 53, 615, 600, 503, 331, 276,
	987, 242, 238, 1051, 511, 324, 327, 580, 321, 58,
	1276, 326, 316, 1412, 1402, 1410, 317, 1390, 232, 1408,
	952, 1401, 315, 1389, 1177, 237, 239, 1273, 54, 29,
	30, 440, 1349, 931, 461, 1208, 1209, 1207, 225, 226,
	227, 228, 898, 899, 631, 246, 632, 1365, 528, 527,
	537, 538, 530, 531, 532, 533, 534, 535, 536, 529,
	968, 819, 539, 897, 468, 727, 640, 739, 641, 1220,
	1221, 63, 478, 1070, 967, 1224, 1069, 480, 1222, 1071,
	737, 909, 1087, 640, 739, 641, 188, 184, 185, 186,
	729, 924, 1299, 932, 1261, 1259, 449, 730, 229, 65,
	66, 67, 68, 69, 262, 972, 628, 223, 1409, 1314,
	475, 476, 473, 474, 1407, 1384, 966, 862, 1129, 863,
	450, 463, 443, 465, 925, 181, 182, 182, 705, 633,
	696, 1061, 257, 1060, 336, 1059, 438, 919, 1347, 446,
	199, 1341, 183, 1370, 467, 467, 467, 467, 462, 464,
	467, 884, 886, 919, 551, 552, 1284, 1343, 467, 1140,
	1025, 1126, 1001, 750, 518, 456, 83, 1128, 904, 1081,
	196, 486, 320, 196, 529, 539, 746, 539, 510, 53,
	978, 1375, 1238, 1049, 196, 1159, 963, 960, 961, 634,
	959, 508, 1228, 854, 548, 1133, 509, 508, 187, 550,
	196, 196, 83, 500, 1179, 1366, 196, 510, 83, 854,
	1085, 1032, 499, 510, 1161, 970, 973, 700, 998, 999,
	1000, 565, 566, 561, 569, 570, 571, 572, 573, 574,
	575, 576, 460, 579, 581, 581, 581, 581, 581, 581,
	581, 581, 589, 590, 591, 592, 1342, 1388, 1116, 1163,
	885, 1167, 965, 1162, 1160, 1169, 932, 918, 863, 1165,
	1223, 787, 612, 1348, 1346, 812, 919, 1229, 1164, 1378,
	505, 1394, 1315, 918, 964, 784, 785, 786, 783, 1305,
	1114, 1166, 1168, 452, 453, 454, 55, 1127, 979, 1125,
	530, 531, 532, 533, 534, 535, 536, 529, 437, 1132,
	539, 921, 582, 583, 584, 585, 586, 587, 588, 56,
	1304, 501, 969, 1100, 196, 180, 196, 1099, 1088, 442,
	1373, 1216, 196, 1215, 1082, 971, 922, 782, 954, 619,
	807, 711, 196, 710, 252, 627, 83, 83, 83, 83,
	626, 701, 83, 532, 533, 534, 535, 536, 529, 699,
	83, 539, 509, 508, 753, 754, 694, 1116, 458, 1181,
	451, 437, 196, 549, 1021, 231, 1020, 56, 1115, 510,
	748, 1398, 489, 1120, 1117, 1110, 1111, 1118, 1113, 1112,
	467, 83, 314, 1022, 1332, 1381, 918, 1309, 467, 1114,
	1119, 916, 914, 336, 489, 915, 1122, 444, 445, 467,
	467, 467, 467, 467, 467, 467, 467, 509, 508, 747,
	640, 739, 641, 1353, 467, 467, 467, 467, 1352, 637,
	1225, 768, 770, 771, 510, 1047, 320, 714, 509, 508,
	528, 527, 537, 538, 530, 531, 532, 533, 534, 535,
	536, 529, 814, 248, 539, 510, 769, 196, 733, 733,
	509, 508, 740, 1048, 196, 196, 196, 712, 1279, 509,
	508, 83, 1332, 489, 488, 742, 1017, 510, 1332, 1333,
	83, 1296, 1295, 755, 597, 1009, 510, 1115, 780, 890,
	281, 621, 1120, 1117, 1110, 1111, 1118, 1113, 1112, 776,
	805, 53, 1048, 640, 739, 641, 1237, 1072, 597, 1119,
	640, 739, 641, 757, 26, 1109, 565, 1204, 489, 1283,
	489, 1235, 1234, 1147, 80, 1231, 1232, 772, 622, 774,
	846, 849, 1231, 1230, 1017, 489, 855, 60, 1040, 1233,
	816, 980, 489, 1074, 1041, 597, 489, 1047, 321, 321,
	321, 321, 321, 867, 814, 489, 644, 643, 896, 596,
	332, 808, 811, 612, 56, 887, 441, 1270, 982, 1017,
	1183, 321, 623, 1047, 621, 625, 738, 738, 858, 1017,
	624, 751, 83, 1027, 851, 891, 597, 816, 196, 196,
	83, 1024, 196, 775, 26, 196, 239, 926, 946, 196,
	1198, 83, 83, 83, 83, 83, 83, 83, 83, 553,
	555, 556, 557, 558, 559, 880, 83, 83, 83, 83,
	868, 889, 888, 871, 196, 869, 870, 568, 872, 1026,
	196, 806, 895, 893, 1077, 26, 781, 1023, 1052, 1053,
	698, 842, 843, 911, 56, 83, 56, 850, 484, 196,
	467, 942, 467, 937, 936, 83, 71, 949, 487, 485,
	467, 857, 1218, 859, 860, 1326, 947, 1183, 528, 527,
	537, 538, 530, 531, 532, 533, 534, 535, 536, 529,
	1101, 1055, 539, 763, 708, 56, 481, 1058, 493, 498,
	1057, 943, 944, 56, 469, 469, 469, 469, 874, 336,
	469, 877, 933, 934, 935, 519, 878, 466, 469, 873,
	243, 244, 320, 320, 320, 320, 320, 875, 908, 1406,
	1400, 879, 876, 606, 607, 1139, 1002, 320, 983, 504,
	1405, 776, 1143, 1144, 564, 320, 1044, 196, 996, 517,
	196, 196, 196, 196, 196, 578, 502, 1141, 1142, 990,
	780, 988, 196, 991, 995, 196, 989, 491, 1084, 196,
	1092, 642, 459, 196, 196, 1380, 1277, 83, 1379, 492,
	1324, 1010, 602, 605, 606, 607, 603, 1078, 604, 608,
	1003, 1310, 956, 554, 707, 1137, 83, 610, 927, 928,
	929, 930, 602, 605, 606, 607, 603, 504, 604, 608,
	240, 241, 1052, 1053, 938, 939, 940, 749, 234, 1358,
	235, 60, 1043, 1357, 1045, 312, 305, 809, 810, 332,
	307, 308, 309, 310, 994, 775, 306, 313, 636, 311,
	1312, 1048, 993, 506, 997, 1367, 1042, 1300, 745, 196,
	62, 321, 83, 64, 83, 620, 1031, 57, 196, 735,
	7, 196, 83, 736, 6, 1065, 734, 5, 1, 271,
	270, 821, 743, 560, 953, 778, 1104, 962, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 1064, 1056, 1066, 1382, 1339, 1075,
	1016, 1212, 1067, 913, 905, 435, 70, 1374, 781, 912,
	1345, 467, 1298, 1091, 920, 1093, 1094, 1095, 1079, 1080,
	1086, 923, 470, 471, 472, 1217, 1377, 477, 1083, 650,
	649, 647, 648, 1029, 646, 482, 467, 652, 1098, 651,
	469, 741, 208, 328, 207, 329, 609, 635, 469, 948,
	507, 72, 1124, 1123, 958, 1121, 1131, 728, 977, 469,
	469, 469, 469, 469, 469, 469, 469, 479, 211, 547,
	1107, 992, 765, 766, 469, 469, 469, 469, 1068, 1136,
	894, 1089, 1090, 337, 1190, 756, 752, 496, 900, 1356,
	1311, 908, 1030, 577, 852, 261, 1151, 1152, 767, 275,
	1150, 272, 1188, 759, 53, 274, 1073, 867, 273, 1191,
	1184, 259, 1171, 517, 867, 320, 776, 1157, 1187, 469,
	1200, 1201, 1202, 1170, 758, 1178, 1039, 520, 1189, 564,
	260, 250, 319, 593, 1192, 844, 845, 1106, 1097, 1097,
	83, 601, 1193, 196, 1194, 599, 598, 813, 815, 537,
	538, 530, 531, 532, 533, 534, 535, 536, 529, 83,
	1205, 539, 1210, 1054, 1050, 318, 856, 1146, 1272, 1211,
	1206, 1226, 1227, 1364, 847, 847, 762, 28, 61, 245,
	847, 23, 22, 21, 19, 18, 1149, 17, 20, 16,
	15, 14, 32, 13, 12, 11, 882, 847, 902, 10,
	9, 8, 83, 83, 4, 83, 236, 25, 321, 2,
	1174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 733, 1250, 806, 1248, 469, 0, 0, 83, 0,
	1262, 196, 196, 1241, 0, 196, 1244, 0, 1271, 1004,
	1005, 1006, 1007, 0, 469, 196, 1257, 0, 0, 0,
	0, 1249, 0, 0, 83, 0, 0, 695, 0, 908,
	0, 908, 0, 0, 1278, 704, 0, 0, 0, 0,
	0, 0, 1289, 1290, 1291, 0, 715, 716, 717, 718,
	719, 720, 721, 722, 1292, 0, 1219, 1286, 0, 0,
	0, 723, 724, 725, 726, 0, 83, 467, 83, 1294,
	469, 0, 469, 1075, 0, 0, 0, 0, 0, 0,
	469, 984, 985, 986, 0, 498, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 1149, 981, 83, 0, 83,
	83, 1308, 0, 0, 1246, 0, 0, 0, 0, 738,
	1188, 0, 0, 1328, 0, 0, 0, 0, 0, 1329,
	1330, 469, 0, 0, 196, 1325, 1187, 0, 0, 0,
	1331, 0, 83, 0, 0, 0, 0, 1327, 1338, 1344,
	1337, 1355, 320, 0, 0, 83, 196, 0, 1013, 0,
	0, 1354, 83, 1350, 1301, 1351, 1303, 1188, 0, 53,
	0, 0, 1012, 83, 0, 908, 0, 1368, 0, 0,
	196, 1014, 1015, 1187, 1254, 1255, 0, 1256, 1372, 1313,
	1258, 0, 1260, 1369, 0, 0, 0, 0, 1033, 0,
	0, 0, 1106, 908, 0, 0, 1386, 1018, 1019, 1269,
	489, 0, 0, 1302, 867, 1028, 1393, 1391, 0, 0,
	1034, 0, 1035, 1036, 1037, 1038, 1396, 0, 0, 0,
	0, 83, 0, 83, 83, 83, 196, 83, 1323, 1297,
	1403, 1404, 0, 83, 1154, 0, 1155, 0, 0, 0,
	1411, 0, 0, 495, 0, 1322, 0, 0, 1172, 1173,
	0, 1175, 1176, 0, 0, 0, 0, 0, 1063, 83,
	83, 83, 528, 527, 537, 538, 530, 531, 532, 533,
	534, 535, 536, 529, 0, 0, 539, 469, 0, 0,
	0, 191, 0, 0, 222, 0, 0, 955, 0, 957,
	0, 0, 0, 0, 0, 230, 0, 976, 0, 322,
	0, 0, 0, 0, 0, 0, 83, 83, 0, 249,
	0, 191, 191, 0, 0, 1376, 0, 191, 0, 83,
	1102, 469, 0, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 469, 0, 0, 0,
	1395, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 325, 0,
	0, 1156, 469, 439, 0, 0, 0, 0, 1252, 0,
	0, 0, 1195, 1196, 0, 0, 1197, 0, 0, 1199,
	0, 0, 0, 83, 0, 0, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 847, 0, 0, 517, 0, 1063, 1203, 847, 0,
	0, 0, 0, 0, 0, 191, 0, 191, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 469, 0, 469, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 27, 54, 29, 30, 0, 0, 1247, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 0, 45,
	1240, 447, 0, 448, 31, 0, 0, 0, 0, 455,
	0, 1316, 1317, 1242, 1318, 1319, 1320, 0, 0, 457,
	1245, 0, 0, 0, 0, 1251, 40, 0, 0, 0,
	56, 469, 0, 1253, 0, 1274, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 1263, 1264, 1265, 0, 0,
	1268, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 1280, 1281, 1282, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 1130, 0, 191, 617, 191, 0, 1288,
	0, 1288, 1288, 1288, 0, 1293, 0, 0, 0, 0,
	0, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 34, 36, 35, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 469, 469, 469,
	0, 0, 0, 0, 595, 39, 46, 47, 0, 0,
	48, 49, 37, 618, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 41, 42, 1413, 43, 44, 50,
	51, 52, 0, 0, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 0, 517, 517, 527, 537, 538, 530,
	531, 532, 533, 534, 535, 536, 529, 1214, 0, 539,
	1359, 1360, 1361, 1362, 1363, 0, 0, 0, 0, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	191, 1385, 564, 191, 0, 0, 191, 0, 0, 0,
	713, 0, 0, 1371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 1387,
	55, 1266, 489, 0, 1392, 191, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 1397, 847, 0,
	0, 517, 0, 0, 0, 702, 703, 0, 0, 706,
	191, 0, 709, 0, 0, 1399, 0, 0, 0, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 1415, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 672, 0, 528, 527, 537, 538, 530, 531,
	532, 533, 534, 535, 536, 529, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	249, 0, 0, 249, 249, 0, 0, 848, 848, 249,
	655, 0, 0, 848, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 249, 249, 249, 0, 191, 0,
	848, 191, 191, 191, 191, 191, 0, 0, 0, 668,
	0, 0, 0, 881, 0, 0, 191, 0, 0, 0,
	617, 489, 0, 0, 191, 191, 0, 0, 0, 0,
	0, 0, 0, 682, 683, 684, 685, 686, 687, 688,
	1267, 689, 690, 691, 692, 693, 669, 670, 671, 653,
	654, 681, 0, 656, 864, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 673, 674, 675, 676, 677,
	678, 679, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 528, 527, 537, 538, 530, 531, 532,
	533, 534, 535, 536, 529, 0, 0, 539, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 191, 0, 0, 0, 0, 133, 0, 0,
	0, 512, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 528, 527, 537, 538, 530, 531, 532, 533, 534,
	535, 536, 529, 1153, 713, 539, 950, 0, 0, 82,
	0, 0, 514, 515, 516, 974, 249, 0, 975, 0,
	93, 0, 0, 0, 528, 527, 537, 538, 530, 531,
	532, 533, 534, 535, 536, 529, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 0, 526,
	0, 0, 0, 0, 510, 540, 541, 542, 543, 544,
	545, 546, 249, 523, 524, 525, 521, 528, 527, 537,
	538, 530, 531, 532, 533, 534, 535, 536, 529, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 249, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 191, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 205, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 177, 141, 102, 168,
	0, 0, 1134, 1135, 0, 0, 1138, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 528, 527,
	537, 538, 530, 531, 532, 533, 534, 535, 536, 529,
	0, 249, 539, 0, 0, 0, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 202, 0, 0, 848, 0, 0, 0, 209, 204,
	0, 848, 1145, 528, 527, 537, 538, 530, 531, 532,
	533, 534, 535, 536, 529, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 212, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 213, 214, 215,
	216, 221, 0, 0, 0, 0, 219, 218, 220, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1243, 822, 823, 824, 825, 826, 827,
	828, 829, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 830, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 528, 527, 537, 538,
	530, 531, 532, 533, 534, 535, 536, 529, 0, 0,
	539, 0, 0, 424, 414, 0, 385, 426, 363, 377,
	434, 378, 379, 407, 349, 394, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	249, 0, 389, 418, 391, 412, 384, 408, 354, 401,
	427, 376, 405, 428, 0, 0, 0, 386, 82, 0,
	0, 640, 639, 641, 910, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 343, 403, 0,
	347, 350, 433, 421, 369, 370, 1076, 0, 0, 0,
	0, 0, 0, 388, 392, 393, 409, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 400, 0,
	0, 848, 351, 348, 0, 0, 0, 0, 353, 0,
	368, 410, 0, 342, 413, 419, 383, 197, 422, 381,
	380, 425, 139, 0, 0, 153, 105, 104, 113, 417,
	365, 373, 96, 371, 145, 135, 165, 399, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 346, 0, 151,
	167, 179, 361, 420, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 357, 360, 355, 356, 395,
	396, 429, 430, 431, 411, 352, 0, 358, 359, 0,
	415, 398, 84, 0, 115, 177, 141, 102, 168, 424,
	414, 0, 385, 426, 363, 377, 434, 378, 379, 407,
	349, 394, 133, 375, 0, 366, 344, 372, 345, 364,
	387, 100, 390, 362, 416, 397, 114, 0, 0, 0,
	432, 116, 402, 0, 150, 126, 0, 0, 389, 418,
	391, 412, 384, 408, 354, 401, 427, 376, 405, 428,
	0, 0, 0, 386, 82, 0, 0, 640, 639, 641,
	910, 0, 0, 0, 0, 93, 0, 0, 0, 404,
	423, 374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 406, 343, 403, 0, 347, 350, 433, 421,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 388,
	392, 393, 409, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 0, 400, 0, 0, 0, 351, 348,
	0, 0, 0, 0, 353, 0, 368, 410, 0, 342,
	413, 419, 383, 197, 422, 381, 380, 425, 139, 0,
	0, 153, 105, 104, 113, 417, 365, 373, 96, 371,
	145, 135, 165, 399, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 346, 0, 151, 167, 179, 361, 420,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 357, 360, 355, 356, 395, 396, 429, 430, 431,
	411, 352, 0, 358, 359, 0, 415, 398, 84, 0,
	115, 177, 141, 102, 168, 424, 414, 0, 385, 426,
	363, 377, 434, 378, 379, 407, 349, 394, 133, 375,
	0, 366, 344, 372, 345, 364, 387, 100, 390, 362,
	416, 397, 114, 0, 0, 0, 432, 116, 402, 0,
	150, 126, 0, 0, 389, 418, 391, 412, 384, 408,
	354, 401, 427, 376, 405, 428, 0, 0, 0, 386,
	256, 0, 0, 194, 777, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 404, 423, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 406, 343,
	403, 0, 347, 350, 433, 421, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 388, 392, 393, 409, 382,
	0, 0, 0, 0, 0, 0, 773, 0, 367, 0,
	400, 0, 0, 0, 351, 348, 0, 0, 0, 0,
	353, 0, 368, 410, 0, 342, 413, 419, 383, 197,
	422, 381, 380, 425, 139, 0, 0, 153, 105, 104,
	113, 417, 365, 373, 96, 371, 145, 135, 165, 399,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 346,
	0, 151, 167, 179, 361, 420, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 357, 360, 355,
	356, 395, 396, 429, 430, 431, 411, 352, 0, 358,
	359, 0, 415, 398, 84, 0, 115, 177, 141, 102,
	168, 424, 414, 0, 385, 426, 363, 377, 434, 378,
	379, 407, 349, 394, 133, 375, 0, 366, 344, 372,
	345, 364, 387, 100, 390, 362, 416, 397, 114, 0,
	0, 0, 432, 116, 402, 0, 150, 126, 0, 0,
	389, 418, 391, 412, 384, 408, 354, 401, 427, 376,
	405, 428, 0, 0, 0, 386, 256, 0, 0, 194,
	777, 193, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 404, 423, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 343, 403, 0, 347, 350,
	433, 421, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 388, 392, 393, 409, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 400, 0, 0, 0,
	351, 348, 0, 0, 0, 0, 353, 0, 368, 410,
	0, 342, 413, 419, 383, 197, 422, 381, 380, 425,
	139, 0, 0, 153, 105, 104, 113, 417, 365, 373,
	96, 371, 145, 135, 165, 399, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 346, 0, 151, 167, 179,
	361, 420, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 357, 360, 355, 356, 395, 396, 429,
	430, 431, 411, 352, 0, 358, 359, 0, 415, 398,
	84, 0, 115, 177, 141, 102, 168, 424, 414, 0,
	385, 426, 363, 377, 434, 378, 379, 407, 349, 394,
	133, 375, 0, 366, 344, 372, 345, 364, 387, 100,
	390, 362, 416, 397, 114, 0, 0, 0, 432, 116,
	402, 0, 150, 126, 0, 0, 389, 418, 391, 412,
	384, 408, 354, 401, 427, 376, 405, 428, 0, 0,
	0, 386, 195, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 404, 423, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 343, 403, 0, 347, 350, 433, 421, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 393,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 400, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 410, 0, 342, 413, 419,
	383, 197, 422, 381, 380, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 365, 373, 96, 371, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 395, 396, 429, 430, 431, 411, 352,
	0, 358, 359, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 424, 414, 0, 385, 426, 363, 377,
	434, 378, 379, 407, 349, 394, 133, 375, 0, 366,
	344, 372, 345, 364, 387, 100, 390, 362, 416, 397,
	114, 0, 0, 0, 432, 116, 402, 0, 150, 126,
	0, 0, 389, 418, 391, 412, 384, 408, 354, 401,
	427, 376, 405, 428, 56, 0, 0, 386, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 404, 423, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 343, 403, 0,
	347, 350, 433, 421, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 393, 409, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 400, 0,
	0, 0, 351, 348, 0, 0, 0, 0, 353, 0,
	368, 410, 0, 342, 413, 419, 383, 197, 422, 381,
	380, 425, 139, 0, 0, 153, 105, 104, 113, 417,
	365, 373, 96, 371, 145, 135, 165, 399, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 346, 0, 151,
	167, 179, 361, 420, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 357, 360, 355, 356, 395,
	396, 429, 430, 431, 411, 352, 0, 358, 359, 0,
	415, 398, 84, 0, 115, 177, 141, 102, 168, 424,
	414, 0, 385, 426, 363, 377, 434, 378, 379, 407,
	349, 394, 133, 375, 0, 366, 344, 372, 345, 364,
	387, 100, 390, 362, 416, 397, 114, 0, 0, 0,
	432, 116, 402, 0, 150, 126, 0, 0, 389, 418,
	391, 412, 384, 408, 354, 401, 427, 376, 405, 428,
	0, 0, 0, 386, 82, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 404,
	423, 374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 406, 343, 403, 0, 347, 350, 433, 421,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 388,
	392, 393, 409, 382, 0, 0, 0, 0, 0, 0,
	1148, 0, 367, 0, 400, 0, 0, 0, 351, 348,
	0, 0, 0, 0, 353, 0, 368, 410, 0, 342,
	413, 419, 383, 197, 422, 381, 380, 425, 139, 0,
	0, 153, 105, 104, 113, 417, 365, 373, 96, 371,
	145, 135, 165, 399, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 346, 0, 151, 167, 179, 361, 420,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 357, 360, 355, 356, 395, 396, 429, 430, 431,
	411, 352, 0, 358, 359, 0, 415, 398, 84, 0,
	115, 177, 141, 102, 168, 424, 414, 0, 385, 426,
	363, 377, 434, 378, 379, 407, 349, 394, 133, 375,
	0, 366, 344, 372, 345, 364, 387, 100, 390, 362,
	416, 397, 114, 0, 0, 0, 432, 116, 402, 0,
	150, 126, 0, 0, 389, 418, 391, 412, 384, 408,
	354, 401, 427, 376, 405, 428, 0, 0, 0, 386,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 404, 423, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 406, 343,
	403, 0, 347, 350, 433, 421, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 388, 392, 393, 409, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
	400, 0, 0, 0, 351, 348, 0, 0, 0, 0,
	353, 0, 368, 410, 0, 342, 413, 419, 383, 197,
	422, 381, 380, 425, 139, 0, 0, 153, 105, 104,
	113, 417, 365, 373, 96, 371, 145, 135, 165, 399,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 346,
	0, 151, 167, 179, 361, 420, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 357, 360, 355,
	356, 395, 396, 429, 430, 431, 411, 352, 0, 358,
	359, 0, 415, 398, 84, 0, 115, 177, 141, 102,
	168, 424, 414, 0, 385, 426, 363, 377, 434, 378,
	379, 407, 349, 394, 133, 375, 0, 366, 344, 372,
	345, 364, 387, 100, 390, 362, 416, 397, 114, 0,
	0, 0, 432, 116, 402, 0, 150, 126, 0, 0,
	389, 418, 391, 412, 384, 408, 354, 401, 427, 376,
	405, 428, 0, 0, 0, 386, 82, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 404, 423, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 343, 403, 0, 347, 350,
	433, 421, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 388, 392, 393, 409, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 400, 0, 0, 0,
	351, 348, 0, 0, 0, 0, 353, 0, 368, 410,
	0, 342, 413, 419, 383, 197, 422, 381, 380, 425,
	139, 0, 0, 153, 105, 104, 113, 417, 365, 373,
	96, 371, 145, 135, 165, 399, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 340, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 346, 0, 151, 167, 179,
	361, 420, 173, 174, 175, 176, 0, 0, 0, 341,
	339, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 357, 360, 355, 356, 395, 396, 429,
	430, 431, 411, 352, 0, 358, 359, 0, 415, 398,
	84, 0, 115, 177, 141, 102, 168, 424, 414, 0,
	385, 426, 363, 377, 434, 378, 379, 407, 349, 394,
	133, 375, 0, 366, 344, 372, 345, 364, 387, 100,
	390, 362, 416, 397, 114, 0, 0, 0, 432, 116,
	402, 0, 150, 126, 0, 0, 389, 418, 391, 412,
	384, 408, 354, 401, 427, 376, 405, 428, 0, 0,
	0, 386, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 404, 423, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 343, 403, 0, 347, 350, 433, 421, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 393,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 400, 0, 0, 0, 351, 348, 0, 0,
	0, 0, 353, 0, 368, 410, 0, 342, 413, 419,
	383, 197, 422, 381, 380, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 365, 373, 96, 371, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 330, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 340,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 420, 173, 174,
	175, 176, 0, 0, 0, 341, 339, 335, 334, 333,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 395, 396, 429, 430, 431, 411, 352,
	0, 358, 359, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 133, 0, 0, 818, 0, 258, 0,
	0, 0, 100, 0, 253, 0, 0, 114, 0, 0,
	0, 292, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 282, 256, 312, 305, 255, 254,
	193, 307, 308, 309, 310, 0, 93, 306, 313, 0,
	311, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 269, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 247, 0, 0, 0, 303, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 301, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 293, 302, 299, 300, 297, 298, 296, 295,
	294, 304, 285, 286, 287, 288, 290, 0, 289, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 0, 0,
	0, 258, 0, 0, 0, 100, 0, 253, 0, 0,
	114, 0, 0, 0, 292, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 282, 256, 312,
	305, 255, 254, 193, 307, 308, 309, 310, 0, 93,
	306, 313, 0, 311, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 269,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 267, 247, 0, 0, 0, 303, 0,
	268, 0, 0, 264, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	301, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 293, 302, 299, 300, 297,
	298, 296, 295, 294, 304, 285, 286, 287, 288, 290,
	0, 289, 84, 0, 115, 177, 141, 102, 168, 133,
	0, 0, 0, 0, 258, 0, 0, 0, 100, 0,
	253, 0, 0, 114, 0, 0, 0, 292, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 489,
	282, 256, 312, 305, 255, 254, 193, 307, 308, 309,
	310, 0, 93, 306, 313, 0, 311, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 269, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 0, 0, 0,
	0, 303, 0, 268, 0, 0, 264, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 301, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 293, 302,
	299, 300, 297, 298, 296, 295, 294, 304, 285, 286,
	287, 288, 290, 0, 289, 84, 0, 115, 177, 141,
	102, 168, 133, 0, 0, 0, 0, 258, 0, 0,
	0, 100, 0, 253, 0, 0, 114, 0, 0, 0,
	292, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 0, 0, 901, 0,
	56, 0, 0, 282, 256, 312, 305, 255, 254, 193,
	307, 308, 309, 310, 0, 93, 306, 313, 0, 311,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 269, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 267,
	0, 0, 0, 0, 303, 0, 268, 0, 0, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 301, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 293, 302, 299, 300, 297, 298, 296, 295, 294,
	304, 285, 286, 287, 288, 290, 26, 289, 84, 0,
	115, 177, 141, 102, 168, 0, 0, 0, 133, 0,
	0, 0, 0, 258, 0, 0, 0, 100, 0, 253,
	0, 0, 114, 0, 0, 0, 292, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 282,
	256, 312, 305, 255, 254, 193, 307, 308, 309, 310,
	0, 93, 306, 313, 0, 311, 277, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 269, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	303, 0, 268, 0, 0, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 301, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 293, 302, 299,
	300, 297, 298, 296, 295, 294, 304, 285, 286, 287,
	288, 290, 0, 289, 84, 0, 115, 177, 141, 102,
	168, 133, 0, 494, 0, 0, 258, 0, 0, 0,
	100, 0, 253, 0, 0, 114, 0, 0, 0, 292,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 282, 256, 312, 305, 255, 254, 193, 307,
	308, 309, 310, 0, 93, 306, 313, 0, 311, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 269, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 0,
	0, 0, 0, 303, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 301, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	293, 302, 299, 300, 297, 298, 296, 295, 294, 304,
	285, 286, 287, 288, 290, 0, 289, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 0, 258,
	0, 0, 0, 100, 0, 253, 0, 0, 114, 0,
	0, 0, 292, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 282, 256, 312, 305, 255,
	254, 193, 307, 308, 309, 310, 0, 93, 306, 313,
	0, 311, 277, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 269, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 303, 0, 268, 0,
	0, 264, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 301, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 293, 302, 299, 300, 297, 298, 296,
	295, 294, 304, 285, 286, 287, 288, 290, 133, 289,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 554,
	0, 0, 114, 0, 0, 0, 292, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 282,
	256, 312, 305, 255, 254, 193, 307, 308, 309, 310,
	0, 93, 306, 313, 0, 311, 277, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	303, 0, 268, 0, 0, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 301, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 1414,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 293, 302, 299,
	300, 297, 298, 296, 295, 294, 304, 285, 286, 287,
	288, 290, 133, 289, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 554, 0, 0, 114, 0, 0, 0,
	292, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 282, 256, 312, 305, 255, 254, 193,
	307, 308, 309, 310, 0, 93, 306, 313, 0, 311,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 267,
	0, 0, 0, 0, 303, 0, 268, 0, 0, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 301, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 293, 302, 299, 300, 297, 298, 296, 295, 294,
	304, 285, 286, 287, 288, 290, 133, 289, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 554, 0, 0,
	114, 0, 0, 0, 292, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 282, 256, 312,
	305, 567, 254, 193, 307, 308, 309, 310, 0, 93,
	306, 313, 0, 311, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 267, 0, 0, 0, 0, 303, 0,
	268, 0, 0, 264, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	301, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 293, 302, 299, 300, 297,
	298, 296, 295, 294, 304, 285, 286, 287, 288, 290,
	133, 289, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 73, 0, 0, 0, 79, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 75, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	76, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 84, 0, 115, 177,
	141, 102, 168, 100, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 0, 82, 0, 0, 514,
	515, 516, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	195, 0, 0, 194, 192, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 115, 177, 141, 102,
	168, 133, 0, 0, 0, 616, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	638, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 640, 639, 641, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 115, 177, 141,
	102, 168, 133, 0, 0, 0, 616, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 614, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 84, 0,
	115, 177, 141, 102, 168, 594, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 194, 192, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 514, 515, 516, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 194, 777,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 81, 0, 760,
	0, 0, 761, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 115, 177, 141, 102, 168,
}

var yyPact = [...]int16{
	1624, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 846, 885, -1000, -1000, -1000, -1000,
	-1000, -1000, 650, 7992, 36, 55, 0, 10297, 53, 2311,
	11059, -1000, -15, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-28, 11059, 365, 638, -1000, -1000, -1000, -1000, -1000, 841,
	844, 640, 830, 718, -1000, 5658, 35, 9017, 10043, 5132,
	-1000, 361, 48, 11059, -175, 11567, 30, 30, 30, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	52, 11059, -1000, 11059, 28, 360, 28, 28, 28, 11059,
	-1000, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11059,
	358, 782, 34, 4028, 4028, 4028, 4028, -6, -8, 4028,
	-116, -104, 682, -1000, -1000, -1000, -1000, 4028, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11059,
	687, 653, 396, 788, 6713, 6976, 846, -1000, 638, -1000,
	-1000, -1000, 758, -1000, -1000, 260, 872, -1000, 2109, 87,
	-1000, 6976, 2117, 371, -1000, -1000, -1000, -1000, 371, -1000,
	-1000, -1000, -1000, 76, 7484, 7484, 7484, 7484, 7484, 7484,
	-1000, -1000, -1000, -1000, -1000, -1000, 209, -1000, -1000, -1000,
	6450, 371, 7738, 371, 371, 371, 371, 371, 371, 371,
	371, 6976, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9789, 579, 778, -1000, -1000, -1000,
	815, 8500, 9534, 11059, 567, -1000, 573, 568, 4856, -16,
	-144, -1000, 39, -1000, -1000, -1000, 141, 9271, -1000, -1000,
	781, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 549, -1000, 1855, 356, 4028,
	41, 635, 349, 177, 341, 11059, 11059, 4028, 38, 11059,
	811, 680, 11059, 333, 331, -1000, 3752, -1000, 4028, 4028,
	4028, 4028, 4028, 4028, 4028, 4028, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4028, 4028, 4028, 4028, -1000, -124, -85,
	-1000, 11059, -1000, -1000, 80, 80, 1855, 11059, -1000, -1000,
	-1000, 879, 117, 412, 839, 86, 574, -1000, 390, 841,
	396, 718, 11313, 688, -1000, -1000, 11059, -1000, 6976, 6976,
	406, -1000, 10551, -1000, -1000, -1000, -1000, -1000, 3200, 123,
	7484, 313, 219, 7484, 7484, 7484, 7484, 7484, 7484, 7484,
	7484, 7484, 7484, 7484, 7484, 7484, 7484, 7484, 7484, 490,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 330, -1000,
	638, 804, 804, 101, -1000, 101, 101, 101, 101, 101,
	251, -1000, 396, 547, 158, 6450, 5395, -1000, 2516, 5658,
	5658, 6976, 6976, 10805, 10805, 5658, 826, 149, 158, 10805,
	-1000, 396, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5658,
	5658, 5658, 5658, 148, 11059, -1000, 10805, 9017, 9017, 9017,
	9017, 9017, -1000, 715, 704, -1000, 723, 707, 727, 11059,
	-1000, 538, 8500, 159, 371, -1000, 11059, -1000, 9, 484,
	9017, 11059, -1000, -1000, 4856, 7484, 573, 568, -144, 551,
	-1000, -126, -149, 7484, 6184, 94, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2924, 298, 286, -81, -1000, -1000, -1000,
	-1000, 591, -1000, 591, 591, 591, 591, -54, -54, -54,
	-54, -1000, -1000, -1000, -1000, -1000, 648, 647, -1000, 591,
	591, 591, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 645,
	645, 645, 592, 592, 652, -1000, 11059, -197, 328, 4028,
	809, 4028, -1000, 105, -1000, 11059, -1000, -1000, 11059, 4028,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 229, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 534, -1000, 561, -1000, -1000, 738, 6976, 6976, 6976,
	3476, 6976, -1000, 773, 766, 788, -1000, 826, 863, -1000,
	768, 752, 5658, -1000, -1000, 123, 152, -1000, -1000, 203,
	-1000, -1000, -1000, -1000, 85, 371, -1000, -1000, 2343, -1000,
	-1000, -1000, -1000, 313, 7484, 7484, 7484, 7484, 370, 370,
	2343, 2298, 967, 1705, 101, 277, 277, 103, 103, 103,
	103, 103, 226, 226, -1000, -1000, -1000, 396, 209, -1000,
	-1000, 209, -1000, -1000, 6976, -1000, 396, 396, 5658, 469,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 527, 527, 369, 421, 630, -1000, 83, 622,
	527, 5658, 165, -1000, 6976, 396, -1000, 527, 396, 527,
	527, 558, 750, 371, -1000, 540, -1000, 135, 778, 634,
	677, 798, -1000, -1000, -1000, -1000, 696, -1000, 693, -1000,
	-1000, -1000, -1000, -1000, 47, 45, 43, 11567, -1000, 869,
	9017, 501, -1000, -1000, 2343, 551, -144, -117, -1000, -1000,
	2343, -1000, 158, -1000, 497, 536, 2648, -1000, -1000, -1000,
	-1000, -1000, -1000, 628, 799, 185, 169, 324, -1000, -1000,
	779, -1000, 195, -91, -1000, -1000, 312, -54, -54, -1000,
	-1000, 94, 780, 94, 94, 94, 407, 407, -1000, -1000,
	-1000, -1000, 311, -1000, -1000, -1000, 307, -1000, 676, 11567,
	4028, -1000, 4580, -1000, -1000, -1000, -1000, -1000, -1000, 389,
	280, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8, -1000, 4028, -1000, 243, 11059, 11059,
	1855, 813, 11059, 734, 158, 158, 158, 82, -1000, 763,
	748, -1000, 11059, -1000, -1000, -1000, -1000, 562, -1000, -1000,
	-1000, 4304, 5658, -1000, 370, 370, 2343, 2064, -1000, 7484,
	-1000, 7484, -1000, 158, -1000, -1000, 527, 5658, -1000, -1000,
	110, 490, 110, 7484, 7484, 3476, 7484, 7484, -190, 572,
	157, -1000, 6976, 314, -1000, -1000, -1000, -1000, -1000, 663,
	10805, 371, -1000, 8246, -1000, 11567, 846, 10805, 6976, 6976,
	-1000, -1000, 6976, 594, -1000, 6976, -1000, -1000, -1000, 371,
	371, 371, 510, -1000, 846, 501, -1000, -1000, -1000, -153,
	-159, -1000, -1000, -1000, 2924, -1000, 2924, 11567, -1000, 323,
	321, -1000, -1000, 658, 63, -1000, -1000, -1000, 422, 94,
	94, -1000, 192, -1000, -1000, -1000, 525, -1000, 518, 532,
	514, 11059, -1000, -1000, 499, -1000, 134, -1000, -1000, 11567,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11567, 11059, -1000, -1000, -1000, -1000, -1000, 11567,
	-1000, -1000, 407, 6976, -1000, -1000, -1000, 80, -1000, -1000,
	4580, -1000, -1000, -1000, -1000, -1000, 869, 9017, -1000, -1000,
	396, -1000, -1000, 7484, 2343, 2343, -1000, -1000, 396, 591,
	591, -1000, 591, 592, -1000, 591, -38, 591, -39, 371,
	396, 396, 1834, 2031, -1000, 1312, 598, 371, -185, -1000,
	158, 6976, -211, 789, 566, 461, -1000, -1000, 5921, 396,
	512, 79, 510, 841, -1000, 158, 158, 158, 11567, 158,
	11567, 11567, 11567, 8763, 11567, 841, -1000, -1000, -1000, -1000,
	2648, -1000, 474, -1000, 591, -1000, -1000, -77, 878, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-54, 407, -54, 304, -1000, 273, 4028, 4580, 2924, -1000,
	391, -1000, -1000, -1000, -1000, 805, -1000, 158, -1000, 867,
	477, -1000, 2343, -1000, -1000, 109, -1000, -1000, -1000, -1000,
	-1000, -1000, 266, -1000, -1000, -1000, 7484, 7484, -1000, 7484,
	7484, 7484, 396, 407, 158, -1000, 5658, 792, -1000, 371,
	-1000, -1000, 679, 10551, 10551, -1000, -211, 471, -1000, 465,
	465, 465, 159, -1000, -211, 146, 11567, -1000, 170, -1000,
	-165, 94, -1000, 94, 420, 415, -1000, -1000, -1000, 11567,
	371, 849, 843, -1000, -1000, 396, 1973, 1973, 1973, 1973,
	-12, -1000, -1000, 469, 876, -1000, 371, -1000, 638, 66,
	-1000, -1000, 11567, -1000, -1000, -1000, -1000, -1000, -1000, 146,
	-1000, 320, 133, 407, -1000, 258, 790, -1000, 787, -1000,
	-1000, -1000, -1000, -1000, 387, 5, -1000, 6976, 6976, -1000,
	-1000, -1000, -1000, -1000, 396, 32, -201, 10805, 461, 396,
	10551, -1000, -1000, -1000, 265, -1000, -1000, -1000, 407, -1000,
	-1000, 635, 374, -1000, 11567, 158, 445, -1000, 729, -195,
	-205, 428, -1000, -1000, -1000, -1000, -197, -1000, 5, 744,
	-1000, 728, -1000, -1000, -1000, 2, -198, -5, -203, 371,
	-206, 7230, -1000, 1973, 396, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1149, 24, 23, 1147, 1146, 1144, 906, 903, 899,
	1141, 1140, 1139, 1135, 1134, 1133, 1132, 1131, 1130, 1129,
	1128, 1127, 1125, 1124, 1123, 1122, 1121, 131, 1119, 1118,
	1117, 57, 1116, 61, 1113, 1108, 31, 121, 37, 39,
	503, 1107, 14, 72, 76, 1105, 63, 1104, 1103, 65,
	1086, 56, 1085, 1081, 1469, 1073, 1072, 17, 44, 1071,
	1070, 1067, 1066, 59, 394, 1064, 1051, 1048, 1045, 1041,
	1039, 1038, 46, 7, 10, 16, 15, 1035, 164, 6,
	1034, 43, 1033, 1032, 1030, 1029, 35, 1027, 49, 1026,
	33, 47, 1024, 11, 52, 28, 19, 9, 71, 53,
	66, 1023, 36, 58, 45, 1018, 1011, 375, 1009, 1008,
	1007, 998, 997, 996, 156, 379, 994, 993, 992, 991,
	30, 192, 540, 124, 64, 990, 989, 5, 987, 1413,
	60, 55, 20, 986, 51, 757, 41, 985, 984, 983,
	982, 29, 981, 38, 979, 977, 974, 972, 971, 970,
	969, 184, 968, 966, 965, 93, 21, 961, 960, 50,
	22, 954, 952, 950, 40, 48, 949, 42, 947, 946,
	945, 944, 27, 32, 943, 12, 941, 8, 938, 937,
	2, 917, 18, 916, 3, 914, 4, 34, 913, 13,
	26, 912, 911, 141, 910, 909, 908, 897, 0, 524,
	895, 893, 67,
}

var yyR1 = [...]uint8{
	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 200, 200, 49, 49, 94, 94, 10,
	10, 10, 10, 10, 10, 99, 99, 104, 104, 104,
	105, 105, 105, 105, 139, 139, 137, 137, 11, 11,
	11, 11, 11, 11, 11, 186, 186, 185, 184, 184,
	183, 183, 182, 16, 169, 170, 170, 170, 165, 142,
	142, 143, 143, 143, 143, 143, 150, 146, 146, 144,
	144, 144, 144, 144, 144, 144, 145, 145, 145, 145,
	145, 147, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 149, 149, 149, 149, 149, 149, 149, 149, 164,
	164, 151, 151, 159, 159, 160, 160, 160, 157, 157,
	158, 158, 161, 161, 161, 152, 152, 152, 152, 152,
	152, 152, 154, 154, 162, 162, 155, 155, 155, 156,
	156, 156, 163, 163, 163, 163, 163, 153, 153, 166,
	166, 178, 178, 177, 177, 177, 168, 168, 174, 174,
	174, 174, 174, 167, 167, 176, 176, 175, 171, 171,
	171, 172, 172, 172, 173, 173, 173, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 181, 179, 179,
	180, 180, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 112, 112, 109,
	109, 110, 110, 111, 111, 111, 113, 113, 113, 140,
	140, 138, 138, 138, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 190,
	190, 190, 190, 190, 190, 26, 26, 191, 191, 201,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 125, 125, 125, 127, 127, 127, 127, 124, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	93, 93, 95, 95, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 133, 133, 132, 132, 132, 131,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 108, 108, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 71, 71, 71, 71, 71, 71, 61,
	61, 61, 61, 61, 61, 61, 36, 36, 72, 72,
	72, 78, 73, 73, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 195, 194, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 202, 202, 70, 70, 70, 70, 34,
	34, 34, 34, 34, 136, 136, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	82, 82, 35, 35, 80, 80, 81, 83, 83, 66,
	66, 66, 79, 79, 79, 122, 122, 122, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 188, 188, 65, 65, 65, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 89, 89, 89, 89, 89,
	89, 89, 90, 90, 90, 90, 90, 90, 91, 91,
	91, 62, 62, 62, 62, 62, 62, 92, 92, 92,
	92, 96, 96, 74, 74, 76, 76, 75, 77, 189,
	189, 97, 97, 102, 98, 98, 100, 100, 103, 103,
	103, 101, 101, 101, 128, 128, 128, 106, 106, 114,
	114, 115, 115, 107, 107, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 117, 117, 117, 118, 118,
	119, 119, 119, 126, 126, 123, 123, 129, 129, 129,
	129, 129, 130, 130, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 193, 193, 193, 198, 199,
	134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 9,
	9, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 4, 5, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 4,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 3, 3,
	3, 3, 0, 2, 2, 4, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 0,
	2, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 140, 141, 143, 142, 168, 144, 161,
	52, 180, 181, 183, 184, 25, 162, 163, 166, 167,
	185, 186, 187, -198, 8, 266, 56, -197, 282, -86,
	15, -29, 5, -27, -201, -27, -27, -27, -27, -27,
	-169, 56, -119, 149, 98, 176, 258, 146, 147, 153,
	-122, 64, 60, -121, 274, 180, 194, 188, 214, 206,
	204, 207, 244, 71, 183, 254, 164, 203, 199, 197,
	27, 219, 279, 198, 159, 158, 220, 224, 245, 192,
	193, 248, 218, 160, 32, 276, 37, 172, 249, 222,
	247, 217, 213, 216, 191, 212, 41, 226, 225, 227,
	243, 209, 200, 18, 252, 167, 170, 221, 223, 154,
	174, 278, 250, 196, 171, 166, 253, 184, 246, 256,
	40, 231, 190, 157, 181, 178, 210, 173, 201, 202,
	215, 189, 211, 182, 175, 168, 255, 232, 280, 208,
	205, 179, 177, 236, 237, 238, 239, 277, 251, 233,
	-107, 149, 151, 147, 147, 148, 149, 258, 146, 147,
	-54, -129, 64, 65, 63, 60, -121, 149, 176, 147,
	135, 207, 140, 234, 148, 32, 174, -138, -140, 147,
	182, -109, 177, 236, 237, 238, 239, 60, 246, 245,
	247, 240, -129, 182, -134, -134, -134, -134, -134, 186,
	-129, 60, -2, -90, 17, 16, -5, -3, -198, 6,
	20, 21, -33, 42, 43, -28, -39, 126, -40, -129,
	-59, 100, -64, 29, 64, 63, 60, -121, 23, -66,
	-60, -77, -78, -79, 135, 136, 124, 125, 132, 101,
	-194, -195, -69, -67, -68, -70, -63, 76, 77, -75,
	-198, -122, 59, 46, 47, 267, 268, 269, 270, 273,
	271, 103, 36, 257, 265, 264, 263, 261, 262, 259,
	260, 152, 258, 130, 266, 62, 72, 66, 67, 68,
	69, 75, 61, 73, -107, -42, -43, -44, -45, -56,
	-78, -198, -54, 11, -49, -54, -98, -100, -139, -137,
	182, -103, -122, 247, 246, 245, -123, -101, -120, 244,
	207, 243, 145, 99, 22, 24, 229, 102, 135, 16,
	103, 134, 267, 140, 50, 259, 260, 257, 269, 270,
	258, 234, 29, 10, 25, 162, 21, 128, 142, 106,
	107, 165, 23, 163, 77, 19, 53, 11, 13, 14,
	152, 151, 119, 148, 48, 8, 59, 26, 115, 44,
	28, 46, 116, 117, 17, 261, 262, 31, 273, 169,
	130, 51, 38, 100, 75, 54, 98, 15, 49, 118,
	143, 266, 47, 146, 6, 272, 30, 161, 45, 147,
	235, 105, 150, 76, 5, 153, 9, 52, 55, 263,
	264, 265, 36, 104, 12, -170, -165, 60, 148, -54,
	266, -122, -115, 152, -115, -115, 147, -54, -54, -114,
	152, 60, -114, -114, -114, -54, 137, -54, 60, 30,
	258, 60, 174, 147, 175, 149, -135, -198, -123, -122,
	-135, -135, -135, 178, 179, 178, 179, -135, 248, -110,
	241, 54, -135, -129, 11, 22, -198, 55, -199, 58,
	-91, 19, 31, -40, 20, -129, -87, -88, -40, -86,
	-2, -27, 38, -31, 21, 70, 11, -125, 99, 98,
	115, -124, 22, -127, 63, 64, 65, -122, 137, -40,
	-61, 119, 100, 116, 117, 118, 102, 121, 120, 131,
	124, 125, 126, 127, 128, 129, 130, 122, 123, 134,
	108, 109, 110, 111, 112, 113, 114, -108, -198, -78,
	-198, 138, 139, -64, 29, -64, -64, -64, -64, -64,
	-188, 74, -2, -73, -40, -198, -198, 63, -64, -198,
	-198, -198, -198, -198, -198, -198, -198, -82, -40, -198,
	-202, -198, -202, -202, -202, -202, -202, -202, -202, -198,
	-198, -198, -198, -55, 26, -54, 30, 57, -50, -52,
	-51, -53, 44, 48, 50, 45, 46, 47, 51, -133,
	22, -42, -198, -132, 170, -131, 22, -129, -54, -49,
	-200, 57, 11, 55, 57, 57, -98, -100, 182, -99,
	-104, 248, 250, 150, 108, -128, -122, -193, 29, 64,
	63, 65, 30, 58, 57, -143, -146, -148, -147, -149,
	-150, -144, -145, 204, 205, 135, 208, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 30, 164, 201,
	202, 203, 97, 220, 221, 222, 223, 224, 225, 226,
	227, 206, 188, 189, 190, 191, 192, 193, 194, 196,
	197, 198, 199, 200, 60, -135, 149, -186, 55, 60,
	100, 60, -54, -54, -135, 150, -54, 23, 54, -54,
	60, 60, -130, -129, -120, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, 249, -112, 235,
	242, -54, -190, -3, -7, -9, -8, 60, -193, 64,
	-190, -142, -143, -191, -129, 9, 119, 57, 18, 18,
	137, 57, -89, 24, 25, -90, -199, -33, -65, -122,
	66, 69, -32, 45, -54, -40, -40, -71, 75, 100,
	76, 77, -124, 126, -130, -123, -120, 64, -64, -72,
	-75, -78, 74, 119, 116, 117, 118, 102, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -136, 60, -193, 60, -63, 63,
	64, -63, 74, -199, 57, -199, -2, -38, 21, -37,
	-39, -192, 78, 79, 80, 81, 82, 83, 84, 85,
	97, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, -37, -37, -40, -40, -79, -122, -129, -79,
	-37, -31, -80, -81, 104, -79, -199, -37, -38, -37,
	-37, -94, 29, 170, -54, -97, -102, -79, -43, -44,
	-44, -43, -44, 44, 44, 44, 49, 44, 49, 44,
	-51, -129, -199, -57, 52, 151, 53, -198, -131, -94,
	55, -42, -54, -103, -64, -99, 57, 249, 251, 252,
	-64, 54, -40, -156, 134, -171, -172, -173, -123, -193,
	66, -165, -166, -174, 154, 157, 153, -167, 148, 28,
	-161, 75, 100, -157, 232, -151, 56, -151, -151, -151,
	-151, -155, 207, -155, -155, -155, 56, 56, -151, -151,
	-151, -159, 56, -159, -159, -160, 56, -160, -126, 55,
	-54, -184, 277, -185, 60, -135, 23, -135, -116, 145,
	142, 143, -181, 141, 229, 207, 71, 29, 15, 267,
	170, 280, 60, 171, -54, -54, -135, -111, 11, 119,
	57, -199, 57, 40, -40, -40, -40, -130, -88, 33,
	33, -91, -106, 19, 11, 36, 36, -37, 75, 76,
	77, 137, -198, -72, -64, -64, -64, -64, -36, 165,
	-36, 99, -199, -40, -199, -199, -37, 57, -199, -199,
	57, 55, 22, 57, 11, 137, 57, 11, -199, -37,
	-83, -81, 106, -40, -199, -199, -199, -199, -199, -62,
	30, 36, -2, -198, 36, -198, -58, 57, 12, 108,
	-47, -46, 54, 55, -48, 54, -46, 44, 44, 148,
	148, 148, -95, -122, -58, -42, -58, -104, -105, 253,
	250, 256, 60, -193, 57, -173, 108, 56, 28, -167,
	-167, 60, 60, -152, 29, 75, -158, 233, 66, -155,
	-155, -156, 30, -156, -156, -156, -164, -193, -164, 66,
	66, 54, -122, -135, -183, -182, -123, -134, -187, 176,
	155, 156, 159, 158, 60, 148, 28, 154, 157, 170,
	153, -187, 176, -117, -118, 150, 22, 148, 28, 170,
	-135, -113, 116, 12, -129, -129, -143, 22, -129, 41,
	137, 34, 35, 34, 35, -54, -41, 11, 126, -123,
	-38, -36, -36, 99, -64, -64, -199, -39, -141, 135,
	204, 164, 203, 199, 218, 209, 231, 201, 232, 205,
	-136, -141, -64, -64, -123, -64, -64, 274, -86, 107,
	-40, 105, -96, 54, -97, -74, -76, -75, -198, -2,
	-92, -127, -95, -86, -102, -40, -40, -40, 56, -40,
	-198, -198, -198, -199, 57, -86, -58, 250, 254, 255,
	-172, -173, -176, -175, -122, 60, 60, -154, 54, -193,
	66, 67, 75, 257, 72, 58, -156, -156, 60, 135,
	58, 57, 58, 57, 58, 57, -54, 57, 108, -134,
	-122, -134, -122, -54, -134, -122, -193, -40, -190, -58,
	-42, -199, -64, -199, -151, -151, -151, -160, -151, 193,
	-151, 193, -198, -199, -199, -199, 57, 19, -199, 57,
	19, -198, -35, 272, -40, -189, 281, 27, -96, 57,
	-199, -199, -199, 57, 137, -199, -90, -93, -122, -93,
	-93, -93, -132, -122, -90, 58, 57, -151, -162, 229,
	9, -155, -193, -155, 66, 66, -135, -182, -173, 56,
	26, -84, 13, -155, 60, 66, -64, -64, -64, -64,
	-64, -199, -193, -37, 28, -76, 36, -2, -198, -127,
	-127, -189, 57, 58, -199, -199, -199, -57, -189, -178,
	-177, 55, 160, 71, -175, -163, 154, 28, 153, 257,
	-156, -156, 58, 58, -93, -198, -85, 14, 16, -199,
	-199, -199, -199, -199, -34, 119, 277, 9, -74, -2,
	137, -122, -177, 60, -168, 108, -193, -153, 71, 28,
	28, 58, -179, -180, 170, -40, -73, -199, 275, 51,
	278, -97, -199, -127, 66, -193, -186, -199, 57, -122,
	41, 276, 279, -184, -180, 36, 41, 172, 277, 173,
	278, -198, 279, -64, 169, -199, -199,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 560, 0, 309, 309, 309, 309,
	309, 309, 0, 640, 623, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 870, 870, 870, 870, 870,
	0, 0, 0, 0, 37, 38, 868, 1, 3, 572,
	0, 0, 313, 316, 311, 0, 623, 0, 0, 0,
	68, 0, 0, 855, 0, 856, 621, 621, 621, 641,
	642, 535, 536, 537, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 857, 858, 859, 860, 861, 862, 863, 864,
	0, 0, 624, 0, 619, 0, 619, 619, 619, 0,
	239, 382, 647, 648, 649, 650, 651, 855, 856, 0,
	0, 0, 0, 871, 871, 871, 871, 0, 0, 871,
	0, 271, 260, 262, 263, 264, 265, 871, 282, 283,
	280, 270, 284, 287, 290, 291, 292, 293, 294, 0,
	0, 305, 30, 578, 0, 0, 560, 32, 0, 309,
	314, 315, 319, 317, 318, 310, 0, 327, 331, 0,
	390, 0, 395, -2, -2, -2, -2, -2, 0, 434,
	435, 436, 437, 530, 0, 0, 0, 0, 0, 0,
	459, 460, 461, 462, 463, 464, 531, 399, 400, 598,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 520, 0, 493, 493, 493, 493, 493, 493, 493,
	493, 0, 0, 0, 0, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 0, 0, 341, 343, 344, 345,
	364, 0, 366, 0, 0, 45, 49, 50, 0, 64,
	846, 604, 645, -2, -2, -2, 0, 0, 646, -2,
	774, -2, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 0, 85, 0, 0, 871,
	0, 75, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 0, 0, 238, 0, 240, 871, 871,
	871, 871, 871, 871, 871, 871, 249, 872, 873, 645,
	250, 251, 252, 871, 871, 871, 871, 255, 0, 0,
	272, 0, 266, 295, 0, 0, 0, 0, 31, 869,
	25, 0, 0, 573, 574, 0, 561, 562, 565, 572,
	30, 316, 0, 321, 320, 312, 0, 328, 0, 0,
	0, 332, 0, 338, 334, 335, 336, 337, 0, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 420, 421, 422, 423, 424, 425, 396, 0, 412,
	0, 0, 0, 453, 550, 454, 455, 456, 457, 458,
	549, 551, 30, 0, 432, 0, 323, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 521, 0,
	485, 0, 486, 487, 488, 489, 490, 491, 492, 0,
	323, 0, 0, 47, 0, 381, 0, 0, 0, 0,
	0, 0, 370, 0, 0, 373, 0, 0, 0, 0,
	365, 0, 0, 384, 819, 367, 0, 369, -2, 0,
	0, 0, 43, 44, 0, 0, 51, 52, 0, 54,
	55, 0, 0, 0, 0, 169, 614, 615, 616, 535,
	865, 867, 612, 198, 0, 152, 148, 92, 93, 94,
	95, 141, 98, 141, 141, 141, 141, 166, 166, 166,
	166, 124, 125, 126, 127, 128, 0, 0, 111, 141,
	141, 141, 115, 131, 132, 133, 134, 135, 136, 137,
	138, 96, 99, 100, 101, 102, 103, 104, 105, 143,
	143, 143, 145, 145, 643, 70, 0, 78, 0, 871,
	0, 871, 83, 0, 214, 0, 233, 620, 0, 871,
	236, 237, 383, 652, 653, 241, 242, 243, 244, 245,
	246, 247, 248, 253, 258, 254, 259, 256, 273, 267,
	268, 261, 296, 299, 300, 301, 302, 303, 304, 866,
	297, 0, 89, 306, 307, 579, 0, 0, 0, 0,
	0, 0, 564, 566, 567, 578, 33, 319, 0, 553,
	0, 0, 0, 322, 28, 391, 392, 394, 413, 0,
	415, 417, 333, 329, 0, 533, -2, -2, 401, 402,
	428, 429, 430, 0, 0, 0, 0, 0, 426, 426,
	408, 0, 438, 439, 440, 441, 442, 443, 444, 445,
	446, 447, 448, 449, 452, 504, 505, 0, 450, 538,
	539, 451, 552, 431, 0, 597, 30, 0, 0, 324,
	325, 466, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 0, 0, 0, 0, 0, 532, 0, 0,
	0, 0, 527, 524, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 380, 388, 601, 0, 342, 360,
	362, 0, 357, 371, 372, 374, 0, 376, 0, 378,
	379, 346, 347, 348, 0, 0, 0, 0, 368, 388,
	0, 388, 46, 605, 607, 53, 0, 0, 58, 59,
	606, 608, 609, 610, 0, 84, 199, 201, 204, 205,
	206, 86, 87, 0, 0, 0, 0, 0, 193, 194,
	155, 153, 0, 150, 149, 97, 0, 166, 166, 118,
	119, 169, 0, 169, 169, 169, 0, 0, 112, 113,
	114, 106, 0, 107, 108, 109, 0, 110, 0, 0,
	871, 72, 0, 76, 77, 73, 622, 74, 870, 0,
	0, 635, 215, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 0, 232, 871, 235, 276, 0, 0,
	0, 0, 0, 0, 575, 576, 577, 0, 563, 0,
	0, 26, 0, 617, 618, 554, 555, 339, 414, 416,
	418, 0, 323, 403, 426, 426, 409, 0, 404, 0,
	405, 0, 398, 433, -2, 467, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	0, 525, 0, 0, 484, 495, 496, 497, 498, 591,
	0, 0, -2, 0, 36, 0, 560, 0, 0, 0,
	354, 361, 0, 0, 355, 0, 356, 375, 377, 0,
	0, 0, 0, 352, 560, 388, 42, 56, 57, 0,
	0, 63, 170, 171, 0, 202, 0, 0, 188, 0,
	0, 191, 192, 162, 0, 154, 91, 151, 0, 169,
	169, 120, 0, 121, 122, 123, 0, 139, 0, 0,
	0, 0, 644, 71, 79, 80, 0, 207, 870, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 870, 0, 0, 870, 636, 637, 638, 639, 0,
	234, 257, 0, 0, 274, 275, 90, 0, 308, 580,
	0, 570, 571, 568, 569, 27, 388, 0, 330, 534,
	0, 406, 407, 0, 427, 410, 468, 326, 0, 141,
	141, 509, 141, 145, 512, 141, 514, 141, 517, 0,
	0, 0, 0, 0, 533, 0, 0, 0, 522, 483,
	528, 0, 599, 0, 591, 581, 593, 595, 0, 30,
	0, 587, 0, 572, 602, 389, 603, 358, 0, 363,
	0, 0, 0, 366, 0, 572, 41, 60, 61, 62,
	200, 203, 0, 195, 141, 189, 190, 164, 0, 156,
	157, 158, 159, 160, 161, 142, 116, 117, 167, 168,
	166, 0, 166, 0, 146, 0, 871, 0, 0, 208,
	0, 209, 211, 212, 213, 0, 277, 278, 298, 556,
	340, 469, 411, 472, 506, 166, 510, 511, 513, 515,
	516, 518, 0, 474, 473, 475, 0, 0, 478, 0,
	0, 0, 0, 0, 526, 34, 0, 0, 35, 0,
	596, -2, 0, 0, 0, 48, 599, 0, 350, 0,
	0, 0, 384, 353, 599, 180, 0, 197, 172, 165,
	0, 169, 140, 169, 0, 0, 69, 81, 82, 0,
	0, 558, 0, 507, 508, 0, 0, 0, 0, 0,
	499, 482, 523, 600, 0, 594, 0, -2, 0, 589,
	588, 39, 0, 359, 385, 386, 387, 349, 40, 179,
	181, 0, 186, 0, 196, 177, 0, 174, 176, 163,
	129, 130, 144, 147, 0, 0, 29, 0, 0, 519,
	476, 477, 479, 480, 0, 0, 0, 0, 584, 30,
	0, 351, 182, 183, 0, 187, 185, 88, 0, 173,
	175, 75, 0, 228, 0, 559, 557, 481, 0, 0,
	0, 592, -2, 590, 184, 178, 78, 227, 0, 0,
	500, 0, 503, 210, 229, 0, 501, 0, 0, 0,
	0, 0, 502, 0, 0, 230, 231,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 129, 121, 3,
	56, 58, 126, 124, 57, 125, 137, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 282,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:375
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:393
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:440
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:466
		{
			if yylex.(*Tokenizer).IsMySQL() && len(yyDollar[9].returning) != 0 {
				yylex.Error("MySQL/MariaDB dialect doesn't support returning with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:495
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:504
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:607
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:632
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:637
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:647
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:652
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:657
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:668
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:680
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:687
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:694
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:699
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:709
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:947
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:956
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:983
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1023
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1078
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1083
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1091
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1096
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1117
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1208
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1264
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1268
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1304
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1309
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1348
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1352
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1364
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1372
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1377
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1475
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1588
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1736
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1832
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1875
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1909
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1913
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1929
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1933
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1950
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1954
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1964
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1966
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1970
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1981
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2070
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2075
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2079
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2083
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2087
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2110
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2168
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2180
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = IsNullStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = IsNotNullStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = IsTrueStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = IsNotTrueStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = IsFalseStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = IsNotFalseStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = EqualStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = LessThanStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = GreaterThanStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = LessEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = GreaterEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = NotEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2444
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.str = BooleanModeStr
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2620
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2624
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.str = QueryExpansionStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = string("")
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2732
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2774
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &NullVal{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &Default{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2859
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2890
		{
			yyVAL.exprs = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2908
		{
			yyVAL.orderBy = nil
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2912
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2922
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = DescScr
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = DescNullsLastScr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2953
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.str = AscNullsLastScr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.limit = nil
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2970
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2978
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow 'LIMIT offset, limit' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2986
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2990
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = ""
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = ForUpdateStr
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3007
		{
			yyVAL.str = ShareModeStr
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3028
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3033
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3037
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3041
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3060
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3065
		{
			yyVAL.updateExprs = nil
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3069
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.returning = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3117
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3128
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3134
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3144
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3150
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3154
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.bytes = []byte("charset")
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = &Default{}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3199
		{
			yyVAL.byt = 0
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3201
		{
			yyVAL.byt = 1
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.str = ""
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.str = IgnoreStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3256
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3258
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3548
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			decNesting(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3562
		{
			forceEOF(yylex)
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3567
		{
			forceEOF(yylex)
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			forceEOF(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
