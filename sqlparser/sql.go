// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const SINGLE_QUOTE_STRING = 57398
const DOUBLE_QUOTE_STRING = 57399
const BACK_QUOTE_STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const DOLLAR_SIGN = 57408
const LIST_ARG = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const MICROSECOND = 57413
const SECOND = 57414
const MINUTE = 57415
const HOUR = 57416
const DAY = 57417
const WEEK = 57418
const MONTH = 57419
const QUARTER = 57420
const SECOND_MICROSECOND = 57421
const MINUTE_MICROSECOND = 57422
const MINUTE_SECOND = 57423
const HOUR_MICROSECOND = 57424
const HOUR_SECOND = 57425
const HOUR_MINUTE = 57426
const DAY_MICROSECOND = 57427
const DAY_SECOND = 57428
const DAY_MINUTE = 57429
const DAY_HOUR = 57430
const YEAR_MONTH = 57431
const YEAR = 57432
const MYSQL_INTERVAL = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const INTERVAL = 57459
const JSON_EXTRACT_OP = 57460
const JSON_UNQUOTE_EXTRACT_OP = 57461
const CREATE = 57462
const ALTER = 57463
const DROP = 57464
const RENAME = 57465
const ANALYZE = 57466
const ADD = 57467
const SCHEMA = 57468
const TABLE = 57469
const INDEX = 57470
const VIEW = 57471
const TO = 57472
const IGNORE = 57473
const IF = 57474
const UNIQUE = 57475
const PRIMARY = 57476
const COLUMN = 57477
const CONSTRAINT = 57478
const SPATIAL = 57479
const FULLTEXT = 57480
const FOREIGN = 57481
const KEY_BLOCK_SIZE = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const MAXVALUE = 57491
const PARTITION = 57492
const REORGANIZE = 57493
const LESS = 57494
const THAN = 57495
const PROCEDURE = 57496
const TRIGGER = 57497
const VINDEX = 57498
const VINDEXES = 57499
const STATUS = 57500
const VARIABLES = 57501
const BEGIN = 57502
const START = 57503
const TRANSACTION = 57504
const COMMIT = 57505
const ROLLBACK = 57506
const DEALLOCATE = 57507
const PREPARE = 57508
const EXECUTE = 57509
const BIT = 57510
const TINYINT = 57511
const SMALLINT = 57512
const MEDIUMINT = 57513
const INT = 57514
const INTEGER = 57515
const BIGINT = 57516
const INTNUM = 57517
const REAL = 57518
const DOUBLE = 57519
const FLOAT_TYPE = 57520
const DECIMAL = 57521
const NUMERIC = 57522
const TIME = 57523
const TIMESTAMP = 57524
const DATETIME = 57525
const CHAR = 57526
const VARCHAR = 57527
const BOOL = 57528
const CHARACTER = 57529
const VARBINARY = 57530
const NCHAR = 57531
const TEXT = 57532
const TINYTEXT = 57533
const MEDIUMTEXT = 57534
const LONGTEXT = 57535
const BLOB = 57536
const TINYBLOB = 57537
const MEDIUMBLOB = 57538
const LONGBLOB = 57539
const JSON = 57540
const ENUM = 57541
const GEOMETRY = 57542
const POINT = 57543
const LINESTRING = 57544
const POLYGON = 57545
const GEOMETRYCOLLECTION = 57546
const MULTIPOINT = 57547
const MULTILINESTRING = 57548
const MULTIPOLYGON = 57549
const NULLX = 57550
const AUTO_INCREMENT = 57551
const APPROXNUM = 57552
const SIGNED = 57553
const UNSIGNED = 57554
const ZEROFILL = 57555
const DATABASES = 57556
const TABLES = 57557
const VITESS_KEYSPACES = 57558
const VITESS_SHARDS = 57559
const VITESS_TABLETS = 57560
const VSCHEMA_TABLES = 57561
const EXTENDED = 57562
const FULL = 57563
const PROCESSLIST = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const MATCH = 57594
const AGAINST = 57595
const BOOLEAN = 57596
const LANGUAGE = 57597
const WITH = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const RETURNING = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"MYSQL_INTERVAL",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	175, 273,
	176, 273,
	-2, 263,
	-1, 268,
	134, 627,
	-2, 623,
	-1, 269,
	134, 628,
	-2, 624,
	-1, 341,
	105, 806,
	-2, 62,
	-1, 342,
	105, 767,
	-2, 63,
	-1, 347,
	105, 751,
	-2, 589,
	-1, 349,
	105, 788,
	-2, 591,
	-1, 564,
	70, 524,
	-2, 454,
	-1, 622,
	52, 45,
	54, 45,
	-2, 47,
	-1, 773,
	134, 630,
	-2, 626,
	-1, 982,
	5, 31,
	-2, 424,
	-1, 1007,
	5, 30,
	-2, 561,
	-1, 1241,
	5, 31,
	-2, 562,
	-1, 1288,
	5, 30,
	-2, 564,
	-1, 1351,
	5, 31,
	-2, 565,
}

const yyPrivate = 57344

const yyLast = 12330

var yyAct = [...]int{

	302, 53, 1342, 921, 698, 567, 1299, 271, 516, 837,
	1173, 855, 1145, 901, 301, 1146, 1070, 1247, 873, 614,
	566, 3, 877, 1142, 915, 24, 612, 798, 731, 238,
	876, 838, 1027, 346, 247, 1118, 59, 809, 974, 1073,
	646, 1011, 887, 879, 775, 632, 806, 494, 1061, 500,
	1016, 443, 631, 327, 53, 340, 911, 825, 833, 616,
	178, 506, 252, 514, 328, 337, 256, 335, 332, 601,
	956, 58, 272, 1236, 246, 1371, 239, 240, 241, 242,
	1361, 1369, 1349, 938, 1367, 922, 1360, 251, 1137, 1348,
	1233, 447, 1308, 633, 326, 634, 253, 937, 54, 29,
	30, 581, 63, 260, 1324, 530, 529, 539, 540, 532,
	533, 534, 535, 536, 537, 538, 531, 1035, 1167, 541,
	1034, 869, 870, 1036, 942, 1168, 1169, 868, 468, 726,
	65, 66, 67, 68, 69, 936, 640, 641, 642, 1180,
	1181, 207, 203, 204, 205, 1184, 736, 482, 1182, 640,
	641, 642, 728, 484, 1052, 894, 1259, 902, 1221, 729,
	456, 1219, 492, 243, 237, 479, 480, 1368, 1366, 1343,
	1094, 835, 1300, 1306, 457, 808, 889, 856, 858, 1274,
	450, 200, 201, 201, 889, 706, 697, 1302, 1026, 1025,
	269, 530, 529, 539, 540, 532, 533, 534, 535, 536,
	537, 538, 531, 834, 444, 541, 933, 930, 931, 1024,
	929, 889, 1046, 1329, 445, 453, 470, 215, 472, 1244,
	474, 474, 474, 474, 82, 474, 202, 1105, 212, 553,
	554, 212, 1091, 474, 990, 940, 943, 975, 1093, 968,
	747, 521, 212, 469, 471, 490, 534, 535, 536, 537,
	538, 531, 206, 53, 541, 1081, 463, 874, 212, 212,
	82, 541, 1325, 511, 212, 948, 82, 1119, 550, 744,
	473, 552, 935, 503, 1188, 782, 857, 1301, 531, 513,
	513, 541, 895, 1079, 1334, 987, 1198, 502, 565, 780,
	781, 779, 1014, 888, 934, 1307, 1305, 1121, 886, 884,
	635, 888, 885, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 1347, 580, 582, 582, 582, 582, 582, 582,
	582, 582, 590, 591, 592, 593, 467, 902, 888, 1139,
	1183, 939, 1123, 613, 1127, 826, 1122, 1120, 1129, 701,
	266, 835, 1125, 986, 941, 985, 1050, 221, 1098, 1189,
	891, 1124, 55, 512, 511, 1092, 504, 1090, 512, 511,
	1141, 826, 746, 997, 1126, 1128, 459, 460, 461, 949,
	513, 232, 1080, 750, 751, 513, 892, 1085, 1082, 1075,
	1076, 1083, 1078, 1077, 512, 511, 512, 511, 638, 556,
	56, 212, 804, 212, 1084, 1337, 449, 508, 745, 212,
	1087, 513, 623, 513, 629, 1353, 212, 778, 1275, 199,
	82, 82, 82, 82, 1265, 82, 583, 584, 585, 586,
	587, 588, 589, 82, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 212, 1264, 541, 1065, 275, 512,
	511, 965, 966, 967, 512, 511, 216, 474, 1064, 1097,
	1081, 1053, 218, 82, 1332, 474, 513, 1357, 493, 224,
	220, 513, 765, 767, 768, 1176, 474, 474, 474, 474,
	474, 474, 474, 474, 451, 452, 325, 1175, 1079, 799,
	474, 474, 640, 641, 642, 1047, 222, 924, 766, 227,
	801, 476, 477, 478, 225, 481, 1037, 715, 712, 640,
	641, 642, 711, 486, 1292, 1340, 331, 640, 641, 642,
	1292, 493, 1292, 1293, 732, 732, 212, 702, 738, 217,
	1256, 1255, 493, 212, 212, 212, 1164, 493, 1312, 82,
	700, 740, 737, 737, 713, 82, 695, 752, 465, 776,
	1243, 493, 1195, 1194, 1191, 1192, 219, 458, 228, 229,
	230, 231, 235, 53, 444, 773, 245, 234, 233, 532,
	533, 534, 535, 536, 537, 538, 531, 1080, 1311, 541,
	569, 754, 1085, 1082, 1075, 1076, 1083, 1078, 1077, 769,
	1191, 1190, 818, 821, 26, 800, 980, 493, 827, 1084,
	813, 1185, 771, 950, 493, 1074, 598, 493, 1013, 332,
	332, 332, 332, 332, 1013, 839, 811, 493, 1005, 645,
	644, 1006, 1143, 1012, 613, 1012, 859, 557, 558, 559,
	560, 561, 562, 563, 805, 332, 802, 803, 862, 60,
	625, 56, 699, 811, 813, 1108, 1239, 82, 830, 823,
	598, 598, 1197, 212, 212, 82, 1012, 212, 1193, 1039,
	212, 863, 840, 867, 212, 843, 82, 82, 82, 82,
	82, 82, 82, 82, 841, 842, 753, 844, 980, 626,
	82, 82, 992, 903, 904, 905, 212, 860, 980, 852,
	26, 861, 212, 866, 865, 529, 539, 540, 532, 533,
	534, 535, 536, 537, 538, 531, 82, 881, 541, 262,
	212, 474, 597, 474, 980, 952, 82, 1287, 628, 551,
	627, 474, 625, 748, 919, 991, 56, 696, 1269, 917,
	488, 896, 989, 26, 916, 705, 598, 56, 1158, 810,
	812, 489, 253, 1042, 1017, 1018, 716, 717, 718, 719,
	720, 721, 722, 723, 912, 828, 814, 815, 913, 914,
	724, 725, 822, 603, 606, 607, 608, 604, 907, 605,
	609, 475, 56, 1017, 1018, 988, 829, 906, 831, 832,
	56, 331, 71, 969, 1178, 854, 1229, 493, 1143, 56,
	491, 773, 1066, 1020, 709, 485, 212, 760, 1023, 212,
	212, 212, 212, 212, 776, 1022, 846, 849, 957, 845,
	958, 212, 850, 1365, 212, 847, 257, 258, 212, 851,
	848, 607, 608, 1359, 1104, 212, 212, 953, 1339, 82,
	1364, 1009, 963, 507, 970, 962, 603, 606, 607, 608,
	604, 343, 605, 609, 1008, 82, 1010, 505, 530, 529,
	539, 540, 532, 533, 534, 535, 536, 537, 538, 531,
	495, 1057, 541, 643, 1007, 466, 1049, 1338, 1285, 1270,
	1043, 1237, 496, 332, 774, 926, 708, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 996, 1102, 611, 254, 255, 507, 212, 1030,
	961, 82, 248, 82, 1021, 1316, 1317, 212, 960, 1040,
	212, 82, 951, 1029, 249, 1031, 60, 1272, 1013, 509,
	1326, 1054, 1055, 1032, 1260, 743, 62, 64, 1038, 624,
	1056, 474, 1058, 1059, 1060, 734, 7, 57, 1044, 1045,
	735, 6, 733, 5, 1, 964, 741, 897, 898, 899,
	900, 1235, 555, 923, 1069, 932, 474, 1341, 497, 501,
	1062, 1062, 287, 908, 909, 910, 1063, 1298, 1072, 1172,
	883, 875, 442, 777, 977, 522, 70, 1333, 882, 978,
	1086, 925, 1304, 927, 1258, 890, 982, 983, 984, 1051,
	893, 946, 1177, 979, 1336, 993, 80, 1048, 651, 650,
	999, 1101, 1000, 1001, 1002, 1003, 648, 649, 647, 994,
	653, 652, 568, 739, 223, 338, 610, 1148, 636, 53,
	1112, 579, 918, 839, 1130, 1144, 1111, 1151, 1117, 493,
	839, 1147, 345, 1131, 773, 1160, 1161, 1162, 448, 1149,
	800, 1138, 510, 72, 1089, 1088, 928, 331, 331, 331,
	331, 331, 1096, 1152, 1154, 727, 947, 483, 1153, 226,
	82, 549, 331, 212, 959, 1033, 344, 1150, 749, 499,
	1315, 1271, 995, 331, 1171, 578, 1165, 82, 824, 274,
	1170, 764, 1166, 1186, 1187, 286, 283, 285, 284, 755,
	530, 529, 539, 540, 532, 533, 534, 535, 536, 537,
	538, 531, 1004, 1179, 541, 523, 273, 264, 330, 594,
	343, 602, 600, 1199, 599, 1019, 1015, 329, 1107, 332,
	82, 82, 1232, 82, 1323, 759, 1201, 28, 61, 1204,
	259, 971, 972, 973, 23, 22, 21, 19, 732, 18,
	1222, 1208, 17, 20, 16, 1210, 82, 15, 1231, 212,
	212, 1206, 1116, 212, 14, 32, 737, 13, 1217, 1209,
	212, 12, 11, 10, 9, 297, 290, 288, 289, 82,
	292, 293, 294, 295, 8, 4, 291, 298, 1238, 296,
	250, 25, 345, 345, 345, 345, 2, 345, 1249, 1250,
	1251, 0, 498, 1252, 0, 345, 0, 0, 1246, 0,
	1163, 1068, 0, 1040, 0, 0, 0, 474, 0, 82,
	1254, 82, 0, 0, 1261, 0, 1263, 0, 0, 0,
	0, 762, 763, 0, 1267, 520, 1095, 0, 777, 0,
	210, 1268, 0, 236, 0, 0, 0, 0, 0, 1273,
	82, 0, 82, 82, 244, 1262, 0, 0, 0, 0,
	1148, 0, 1284, 1289, 0, 0, 0, 0, 263, 0,
	210, 210, 1290, 1291, 1147, 1286, 210, 212, 0, 0,
	0, 0, 0, 1288, 1297, 82, 0, 1303, 0, 568,
	0, 1314, 816, 817, 1211, 0, 0, 1282, 82, 212,
	1309, 1213, 1310, 772, 0, 82, 0, 1313, 1148, 0,
	53, 345, 0, 1223, 1224, 1225, 82, 637, 1228, 212,
	1327, 331, 1147, 0, 0, 1331, 0, 0, 0, 0,
	1328, 1240, 1241, 1242, 0, 1245, 1114, 1115, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 1132,
	1133, 0, 1135, 1136, 839, 872, 1350, 0, 1352, 0,
	0, 0, 0, 0, 0, 1355, 1335, 0, 0, 82,
	0, 82, 82, 82, 212, 82, 0, 0, 0, 1362,
	1363, 82, 0, 0, 0, 0, 0, 0, 0, 1370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 0, 210, 0, 210, 0, 82, 82, 82,
	343, 210, 333, 0, 0, 1281, 0, 0, 210, 345,
	0, 0, 1214, 1215, 0, 1216, 878, 345, 1218, 0,
	1220, 0, 1294, 1295, 1296, 0, 0, 0, 345, 345,
	345, 345, 345, 345, 345, 345, 487, 0, 0, 0,
	209, 0, 345, 345, 82, 82, 0, 0, 1318, 1319,
	1320, 1321, 1322, 0, 0, 954, 955, 82, 501, 0,
	0, 0, 0, 0, 1212, 0, 0, 1257, 756, 0,
	82, 336, 0, 0, 0, 0, 446, 1266, 520, 0,
	0, 0, 1113, 0, 345, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 1346, 0, 0, 1226,
	493, 1351, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 1356, 0, 541, 0, 210, 772,
	0, 981, 0, 0, 0, 210, 618, 210, 0, 0,
	82, 0, 0, 0, 0, 0, 998, 819, 819, 0,
	0, 0, 0, 819, 82, 1374, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 0,
	819, 530, 529, 539, 540, 532, 533, 534, 535, 536,
	537, 538, 531, 0, 0, 541, 0, 1276, 1277, 0,
	1278, 1279, 1280, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 0, 455, 0, 345, 0, 0,
	0, 462, 0, 0, 525, 0, 528, 0, 464, 0,
	0, 0, 542, 543, 544, 545, 546, 547, 548, 0,
	526, 527, 524, 530, 529, 539, 540, 532, 533, 534,
	535, 536, 537, 538, 531, 210, 210, 541, 878, 210,
	0, 0, 210, 0, 0, 0, 714, 0, 0, 0,
	0, 0, 0, 345, 0, 345, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 1140, 0, 0,
	345, 0, 0, 0, 714, 0, 0, 0, 0, 0,
	0, 1372, 976, 1155, 1156, 0, 1230, 1157, 596, 0,
	1159, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	1110, 0, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 0, 0, 541, 0, 263, 0,
	0, 0, 1134, 263, 263, 0, 0, 820, 820, 263,
	0, 0, 0, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 263, 263, 263, 0, 210, 0,
	820, 210, 210, 210, 210, 210, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 210, 0, 1207, 0,
	618, 878, 0, 878, 0, 0, 0, 210, 210, 0,
	0, 0, 1028, 530, 529, 539, 540, 532, 533, 534,
	535, 536, 537, 538, 531, 0, 0, 541, 0, 345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1234, 0, 0, 0, 703, 704, 0, 568, 707,
	0, 0, 710, 0, 530, 529, 539, 540, 532, 533,
	534, 535, 536, 537, 538, 531, 0, 1110, 541, 1227,
	0, 0, 1067, 345, 0, 345, 0, 0, 730, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 210, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 761, 26, 27, 54, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 45, 0, 0, 0, 0, 31, 0, 0,
	714, 0, 878, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 263, 345, 0, 0, 40, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 819, 1071,
	878, 520, 0, 1028, 0, 819, 530, 529, 539, 540,
	532, 533, 534, 535, 536, 537, 538, 531, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	263, 0, 345, 0, 345, 1174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 568, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 1200, 0, 0,
	0, 0, 0, 0, 33, 34, 36, 35, 38, 0,
	1202, 0, 0, 0, 0, 210, 0, 1205, 0, 0,
	0, 0, 0, 0, 0, 39, 46, 47, 345, 0,
	48, 49, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 42, 0, 43, 44, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 0, 1248, 1248, 1248, 0, 1253, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 0, 0,
	0, 1099, 1100, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 210, 668, 0, 0, 0, 0, 0, 345,
	345, 345, 263, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 0, 0, 0, 820, 520, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 1174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 1330, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 669, 0, 0, 0, 0, 819,
	0, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 1358, 0, 683, 684,
	685, 686, 687, 688, 689, 0, 690, 691, 692, 693,
	694, 670, 671, 672, 654, 655, 682, 0, 657, 0,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	674, 675, 676, 677, 678, 679, 680, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 1106, 179, 180, 181, 182, 183, 184, 185,
	186, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 529, 539, 540, 532,
	533, 534, 535, 536, 537, 538, 531, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 421, 0, 393, 433, 371,
	385, 441, 386, 387, 414, 357, 401, 131, 383, 820,
	374, 352, 380, 353, 372, 395, 99, 398, 370, 423,
	404, 113, 439, 115, 409, 0, 148, 124, 0, 0,
	397, 425, 399, 419, 392, 415, 362, 408, 434, 384,
	412, 435, 0, 0, 0, 81, 0, 0, 640, 641,
	642, 880, 0, 0, 0, 0, 92, 0, 0, 0,
	411, 430, 382, 179, 180, 181, 182, 183, 184, 185,
	186, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 187, 0, 413, 351, 410, 0, 355, 358,
	440, 428, 377, 378, 1041, 0, 0, 0, 0, 0,
	0, 396, 400, 416, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 0, 407, 0, 0, 0, 359,
	356, 0, 394, 0, 0, 0, 361, 0, 376, 417,
	0, 350, 420, 426, 391, 213, 429, 389, 388, 432,
	137, 0, 0, 151, 104, 103, 112, 424, 373, 381,
	95, 379, 143, 133, 163, 406, 134, 142, 116, 155,
	138, 162, 214, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 354, 0, 149, 165, 177,
	369, 427, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 365, 368, 363, 364, 402, 403, 436, 437,
	438, 418, 360, 0, 366, 367, 0, 422, 405, 83,
	0, 114, 175, 139, 101, 166, 431, 421, 0, 393,
	433, 371, 385, 441, 386, 387, 414, 357, 401, 131,
	383, 0, 374, 352, 380, 353, 372, 395, 99, 398,
	370, 423, 404, 113, 439, 115, 409, 0, 148, 124,
	0, 0, 397, 425, 399, 419, 392, 415, 362, 408,
	434, 384, 412, 435, 0, 0, 0, 81, 0, 0,
	640, 641, 642, 880, 0, 0, 0, 0, 92, 0,
	0, 0, 411, 430, 382, 179, 180, 181, 182, 183,
	184, 185, 186, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 187, 0, 413, 351, 410, 0,
	355, 358, 440, 428, 377, 378, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 416, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 407, 0, 0,
	0, 359, 356, 0, 394, 0, 0, 0, 361, 0,
	376, 417, 0, 350, 420, 426, 391, 213, 429, 389,
	388, 432, 137, 0, 0, 151, 104, 103, 112, 424,
	373, 381, 95, 379, 143, 133, 163, 406, 134, 142,
	116, 155, 138, 162, 214, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 354, 0, 149,
	165, 177, 369, 427, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 365, 368, 363, 364, 402, 403,
	436, 437, 438, 418, 360, 0, 366, 367, 0, 422,
	405, 83, 0, 114, 175, 139, 101, 166, 431, 421,
	0, 393, 433, 371, 385, 441, 386, 387, 414, 357,
	401, 131, 383, 0, 374, 352, 380, 353, 372, 395,
	99, 398, 370, 423, 404, 113, 439, 115, 409, 0,
	148, 124, 0, 0, 397, 425, 399, 419, 392, 415,
	362, 408, 434, 384, 412, 435, 56, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 411, 430, 382, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 413, 351,
	410, 0, 355, 358, 440, 428, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 416, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 0, 407,
	0, 0, 0, 359, 356, 0, 394, 0, 0, 0,
	361, 0, 376, 417, 0, 350, 420, 426, 391, 213,
	429, 389, 388, 432, 137, 0, 0, 151, 104, 103,
	112, 424, 373, 381, 95, 379, 143, 133, 163, 406,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 354,
	0, 149, 165, 177, 369, 427, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 365, 368, 363, 364,
	402, 403, 436, 437, 438, 418, 360, 0, 366, 367,
	0, 422, 405, 83, 0, 114, 175, 139, 101, 166,
	431, 421, 0, 393, 433, 371, 385, 441, 386, 387,
	414, 357, 401, 131, 383, 0, 374, 352, 380, 353,
	372, 395, 99, 398, 370, 423, 404, 113, 439, 115,
	409, 0, 148, 124, 0, 0, 397, 425, 399, 419,
	392, 415, 362, 408, 434, 384, 412, 435, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 411, 430, 382, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	413, 351, 410, 0, 355, 358, 440, 428, 377, 378,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 416,
	390, 0, 0, 0, 0, 0, 0, 1109, 0, 375,
	0, 407, 0, 0, 0, 359, 356, 0, 394, 0,
	0, 0, 361, 0, 376, 417, 0, 350, 420, 426,
	391, 213, 429, 389, 388, 432, 137, 0, 0, 151,
	104, 103, 112, 424, 373, 381, 95, 379, 143, 133,
	163, 406, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 354, 0, 149, 165, 177, 369, 427, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 365, 368,
	363, 364, 402, 403, 436, 437, 438, 418, 360, 0,
	366, 367, 0, 422, 405, 83, 0, 114, 175, 139,
	101, 166, 431, 421, 0, 393, 433, 371, 385, 441,
	386, 387, 414, 357, 401, 131, 383, 0, 374, 352,
	380, 353, 372, 395, 99, 398, 370, 423, 404, 113,
	439, 115, 409, 0, 148, 124, 0, 0, 397, 425,
	399, 419, 392, 415, 362, 408, 434, 384, 412, 435,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 411, 430,
	382, 179, 180, 181, 182, 183, 184, 185, 186, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	187, 0, 413, 351, 410, 0, 355, 358, 440, 428,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 416, 390, 0, 0, 0, 0, 0, 0, 770,
	0, 375, 0, 407, 0, 0, 0, 359, 356, 0,
	394, 0, 0, 0, 361, 0, 376, 417, 0, 350,
	420, 426, 391, 213, 429, 389, 388, 432, 137, 0,
	0, 151, 104, 103, 112, 424, 373, 381, 95, 379,
	143, 133, 163, 406, 134, 142, 116, 155, 138, 162,
	214, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 354, 0, 149, 165, 177, 369, 427,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	365, 368, 363, 364, 402, 403, 436, 437, 438, 418,
	360, 0, 366, 367, 0, 422, 405, 83, 0, 114,
	175, 139, 101, 166, 431, 421, 0, 393, 433, 371,
	385, 441, 386, 387, 414, 357, 401, 131, 383, 0,
	374, 352, 380, 353, 372, 395, 99, 398, 370, 423,
	404, 113, 439, 115, 409, 0, 148, 124, 0, 0,
	397, 425, 399, 419, 392, 415, 362, 408, 434, 384,
	412, 435, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	411, 430, 382, 179, 180, 181, 182, 183, 184, 185,
	186, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 187, 0, 413, 351, 410, 0, 355, 358,
	440, 428, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 416, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 0, 407, 0, 0, 0, 359,
	356, 0, 394, 0, 0, 0, 361, 0, 376, 417,
	0, 350, 420, 426, 391, 213, 429, 389, 388, 432,
	137, 0, 0, 151, 104, 103, 112, 424, 373, 381,
	95, 379, 143, 133, 163, 406, 134, 142, 116, 155,
	138, 162, 214, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 354, 0, 149, 165, 177,
	369, 427, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 365, 368, 363, 364, 402, 403, 436, 437,
	438, 418, 360, 0, 366, 367, 0, 422, 405, 83,
	0, 114, 175, 139, 101, 166, 431, 421, 0, 393,
	433, 371, 385, 441, 386, 387, 414, 357, 401, 131,
	383, 0, 374, 352, 380, 353, 372, 395, 99, 398,
	370, 423, 404, 113, 439, 115, 409, 0, 148, 124,
	0, 0, 397, 425, 399, 419, 392, 415, 362, 408,
	434, 384, 412, 435, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 411, 430, 382, 179, 180, 181, 182, 183,
	184, 185, 186, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 187, 0, 413, 351, 410, 0,
	355, 358, 440, 428, 377, 378, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 416, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 407, 0, 0,
	0, 359, 356, 0, 394, 0, 0, 0, 361, 0,
	376, 417, 0, 350, 420, 426, 391, 213, 429, 389,
	388, 432, 137, 0, 0, 151, 104, 103, 112, 424,
	373, 381, 95, 379, 143, 133, 163, 406, 134, 142,
	116, 155, 138, 162, 214, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 354, 0, 149,
	165, 177, 369, 427, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 365, 368, 363, 364, 402, 403,
	436, 437, 438, 418, 360, 0, 366, 367, 0, 422,
	405, 83, 0, 114, 175, 139, 101, 166, 431, 421,
	0, 393, 433, 371, 385, 441, 386, 387, 414, 357,
	401, 131, 383, 0, 374, 352, 380, 353, 372, 395,
	99, 398, 370, 423, 404, 113, 439, 115, 409, 0,
	148, 124, 0, 0, 397, 425, 399, 419, 392, 415,
	362, 408, 434, 384, 412, 435, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 411, 430, 382, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 413, 351,
	410, 0, 355, 358, 440, 428, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 416, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 0, 407,
	0, 0, 0, 359, 356, 0, 394, 0, 0, 0,
	361, 0, 376, 417, 0, 350, 420, 426, 391, 213,
	429, 389, 388, 432, 137, 0, 0, 151, 104, 103,
	112, 424, 373, 381, 95, 379, 143, 133, 163, 406,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 348, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 354,
	0, 149, 165, 177, 369, 427, 171, 172, 173, 174,
	0, 0, 0, 349, 347, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 365, 368, 363, 364,
	402, 403, 436, 437, 438, 418, 360, 0, 366, 367,
	0, 422, 405, 83, 0, 114, 175, 139, 101, 166,
	431, 421, 0, 393, 433, 371, 385, 441, 386, 387,
	414, 357, 401, 131, 383, 0, 374, 352, 380, 353,
	372, 395, 99, 398, 370, 423, 404, 113, 439, 115,
	409, 0, 148, 124, 0, 0, 397, 425, 399, 419,
	392, 415, 362, 408, 434, 384, 412, 435, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 411, 430, 382, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	413, 351, 410, 0, 355, 358, 440, 428, 377, 378,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 416,
	390, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 407, 0, 0, 0, 359, 356, 0, 394, 0,
	0, 0, 361, 0, 376, 417, 0, 350, 420, 426,
	391, 213, 429, 389, 388, 432, 137, 0, 0, 151,
	104, 103, 112, 424, 373, 381, 95, 379, 143, 133,
	163, 406, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 354, 0, 149, 165, 177, 369, 427, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 365, 368,
	363, 364, 402, 403, 436, 437, 438, 418, 360, 0,
	366, 367, 0, 422, 405, 83, 0, 114, 175, 139,
	101, 166, 431, 421, 0, 393, 433, 371, 385, 441,
	386, 387, 414, 357, 401, 131, 383, 0, 374, 352,
	380, 353, 372, 395, 99, 398, 370, 423, 404, 113,
	439, 115, 409, 0, 148, 124, 0, 0, 397, 425,
	399, 419, 392, 415, 362, 408, 434, 384, 412, 435,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 411, 430,
	382, 179, 180, 181, 182, 183, 184, 185, 186, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	187, 0, 413, 351, 410, 0, 355, 358, 440, 428,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 416, 390, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 0, 407, 0, 0, 0, 359, 356, 0,
	394, 0, 0, 0, 361, 0, 376, 417, 0, 350,
	420, 426, 391, 213, 429, 389, 388, 432, 137, 0,
	0, 151, 104, 103, 112, 424, 373, 381, 95, 379,
	143, 133, 163, 406, 134, 142, 116, 155, 138, 162,
	214, 170, 153, 169, 84, 152, 630, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 348, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 354, 0, 149, 165, 177, 369, 427,
	171, 172, 173, 174, 0, 0, 0, 349, 347, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	365, 368, 363, 364, 402, 403, 436, 437, 438, 418,
	360, 0, 366, 367, 0, 422, 405, 83, 0, 114,
	175, 139, 101, 166, 431, 421, 0, 393, 433, 371,
	385, 441, 386, 387, 414, 357, 401, 131, 383, 0,
	374, 352, 380, 353, 372, 395, 99, 398, 370, 423,
	404, 113, 439, 115, 409, 0, 148, 124, 0, 0,
	397, 425, 399, 419, 392, 415, 362, 408, 434, 384,
	412, 435, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	411, 430, 382, 179, 180, 181, 182, 183, 184, 185,
	186, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 187, 0, 413, 351, 410, 0, 355, 358,
	440, 428, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 416, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 0, 407, 0, 0, 0, 359,
	356, 0, 394, 0, 0, 0, 361, 0, 376, 417,
	0, 350, 420, 426, 391, 213, 429, 389, 388, 432,
	137, 0, 0, 151, 104, 103, 112, 424, 373, 381,
	95, 379, 143, 133, 163, 406, 134, 142, 116, 155,
	138, 162, 214, 170, 153, 169, 84, 152, 339, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 348, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 354, 0, 149, 165, 177,
	369, 427, 171, 172, 173, 174, 0, 0, 0, 349,
	347, 342, 341, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 365, 368, 363, 364, 402, 403, 436, 437,
	438, 418, 360, 0, 366, 367, 0, 422, 405, 83,
	0, 114, 175, 139, 101, 166, 131, 0, 0, 807,
	0, 270, 0, 0, 0, 99, 0, 267, 0, 0,
	113, 312, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 268, 297, 290, 288, 289, 0,
	292, 293, 294, 295, 0, 92, 291, 298, 0, 296,
	299, 300, 179, 180, 181, 182, 183, 184, 185, 186,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 187, 0, 0, 0, 265, 281, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	261, 0, 0, 0, 323, 0, 280, 0, 0, 276,
	277, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 321, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 214, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 313, 322, 319, 320, 317, 318, 316, 315, 314,
	324, 305, 306, 307, 308, 310, 0, 309, 83, 0,
	114, 175, 139, 101, 166, 131, 0, 0, 0, 0,
	270, 0, 0, 0, 99, 0, 267, 0, 0, 113,
	312, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 268, 297, 290, 288, 289, 0, 292,
	293, 294, 295, 0, 92, 291, 298, 0, 296, 299,
	300, 179, 180, 181, 182, 183, 184, 185, 186, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	187, 0, 0, 0, 265, 281, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 1283,
	0, 0, 0, 323, 0, 280, 0, 0, 276, 277,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 321, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	214, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	313, 322, 319, 320, 317, 318, 316, 315, 314, 324,
	305, 306, 307, 308, 310, 0, 309, 83, 0, 114,
	175, 139, 101, 166, 131, 0, 0, 0, 0, 270,
	0, 0, 0, 99, 0, 267, 0, 0, 113, 312,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 493, 268, 297, 290, 288, 289, 0, 292, 293,
	294, 295, 0, 92, 291, 298, 0, 296, 299, 300,
	179, 180, 181, 182, 183, 184, 185, 186, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 187,
	0, 0, 0, 265, 281, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 323, 0, 280, 0, 0, 276, 277, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 321, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 214,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 313,
	322, 319, 320, 317, 318, 316, 315, 314, 324, 305,
	306, 307, 308, 310, 0, 309, 83, 0, 114, 175,
	139, 101, 166, 131, 0, 0, 0, 0, 270, 0,
	0, 0, 99, 0, 267, 0, 0, 113, 312, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 268, 297, 290, 288, 289, 0, 292, 293, 294,
	295, 0, 92, 291, 298, 0, 296, 299, 300, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	0, 0, 265, 281, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 261, 0, 0,
	0, 323, 0, 280, 0, 0, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 321, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 313, 322,
	319, 320, 317, 318, 316, 315, 314, 324, 305, 306,
	307, 308, 310, 0, 309, 83, 0, 114, 175, 139,
	101, 166, 131, 0, 0, 0, 0, 270, 0, 0,
	0, 99, 0, 267, 0, 0, 113, 312, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 871, 0, 56, 0, 0,
	268, 297, 290, 288, 289, 0, 292, 293, 294, 295,
	0, 92, 291, 298, 0, 296, 299, 300, 179, 180,
	181, 182, 183, 184, 185, 186, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 187, 0, 0,
	0, 265, 281, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	323, 0, 280, 0, 0, 276, 277, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 321, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 214, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 313, 322, 319,
	320, 317, 318, 316, 315, 314, 324, 305, 306, 307,
	308, 310, 26, 309, 83, 0, 114, 175, 139, 101,
	166, 0, 0, 0, 131, 0, 0, 0, 0, 270,
	0, 0, 0, 99, 0, 267, 0, 0, 113, 312,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 268, 297, 290, 288, 289, 0, 292, 293,
	294, 295, 0, 92, 291, 298, 0, 296, 299, 300,
	179, 180, 181, 182, 183, 184, 185, 186, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 187,
	0, 0, 0, 265, 281, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 323, 0, 280, 0, 0, 276, 277, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 321, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 214,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 313,
	322, 319, 320, 317, 318, 316, 315, 314, 324, 305,
	306, 307, 308, 310, 0, 309, 83, 0, 114, 175,
	139, 101, 166, 131, 0, 0, 0, 0, 270, 0,
	0, 0, 99, 0, 267, 0, 0, 113, 312, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 268, 297, 290, 288, 289, 0, 292, 293, 294,
	295, 0, 92, 291, 298, 0, 296, 299, 300, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	0, 0, 265, 281, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 323, 0, 280, 0, 0, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 321, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 313, 322,
	319, 320, 317, 318, 316, 315, 314, 324, 305, 306,
	307, 308, 310, 131, 309, 83, 0, 114, 175, 139,
	101, 166, 99, 0, 0, 0, 0, 113, 312, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 268, 297, 290, 288, 289, 0, 292, 293, 294,
	295, 0, 92, 291, 298, 0, 296, 299, 300, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	0, 0, 0, 281, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 323, 0, 280, 0, 0, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 321, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 1373, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 313, 322,
	319, 320, 317, 318, 316, 315, 314, 324, 305, 306,
	307, 308, 310, 131, 309, 83, 0, 114, 175, 139,
	101, 166, 99, 0, 0, 0, 0, 113, 312, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 268, 297, 290, 288, 289, 0, 292, 293, 294,
	295, 0, 92, 291, 298, 0, 296, 299, 300, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	0, 0, 0, 281, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 323, 0, 280, 0, 0, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 321, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 313, 322,
	319, 320, 317, 318, 316, 315, 314, 324, 305, 306,
	307, 308, 310, 131, 309, 83, 0, 114, 175, 139,
	101, 166, 99, 0, 0, 0, 0, 113, 312, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 268, 297, 290, 564, 289, 0, 292, 293, 294,
	295, 0, 92, 291, 298, 0, 296, 299, 300, 179,
	180, 181, 182, 183, 184, 185, 186, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 187, 0,
	0, 0, 0, 281, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 323, 0, 280, 0, 0, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 321, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 214, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 313, 322,
	319, 320, 317, 318, 316, 315, 314, 324, 305, 306,
	307, 308, 310, 0, 309, 83, 0, 114, 175, 139,
	101, 166, 131, 0, 0, 0, 515, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 517, 518, 519, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 179, 180,
	181, 182, 183, 184, 185, 186, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 187, 0, 512,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 214, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	81, 0, 0, 517, 518, 519, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 179, 180,
	181, 182, 183, 184, 185, 186, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 0, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 214, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 179, 180,
	181, 182, 183, 184, 185, 186, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 187, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	73, 0, 0, 0, 79, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 75, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 114, 175, 139, 101,
	166, 131, 0, 0, 0, 617, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 621, 620, 619, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 639, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 640, 641, 642, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 114, 175, 139, 101, 166,
	131, 0, 0, 0, 617, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 621, 620, 619, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 615,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 517, 518, 519, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 621, 620, 619, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 757, 0, 0, 758, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 182,
	183, 184, 185, 186, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 214, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 83, 0, 114, 175, 139, 101, 166, 595,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 83, 0, 114, 175, 139, 101, 166,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 179, 180, 181,
	182, 183, 184, 185, 186, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 214, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 114, 175, 139, 101, 166,
}
var yyPact = [...]int{

	1897, -1000, -207, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 891, 911, -1000, -1000, -1000, -1000,
	-1000, -1000, 719, 8534, 35, 82, -2, 11303, 73, 315,
	12053, -1000, -15, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-20, 12053, 500, 717, -1000, -1000, -1000, -1000, -1000, 875,
	888, 726, 865, 767, -1000, 6245, 34, 10552, 11053, 5209,
	-1000, 498, 69, 12053, -171, 11553, 31, 31, 31, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71,
	12053, -1000, 12053, 25, 491, 25, 25, 25, 12053, -1000,
	122, -1000, -1000, -1000, -1000, 12053, 482, 825, 72, 3033,
	3033, 3033, 3033, -10, 3033, -97, -85, 734, -1000, -1000,
	-1000, -1000, 3033, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12053, 709, 728, 467, 831, 7025, 7025,
	891, -1000, 717, -1000, -1000, -1000, 802, -1000, -1000, 331,
	898, -1000, 8034, 107, -1000, 7025, 1507, 663, -1000, -1000,
	663, 94, 319, -1000, -1000, -1000, 7525, 7525, 7525, 7525,
	7525, 7525, 7775, -1000, -1000, -1000, -1000, 663, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6766, 663, 663, 663, 663, 663, 663, 663,
	663, 7025, 663, 663, 663, 663, 663, 663, 663, 663,
	663, 663, 663, 663, 663, 10803, 672, 785, -1000, -1000,
	-1000, 862, 10052, 9302, 12053, 658, -1000, 654, 4937, -151,
	-1000, -1000, -1000, 195, 9043, -1000, -1000, -1000, 823, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 555, -1000, 2113, 480, 3033, 40, 580, 474,
	242, 461, 12053, 12053, 3033, 38, 12053, 843, 733, 12053,
	446, 442, -1000, 4665, -1000, 3033, 3033, 3033, 3033, 3033,
	3033, 3033, 3033, -1000, -1000, -1000, -1000, -1000, -1000, 3033,
	3033, -1000, -116, -80, -1000, 12053, -1000, -1000, 90, 90,
	2113, 12053, -1000, -1000, -1000, 906, 154, 344, 106, 659,
	-1000, 349, 875, 467, 767, 10302, 745, -1000, -1000, 12053,
	-1000, 7025, 7025, 391, -1000, 9552, -1000, -1000, -1000, -1000,
	-1000, 3577, 168, 7525, 337, 176, 7525, 7525, 7525, 7525,
	7525, 7525, 7525, 7525, 7525, 7525, 7525, 7525, 7525, 7525,
	7525, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	434, -1000, 717, 1098, 1098, 322, -1000, 131, 131, 131,
	131, 131, 131, 2279, -1000, 5468, 467, 552, 289, 6766,
	6245, 6245, 7025, 7025, 11803, 11803, 6245, 866, 234, 289,
	11803, -1000, 467, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6245, 6245, 6245, 6245, 174, 12053, -1000, 11803, 10552, 10552,
	10552, 10552, 10552, -1000, 758, 755, -1000, 764, 756, 768,
	12053, -1000, 542, 10052, 128, 663, -1000, 9802, -1000, -1000,
	-1000, -1000, 4, 576, 10552, 12053, -1000, -1000, 4393, 654,
	-151, 599, -1000, -118, -126, 6504, 127, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2761, 148, 279, -74, -1000, -1000,
	-1000, -1000, 668, -1000, 668, 668, 668, 668, -47, -47,
	-47, -47, -1000, -1000, -1000, -1000, -1000, 714, 705, -1000,
	668, 668, 668, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	691, 691, 691, 671, 671, 662, -1000, 12053, -188, 431,
	3033, 842, 3033, -1000, 68, -1000, 12053, -1000, -1000, 12053,
	3033, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 254, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 539,
	-1000, 651, -1000, -1000, 780, 7025, 7025, 4121, 7025, -1000,
	-1000, -1000, 831, -1000, 866, 879, -1000, 792, 789, 6245,
	-1000, -1000, 168, 167, -1000, -1000, 370, -1000, -1000, -1000,
	-1000, 105, 663, -1000, 1738, -1000, -1000, -1000, -1000, 337,
	7525, 7525, 7525, 75, 1738, 1616, 306, 568, 131, 124,
	124, 151, 151, 151, 151, 151, 439, 439, -1000, -1000,
	-1000, 467, 319, 319, -1000, -1000, 467, 6245, 650, -1000,
	-1000, 7025, -1000, 467, 532, 532, 291, 263, 711, -1000,
	100, 661, 532, 6245, 260, -1000, 7025, 467, -1000, 532,
	467, 532, 532, 578, 788, 663, -1000, 592, -1000, 187,
	785, 683, 732, 712, -1000, -1000, -1000, -1000, 754, -1000,
	747, -1000, -1000, -1000, -1000, -1000, 64, 44, 43, 11553,
	-1000, 896, 10552, 586, -1000, -1000, 599, -151, -129, -1000,
	-1000, -1000, 289, -1000, 440, 595, 2489, -1000, -1000, -1000,
	-1000, -1000, -1000, 680, 832, 183, 156, 429, -1000, -1000,
	827, -1000, 275, -76, -1000, -1000, 389, -47, -47, -1000,
	-1000, 127, 821, 127, 127, 127, 448, 448, -1000, -1000,
	-1000, -1000, 386, -1000, -1000, -1000, 375, -1000, 731, 11553,
	3033, -1000, 3849, -1000, -1000, -1000, -1000, -1000, -1000, 422,
	227, 210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3, -1000, 3033, -1000, 336, 12053, 12053,
	2113, 861, 12053, 776, 289, 289, 93, -1000, -1000, 12053,
	-1000, -1000, -1000, -1000, 624, -1000, -1000, -1000, 3305, 6245,
	-1000, 75, 1738, 1376, -1000, 7525, 7525, -1000, -1000, 532,
	6245, 289, -1000, -1000, -1000, 136, 423, 136, 7525, 7525,
	4121, 7525, 7525, -182, 614, 225, -1000, 7025, 258, -1000,
	-1000, -1000, -1000, -1000, 727, 11803, 663, -1000, 8284, -1000,
	11553, 891, 11803, 7025, 7025, -1000, -1000, 7025, 675, -1000,
	7025, -1000, -1000, -1000, 663, 663, 663, 472, -1000, 891,
	586, -1000, -1000, -1000, -128, -125, -1000, -1000, -1000, 2761,
	-1000, 2761, 11553, -1000, 421, 409, -1000, -1000, 723, 77,
	-1000, -1000, -1000, 536, 127, 127, -1000, 218, -1000, -1000,
	-1000, 526, -1000, 490, 594, 488, 12053, -1000, -1000, 588,
	-1000, 181, -1000, -1000, 11553, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11553, 12053, -1000,
	-1000, -1000, -1000, -1000, 11553, -1000, -1000, 448, 7025, -1000,
	-1000, -1000, 90, -1000, -1000, 3849, -1000, 896, 10552, -1000,
	-1000, 467, -1000, 7525, 1738, 1738, -1000, -1000, 467, 668,
	668, -1000, 668, 671, -1000, 668, -29, 668, -32, 663,
	467, 467, 1435, 1850, -1000, 722, 1697, 663, -178, -1000,
	289, 7025, -204, 834, 561, 582, -1000, -1000, 5986, 467,
	486, 85, 472, 875, -1000, 289, 289, 289, 11553, 289,
	11553, 11553, 11553, 8793, 11553, 875, -1000, -1000, -1000, -1000,
	2489, -1000, 466, -1000, 668, -1000, -1000, -70, 905, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-47, 448, -47, 373, -1000, 352, 3033, 3849, 2761, -1000,
	665, -1000, -1000, -1000, -1000, 833, -1000, 289, -1000, 894,
	587, -1000, 1738, -1000, -1000, 123, -1000, -1000, -1000, -1000,
	-1000, -1000, 346, -1000, -1000, -1000, 7525, 7525, -1000, 7525,
	7525, 7525, 467, 448, 289, -1000, 5727, 830, -1000, 663,
	-1000, -1000, 674, 9552, 9552, -1000, -1000, 458, -1000, 456,
	456, 456, 128, -1000, -1000, 120, 11553, -1000, 145, -1000,
	-161, 127, -1000, 127, 513, 473, -1000, -1000, -1000, 11553,
	663, 881, 880, -1000, -1000, 467, 964, 964, 964, 964,
	-11, -1000, -1000, -1000, 579, 901, -1000, 663, -1000, 717,
	79, -1000, 11553, -1000, -1000, -1000, -1000, -1000, 120, -1000,
	398, 179, 448, -1000, 328, 829, -1000, 790, -1000, -1000,
	-1000, -1000, -1000, 450, 2, -1000, 7025, 7025, -1000, -1000,
	-1000, -1000, -1000, 467, 41, -192, 11803, 582, 467, 9552,
	-1000, -1000, -1000, 343, -1000, -1000, -1000, 448, -1000, -1000,
	580, 403, -1000, 11553, 289, 579, -1000, 775, -186, -195,
	559, -1000, -1000, -1000, -1000, -188, -1000, 2, 787, -1000,
	765, -1000, -1000, -1000, -1, -189, -3, -193, 663, -200,
	7275, -1000, 964, 467, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1176, 20, 25, 1171, 1170, 1165, 932, 930, 925,
	1164, 1154, 1153, 1152, 1151, 1147, 1145, 1144, 1137, 1134,
	1133, 1132, 1129, 1127, 1126, 1125, 1124, 102, 1120, 1118,
	1117, 61, 1115, 66, 1114, 1112, 38, 175, 46, 37,
	699, 1108, 26, 53, 64, 1107, 50, 1106, 1105, 67,
	1104, 69, 1102, 1101, 1392, 1099, 1098, 11, 41, 1097,
	1096, 1095, 1092, 72, 340, 1079, 1078, 1077, 1076, 1075,
	1071, 44, 5, 12, 14, 15, 1069, 438, 7, 1068,
	57, 1065, 1062, 1061, 1060, 36, 1059, 49, 1058, 34,
	47, 1057, 17, 58, 32, 23, 9, 65, 52, 1056,
	31, 55, 45, 1055, 1054, 409, 1051, 1049, 1047, 1046,
	1045, 1042, 160, 396, 1036, 1035, 1034, 1033, 33, 190,
	952, 761, 63, 1032, 1012, 8, 1008, 1182, 70, 59,
	19, 1006, 29, 270, 27, 1005, 1004, 35, 1003, 40,
	1001, 1000, 998, 997, 996, 989, 988, 282, 987, 984,
	982, 13, 18, 980, 979, 56, 24, 975, 974, 972,
	48, 51, 968, 42, 967, 966, 962, 961, 30, 22,
	960, 10, 959, 6, 957, 947, 2, 945, 16, 944,
	3, 943, 4, 39, 942, 941, 28, 936, 60, 43,
	934, 927, 0, 162, 919, 917, 101,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 194, 194, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 135, 135, 11, 11, 11, 11, 11, 11,
	11, 182, 182, 181, 180, 180, 179, 179, 178, 16,
	165, 166, 166, 166, 161, 138, 138, 139, 139, 139,
	139, 139, 146, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 143, 143, 143,
	143, 143, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 160, 160, 147, 147, 155,
	155, 156, 156, 156, 153, 153, 154, 154, 157, 157,
	157, 148, 148, 148, 148, 148, 148, 148, 150, 150,
	158, 158, 151, 151, 151, 152, 152, 152, 159, 159,
	159, 159, 159, 149, 149, 162, 162, 174, 174, 173,
	173, 173, 164, 164, 170, 170, 170, 170, 170, 163,
	163, 172, 172, 171, 167, 167, 167, 168, 168, 168,
	169, 169, 169, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 177, 175, 175, 176, 176, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 110, 110, 107, 107, 108, 108, 109, 109, 109,
	111, 111, 111, 136, 136, 136, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 24, 25, 25,
	25, 186, 186, 186, 186, 186, 186, 26, 26, 187,
	187, 195, 27, 28, 28, 29, 29, 29, 33, 33,
	33, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 123, 123, 123, 125, 125, 125, 125,
	122, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	56, 56, 92, 92, 94, 94, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 131, 131, 130, 130,
	130, 129, 129, 129, 129, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 57,
	57, 57, 57, 58, 58, 40, 40, 40, 40, 40,
	40, 40, 106, 106, 60, 60, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 70, 70, 70, 70,
	70, 70, 61, 61, 61, 61, 61, 61, 61, 36,
	36, 71, 71, 71, 77, 72, 72, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 68,
	68, 68, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
	67, 67, 67, 67, 67, 196, 196, 69, 69, 69,
	69, 34, 34, 34, 34, 34, 134, 134, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 81, 81, 35, 35, 79, 79, 80, 82,
	82, 78, 78, 78, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 184, 184, 65, 65,
	65, 83, 83, 84, 84, 85, 85, 86, 86, 87,
	88, 88, 88, 89, 89, 89, 89, 90, 90, 90,
	62, 62, 62, 62, 62, 62, 91, 91, 91, 91,
	95, 95, 73, 73, 75, 75, 74, 76, 185, 185,
	185, 96, 96, 100, 97, 97, 101, 101, 101, 99,
	99, 99, 126, 126, 126, 104, 104, 112, 112, 113,
	113, 105, 105, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 116, 116, 117, 117,
	117, 124, 124, 120, 120, 121, 121, 127, 127, 128,
	128, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 189, 189, 189, 192, 193, 132, 133, 133, 133,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 4, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 4, 4,
	7, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	3, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 1, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 2, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 4, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 0, 2,
	2, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 137, 138, 140, 139, 165, 141, 158,
	49, 177, 178, 180, 181, 25, 159, 160, 163, 164,
	182, 183, 184, -192, 8, 262, 53, -191, 278, -85,
	15, -29, 5, -27, -195, -27, -27, -27, -27, -27,
	-165, 53, -117, 146, 95, 173, 254, 143, 144, 150,
	-120, 56, -119, 270, 177, 191, 185, 211, 203, 201,
	204, 241, 67, 180, 250, 161, 200, 196, 194, 27,
	216, 275, 195, 156, 155, 217, 221, 242, 189, 190,
	244, 215, 157, 32, 272, 34, 169, 245, 219, 214,
	210, 213, 188, 209, 38, 223, 222, 224, 240, 206,
	197, 18, 248, 164, 167, 218, 220, 151, 171, 274,
	246, 193, 168, 163, 249, 181, 243, 252, 37, 228,
	187, 154, 178, 175, 207, 170, 198, 199, 212, 186,
	208, 179, 172, 165, 251, 229, 276, 205, 202, 176,
	174, 233, 234, 235, 236, 273, 247, 230, -188, 74,
	75, 76, 77, 78, 79, 80, 81, 93, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 92, -105,
	146, 148, 144, 144, 145, 146, 254, 143, 144, -54,
	-127, 56, -119, 146, 173, 144, 131, 204, 137, 231,
	145, 32, 171, -136, 144, 179, -107, 174, 233, 234,
	235, 236, 56, 243, 242, 237, -127, 179, -132, -132,
	-132, -132, -132, 183, -127, 56, -2, -89, 17, 16,
	-5, -3, -192, 6, 20, 21, -33, 39, 40, -28,
	-39, 122, -40, -127, -59, 97, -64, 29, 56, -119,
	23, -78, -63, -60, -76, -77, 131, 132, 120, 121,
	128, 98, 133, -68, -66, -67, -69, -120, 59, 60,
	58, 68, 62, 63, 64, 65, 71, 57, 69, 72,
	73, -74, -192, 43, 44, 263, 264, 265, 266, 269,
	267, 100, 33, 253, 261, 260, 259, 257, 258, 255,
	256, 149, 254, 126, 262, -105, -42, -43, -44, -45,
	-56, -77, -192, -54, 11, -49, -54, -97, -135, 179,
	-101, 243, 242, -121, -99, -120, -118, 241, 204, 240,
	142, 96, 22, 24, 226, 99, 131, 16, 100, 130,
	263, 137, 47, 255, 256, 253, 265, 266, 254, 231,
	29, 10, 25, 159, 21, 124, 139, 103, 104, 162,
	23, 160, 73, 19, 50, 11, 13, 14, 149, 148,
	115, 145, 45, 8, 133, 26, 112, 41, 28, 43,
	113, 17, 257, 258, 31, 269, 166, 126, 48, 35,
	97, 71, 51, 95, 15, 46, 114, 140, 262, 44,
	143, 6, 268, 30, 158, 42, 144, 232, 102, 147,
	72, 5, 150, 9, 49, 52, 259, 260, 261, 33,
	101, 12, -166, -161, 56, 145, -54, 262, -120, -113,
	149, -113, -113, 144, -54, -54, -112, 149, 56, -112,
	-112, -112, -54, 134, -54, 56, 30, 254, 56, 171,
	144, 172, 146, -133, -192, -121, -133, -133, -133, 175,
	176, -133, 244, -108, 238, 51, -133, -127, 11, 22,
	-192, 52, -193, 55, -90, 19, 31, -40, -127, -86,
	-87, -40, -85, -2, -27, 35, -31, 21, 66, 11,
	-123, 96, 95, 112, -122, 22, -125, 59, 60, 61,
	-120, 134, -40, -61, 115, 97, 113, 114, 99, 117,
	116, 127, 120, 121, 122, 123, 124, 125, 126, 118,
	119, 130, 105, 106, 107, 108, 109, 110, 111, -106,
	-192, -77, -192, 135, 136, -184, 70, -64, -64, -64,
	-64, -64, -64, -64, 59, -192, -2, -72, -40, -192,
	-192, -192, -192, -192, -192, -192, -192, -192, -81, -40,
	-192, -196, -192, -196, -196, -196, -196, -196, -196, -196,
	-192, -192, -192, -192, -55, 26, -54, 30, 54, -50,
	-52, -51, -53, 41, 45, 47, 42, 43, 44, 48,
	-131, 22, -42, -192, -130, 167, -129, 22, -127, 61,
	60, 59, -54, -49, -194, 54, 11, 52, 54, -97,
	179, -98, -102, 244, 246, 105, -126, -120, -189, 29,
	59, 60, 61, 30, 55, 54, -139, -142, -144, -143,
	-145, -146, -140, -141, 201, 202, 131, 205, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 30, 161,
	198, 199, 200, 93, 217, 218, 219, 220, 221, 222,
	223, 224, 203, 185, 186, 187, 188, 189, 190, 191,
	193, 194, 195, 196, 197, 56, -133, 146, -182, 52,
	56, 97, 56, -54, -54, -133, 147, -54, 23, 51,
	-54, 56, 56, -128, -127, -118, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, 245, -110, 232, 239,
	-54, -186, -3, -7, -9, -8, 56, -189, -186, -138,
	-139, -187, -127, 9, 115, 54, 18, 134, 54, -88,
	24, 25, -89, -193, -33, -65, -120, 62, 65, -32,
	42, -54, -40, -40, -70, 71, 97, 72, 73, -122,
	122, -128, -121, -118, -64, -71, -74, -77, 70, 115,
	113, 114, 99, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -134, 56,
	-189, 56, -63, -63, 70, -188, -38, 21, -37, -39,
	-193, 54, -193, -2, -37, -37, -40, -40, -78, -120,
	-127, -78, -37, -31, -79, -80, 101, -78, -193, -37,
	-38, -37, -37, -93, 29, 167, -54, -96, -100, -78,
	-43, -44, -44, -43, -44, 41, 41, 41, 46, 41,
	46, 41, -51, -127, -193, -57, 49, 148, 50, -192,
	-129, -93, 52, -42, -54, -101, -98, 54, 245, 247,
	248, 51, -40, -152, 130, -167, -168, -169, -121, -189,
	62, -161, -162, -170, 151, 154, 150, -163, 145, 28,
	-157, 71, 97, -153, 229, -147, 53, -147, -147, -147,
	-147, -151, 204, -151, -151, -151, 53, 53, -147, -147,
	-147, -155, 53, -155, -155, -156, 53, -156, -124, 52,
	-54, -180, 273, -181, 56, -133, 23, -133, -114, 142,
	139, 140, -177, 138, 226, 204, 67, 29, 15, 263,
	167, 276, 56, 168, -54, -54, -133, -109, 11, 115,
	54, -193, 54, 37, -40, -40, -128, -87, -90, -104,
	19, 11, 33, 33, -37, 71, 72, 73, 134, -192,
	-71, -64, -64, -64, -36, 162, 96, -193, -193, -37,
	54, -40, -193, -193, -193, 54, 52, 22, 54, 11,
	134, 54, 11, -193, -37, -82, -80, 103, -40, -193,
	-193, -193, -193, -193, -62, 30, 33, -2, -192, 33,
	-192, -58, 54, 12, 105, -47, -46, 51, 52, -48,
	51, -46, 41, 41, 145, 145, 145, -94, -120, -58,
	-42, -58, -102, -103, 249, 246, 252, 56, -189, 54,
	-169, 105, 53, 28, -163, -163, 56, 56, -148, 29,
	71, -154, 230, 62, -151, -151, -152, 30, -152, -152,
	-152, -160, -189, -160, 62, 62, 51, -120, -133, -179,
	-178, -121, -132, -183, 173, 152, 153, 156, 155, 56,
	145, 28, 151, 154, 167, 150, -183, 173, -115, -116,
	147, 22, 145, 28, 167, -133, -111, 113, 12, -127,
	-127, -139, 22, -127, 38, 134, -54, -41, 11, 122,
	-121, -38, -36, 96, -64, -64, -193, -39, -137, 131,
	201, 161, 200, 196, 215, 206, 228, 198, 229, 202,
	-134, -137, -64, -64, -121, -64, -64, 270, -85, 104,
	-40, 102, -95, 51, -96, -73, -75, -74, -192, -2,
	-91, -125, -94, -85, -100, -40, -40, -40, 53, -40,
	-192, -192, -192, -193, 54, -85, -58, 246, 250, 251,
	-168, -169, -172, -171, -120, 56, 56, -150, 51, -189,
	62, 63, 71, 253, 68, 55, -152, -152, 56, 131,
	55, 54, 55, 54, 55, 54, -54, 54, 105, -132,
	-120, -132, -120, -54, -132, -120, -189, -40, -186, -58,
	-42, -193, -64, -193, -147, -147, -147, -156, -147, 190,
	-147, 190, -192, -193, -193, -193, 54, 19, -193, 54,
	19, -192, -35, 268, -40, -185, 277, 27, -95, 54,
	-193, -193, -193, 54, 134, -193, -89, -92, -120, -92,
	-92, -92, -130, -120, -89, 55, 54, -147, -158, 226,
	9, -151, -189, -151, 62, 62, -133, -178, -169, 53,
	26, -83, 13, -151, 56, 62, -64, -64, -64, -64,
	-64, -193, -189, 122, -72, 28, -75, 33, -2, -192,
	-125, -125, 54, 55, -193, -193, -193, -57, -174, -173,
	52, 157, 67, -171, -159, 151, 28, 150, 253, -152,
	-152, 55, 55, -92, -192, -84, 14, 16, -193, -193,
	-193, -193, -193, -34, 115, 273, 9, -73, -2, 134,
	-120, -173, 56, -164, 105, -189, -149, 67, 28, 28,
	55, -175, -176, 167, -40, -72, -193, 271, 48, 274,
	-96, -193, -125, 62, -189, -182, -193, 54, -120, 38,
	272, 275, -180, -176, 33, 38, 169, 273, 170, 274,
	-192, 275, -64, 166, -193, -193,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 545, 0, 301, 301, 301, 301,
	301, 301, 0, 618, 601, 0, 0, 0, 0, -2,
	277, 278, 0, 280, 281, 846, 846, 846, 846, 846,
	0, 0, 0, 0, 37, 38, 844, 1, 3, 553,
	0, 0, 305, 308, 303, 0, 601, 0, 0, 0,
	64, 0, 0, 830, 0, 831, 599, 599, 599, 619,
	620, 623, 624, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 0,
	0, 602, 0, 597, 0, 597, 597, 597, 0, 235,
	377, 627, 628, 830, 831, 0, 0, 0, 0, 847,
	847, 847, 847, 0, 847, 0, 265, 254, 256, 257,
	258, 259, 847, 274, 275, 264, 276, 279, 282, 283,
	284, 285, 286, 0, 0, 297, 30, 557, 0, 0,
	545, 32, 0, 301, 306, 307, 311, 309, 310, 302,
	0, 319, 323, 0, 385, 0, 390, 392, -2, -2,
	0, 427, 428, 429, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 455, 456, 457, 458, 521, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 394,
	395, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 512, 0, 485, 485, 485, 485, 485, 485, 485,
	485, 0, 0, 0, 0, 0, 0, 333, 335, 336,
	337, 356, 0, 358, 0, 0, 45, 49, 0, 821,
	584, -2, -2, 0, 0, 625, 626, -2, 750, -2,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 0, 81, 0, 0, 847, 0, 71, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 0, 234, 0, 236, 847, 847, 847, 847, 847,
	847, 847, 847, 245, 848, 849, 246, 247, 248, 847,
	847, 250, 0, 0, 266, 0, 260, 287, 0, 0,
	0, 0, 31, 845, 25, 0, 0, 554, 0, 546,
	547, 550, 553, 30, 308, 0, 313, 312, 304, 0,
	320, 0, 0, 0, 324, 0, 330, 326, 327, 328,
	329, 0, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 413, 414, 415, 416, 417, 418, 391,
	0, 405, 0, 0, 0, 535, 536, 447, 448, 449,
	450, 451, 452, 0, -2, 315, 30, 0, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 513,
	0, 477, 0, 478, 479, 480, 481, 482, 483, 484,
	0, 315, 0, 0, 47, 0, 376, 0, 0, 0,
	0, 0, 0, 365, 0, 0, 368, 0, 0, 0,
	0, 357, 0, 0, 379, 794, 359, 0, 361, 362,
	363, 364, -2, 0, 0, 0, 43, 44, 0, 50,
	821, 52, 53, 0, 0, 0, 165, 592, 593, 594,
	841, 842, 843, 590, 194, 0, 148, 144, 88, 89,
	90, 91, 137, 94, 137, 137, 137, 137, 162, 162,
	162, 162, 120, 121, 122, 123, 124, 0, 0, 107,
	137, 137, 137, 111, 127, 128, 129, 130, 131, 132,
	133, 134, 92, 95, 96, 97, 98, 99, 100, 101,
	139, 139, 139, 141, 141, 621, 66, 0, 74, 0,
	847, 0, 847, 79, 0, 210, 0, 229, 598, 0,
	847, 232, 233, 378, 629, 630, 237, 238, 239, 240,
	241, 242, 243, 244, 249, 253, 251, 267, 261, 262,
	255, 288, 291, 292, 293, 294, 295, 296, 289, 0,
	85, 298, 299, 558, 0, 0, 0, 0, 0, 549,
	551, 552, 557, 33, 311, 0, 538, 0, 0, 0,
	314, 28, 386, 387, 389, 406, 0, 408, 410, 325,
	321, 0, 522, -2, 396, 397, 421, 422, 423, 0,
	0, 0, 0, 419, 401, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 446, 496,
	497, 0, 444, 445, 537, 453, 0, 0, 316, 317,
	424, 0, 576, 30, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 519, 516, 0, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 375, 383, 581, 0,
	334, 352, 354, 0, 349, 366, 367, 369, 0, 371,
	0, 373, 374, 338, 339, 340, 0, 0, 0, 0,
	360, 383, 0, 383, 46, 585, 51, 0, 0, 56,
	57, 586, 587, 588, 0, 80, 195, 197, 200, 201,
	202, 82, 83, 0, 0, 0, 0, 0, 189, 190,
	151, 149, 0, 146, 145, 93, 0, 162, 162, 114,
	115, 165, 0, 165, 165, 165, 0, 0, 108, 109,
	110, 102, 0, 103, 104, 105, 0, 106, 0, 0,
	847, 68, 0, 72, 73, 69, 600, 70, 846, 0,
	0, 613, 211, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 0, 228, 847, 231, 270, 0, 0,
	0, 0, 0, 0, 555, 556, 0, 548, 26, 0,
	595, 596, 539, 540, 331, 407, 409, 411, 0, 315,
	398, 419, 402, 0, 399, 0, 0, 393, 459, 0,
	0, 426, -2, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 545, 0, 517, 0, 0, 476,
	487, 488, 489, 490, 570, 0, 0, -2, 0, 36,
	0, 545, 0, 0, 0, 346, 353, 0, 0, 347,
	0, 348, 370, 372, 0, 0, 0, 0, 344, 545,
	383, 42, 54, 55, 0, 0, 61, 166, 167, 0,
	198, 0, 0, 184, 0, 0, 187, 188, 158, 0,
	150, 87, 147, 0, 165, 165, 116, 0, 117, 118,
	119, 0, 135, 0, 0, 0, 0, 622, 67, 75,
	76, 0, 203, 846, 0, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 846, 0, 0, 846,
	614, 615, 616, 617, 0, 230, 252, 0, 0, 268,
	269, 86, 0, 300, 559, 0, 27, 383, 0, 322,
	523, 0, 400, 0, 420, 403, 460, 318, 0, 137,
	137, 501, 137, 141, 504, 137, 506, 137, 509, 0,
	0, 0, 0, 0, 522, 0, 0, 0, 514, 475,
	520, 0, 578, 0, 570, 560, 572, 574, 0, 30,
	0, 566, 0, 553, 582, 384, 583, 350, 0, 355,
	0, 0, 0, 358, 0, 553, 41, 58, 59, 60,
	196, 199, 0, 191, 137, 185, 186, 160, 0, 152,
	153, 154, 155, 156, 157, 138, 112, 113, 163, 164,
	162, 0, 162, 0, 142, 0, 847, 0, 0, 204,
	0, 205, 207, 208, 209, 0, 271, 272, 290, 541,
	332, 461, 404, 464, 498, 162, 502, 503, 505, 507,
	508, 510, 0, 466, 465, 467, 0, 0, 470, 0,
	0, 0, 0, 0, 518, 34, 0, 0, 35, 0,
	575, -2, 0, 0, 0, 48, 39, 0, 342, 0,
	0, 0, 379, 345, 40, 176, 0, 193, 168, 161,
	0, 165, 136, 165, 0, 0, 65, 77, 78, 0,
	0, 543, 0, 499, 500, 0, 0, 0, 0, 0,
	491, 474, 515, 579, 580, 0, 573, 0, -2, 0,
	568, 567, 0, 351, 380, 381, 382, 341, 175, 177,
	0, 182, 0, 192, 173, 0, 170, 172, 159, 125,
	126, 140, 143, 0, 0, 29, 0, 0, 511, 468,
	469, 471, 472, 0, 0, 0, 0, 563, 30, 0,
	343, 178, 179, 0, 183, 181, 84, 0, 169, 171,
	71, 0, 224, 0, 544, 542, 473, 0, 0, 0,
	571, -2, 569, 180, 174, 74, 223, 0, 0, 492,
	0, 495, 206, 225, 0, 493, 0, 0, 0, 0,
	0, 494, 0, 0, 226, 227,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 134, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 133, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:485
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:489
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:570
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:615
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:672
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:946
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1114
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1231
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1235
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1239
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1252
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1267
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1311
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1315
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1335
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1434
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = "extended "
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = "full "
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1514
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1528
		{
			yyVAL.showFilter = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = SessionStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = GlobalStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Begin{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Commit{}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Rollback{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &OtherRead{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			setAllowComments(yylex, true)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1694
		{
			yyVAL.bytes2 = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1698
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = UnionStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = UnionAllStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = UnionDistinctStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = SQLCacheStr
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = DistinctStr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = StraightJoinHint
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.selectExprs = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1780
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1861
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1898
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1902
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1912
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1914
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1924
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1926
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = JoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = JoinStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1973
		{
			yyVAL.str = JoinStr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = StraightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = LeftJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = LeftJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.str = RightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.str = RightJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = NaturalJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.indexHints = nil
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2040
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2044
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2048
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.expr = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.str = IsNullStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			yyVAL.str = IsNotNullStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.str = IsTrueStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.str = IsNotTrueStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.str = IsFalseStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.str = IsNotFalseStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.str = EqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = LessThanStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = GreaterThanStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.str = LessEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.str = GreaterEqualStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.str = NotEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.expr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 473:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2548
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2552
		{
			yyVAL.str = BooleanModeStr
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2556
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 494:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2560
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2564
		{
			yyVAL.str = QueryExpansionStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = nil
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = string("")
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2668
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2691
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &NullVal{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2788
		{
			yyVAL.exprs = nil
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2806
		{
			yyVAL.orderBy = nil
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2831
		{
			yyVAL.str = AscScr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = AscScr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.str = DescScr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2844
		{
			yyVAL.limit = nil
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2852
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2856
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.str = ""
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.str = ForUpdateStr
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.str = ShareModeStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2895
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2899
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2903
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2914
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2922
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2927
		{
			yyVAL.updateExprs = nil
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2931
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2941
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
			yyVAL.returning = nil
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3009
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3019
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.bytes = []byte("charset")
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &Default{}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3054
		{
			yyVAL.byt = 0
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.byt = 1
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3059
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3061
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3064
		{
			yyVAL.str = ""
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.str = IgnoreStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3091
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3111
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3113
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			decNesting(yylex)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3404
		{
			forceEOF(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3409
		{
			forceEOF(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			forceEOF(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
