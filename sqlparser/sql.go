// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const DOLLAR_SIGN = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const KEY_BLOCK_SIZE = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const BEGIN = 57479
const START = 57480
const TRANSACTION = 57481
const COMMIT = 57482
const ROLLBACK = 57483
const DEALLOCATE = 57484
const PREPARE = 57485
const EXECUTE = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const MEDIUMINT = 57490
const INT = 57491
const INTEGER = 57492
const BIGINT = 57493
const INTNUM = 57494
const REAL = 57495
const DOUBLE = 57496
const FLOAT_TYPE = 57497
const DECIMAL = 57498
const NUMERIC = 57499
const TIME = 57500
const TIMESTAMP = 57501
const DATETIME = 57502
const YEAR = 57503
const CHAR = 57504
const VARCHAR = 57505
const BOOL = 57506
const CHARACTER = 57507
const VARBINARY = 57508
const NCHAR = 57509
const TEXT = 57510
const TINYTEXT = 57511
const MEDIUMTEXT = 57512
const LONGTEXT = 57513
const BLOB = 57514
const TINYBLOB = 57515
const MEDIUMBLOB = 57516
const LONGBLOB = 57517
const JSON = 57518
const ENUM = 57519
const GEOMETRY = 57520
const POINT = 57521
const LINESTRING = 57522
const POLYGON = 57523
const GEOMETRYCOLLECTION = 57524
const MULTIPOINT = 57525
const MULTILINESTRING = 57526
const MULTIPOLYGON = 57527
const NULLX = 57528
const AUTO_INCREMENT = 57529
const APPROXNUM = 57530
const SIGNED = 57531
const UNSIGNED = 57532
const ZEROFILL = 57533
const DATABASES = 57534
const TABLES = 57535
const VITESS_KEYSPACES = 57536
const VITESS_SHARDS = 57537
const VITESS_TABLETS = 57538
const VSCHEMA_TABLES = 57539
const EXTENDED = 57540
const FULL = 57541
const PROCESSLIST = 57542
const NAMES = 57543
const CHARSET = 57544
const GLOBAL = 57545
const SESSION = 57546
const ISOLATION = 57547
const LEVEL = 57548
const READ = 57549
const WRITE = 57550
const ONLY = 57551
const REPEATABLE = 57552
const COMMITTED = 57553
const UNCOMMITTED = 57554
const SERIALIZABLE = 57555
const CURRENT_TIMESTAMP = 57556
const DATABASE = 57557
const CURRENT_DATE = 57558
const CURRENT_TIME = 57559
const LOCALTIME = 57560
const LOCALTIMESTAMP = 57561
const UTC_DATE = 57562
const UTC_TIME = 57563
const UTC_TIMESTAMP = 57564
const REPLACE = 57565
const CONVERT = 57566
const CAST = 57567
const SUBSTR = 57568
const SUBSTRING = 57569
const GROUP_CONCAT = 57570
const SEPARATOR = 57571
const MATCH = 57572
const AGAINST = 57573
const BOOLEAN = 57574
const LANGUAGE = 57575
const WITH = 57576
const QUERY = 57577
const EXPANSION = 57578
const UNUSED = 57579
const RETURNING = 57580

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	152, 272,
	153, 272,
	-2, 262,
	-1, 248,
	111, 617,
	-2, 512,
	-1, 266,
	53, 614,
	111, 614,
	112, 614,
	113, 614,
	-2, 515,
	-1, 318,
	82, 775,
	-2, 62,
	-1, 319,
	82, 736,
	-2, 63,
	-1, 324,
	82, 720,
	-2, 579,
	-1, 326,
	82, 757,
	-2, 581,
	-1, 591,
	52, 45,
	54, 45,
	-2, 47,
	-1, 738,
	111, 619,
	-2, 616,
	-1, 739,
	111, 617,
	-2, 615,
	-1, 786,
	111, 617,
	-2, 512,
	-1, 948,
	5, 31,
	-2, 416,
	-1, 973,
	5, 30,
	-2, 551,
	-1, 1207,
	5, 31,
	-2, 552,
	-1, 1254,
	5, 30,
	-2, 554,
	-1, 1317,
	5, 31,
	-2, 555,
}

const yyPrivate = 57344

const yyLast = 9618

var yyAct = [...]int{

	248, 887, 663, 1265, 804, 1308, 539, 1111, 1139, 246,
	1112, 822, 1036, 881, 977, 1108, 843, 584, 764, 1084,
	861, 696, 844, 771, 1213, 840, 867, 450, 805, 254,
	24, 278, 586, 1039, 80, 993, 940, 611, 192, 601,
	792, 192, 768, 1027, 250, 538, 3, 982, 323, 471,
	227, 741, 192, 59, 853, 477, 317, 877, 420, 600,
	218, 305, 573, 800, 770, 491, 483, 922, 192, 192,
	322, 588, 236, 314, 192, 304, 425, 553, 312, 58,
	1202, 1337, 469, 1327, 1335, 303, 1315, 904, 1333, 240,
	251, 888, 231, 1326, 1314, 1103, 1199, 308, 424, 226,
	233, 903, 54, 29, 30, 445, 1274, 219, 220, 221,
	222, 63, 1134, 1135, 1290, 503, 502, 512, 513, 505,
	506, 507, 508, 509, 510, 511, 504, 1133, 908, 514,
	188, 184, 185, 186, 836, 837, 835, 691, 902, 65,
	66, 67, 68, 69, 459, 461, 1145, 1146, 1147, 1001,
	701, 693, 1000, 702, 1150, 1002, 1148, 602, 694, 603,
	1018, 860, 1225, 1240, 868, 1187, 1185, 223, 217, 201,
	447, 1334, 449, 433, 1332, 456, 457, 1309, 1060, 801,
	802, 1266, 192, 1272, 192, 452, 434, 899, 896, 897,
	192, 895, 427, 212, 182, 1268, 192, 446, 448, 671,
	322, 322, 322, 322, 855, 322, 855, 181, 855, 182,
	992, 823, 825, 322, 662, 1057, 906, 909, 991, 990,
	422, 1059, 430, 195, 192, 183, 527, 528, 453, 454,
	455, 1295, 458, 1210, 421, 1071, 1012, 956, 934, 712,
	463, 494, 187, 493, 440, 196, 504, 1154, 841, 514,
	514, 198, 914, 709, 901, 320, 1085, 1064, 204, 200,
	489, 488, 490, 1267, 1300, 531, 532, 533, 534, 535,
	536, 537, 1164, 1291, 980, 1105, 900, 490, 480, 525,
	953, 444, 1273, 1271, 479, 202, 1087, 824, 207, 868,
	489, 488, 1047, 205, 802, 1313, 604, 1107, 854, 1155,
	854, 793, 854, 192, 666, 852, 850, 490, 488, 851,
	192, 192, 192, 905, 1303, 1058, 322, 1056, 1149, 197,
	1045, 1089, 606, 1093, 490, 1088, 907, 1086, 1095, 530,
	489, 488, 1091, 915, 55, 1063, 1016, 857, 793, 308,
	963, 1090, 858, 426, 485, 481, 199, 490, 208, 209,
	210, 211, 215, 775, 1092, 1094, 1319, 214, 213, 1241,
	436, 437, 438, 1231, 715, 716, 931, 932, 933, 555,
	556, 557, 558, 559, 560, 561, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 1046, 180, 514, 598,
	592, 1051, 1048, 1041, 1042, 1049, 1044, 1043, 1230, 505,
	506, 507, 508, 509, 510, 511, 504, 765, 1050, 514,
	766, 748, 489, 488, 1053, 507, 508, 509, 510, 511,
	504, 428, 429, 514, 322, 746, 747, 745, 56, 490,
	192, 192, 322, 1031, 192, 1298, 1030, 192, 1019, 744,
	1320, 192, 1301, 322, 322, 322, 322, 322, 322, 322,
	322, 661, 1003, 1248, 302, 1004, 1228, 322, 322, 670,
	730, 732, 733, 192, 1172, 731, 1028, 1323, 470, 192,
	681, 682, 683, 684, 685, 686, 687, 688, 1258, 1306,
	1258, 470, 470, 721, 689, 690, 1142, 192, 703, 680,
	1258, 1259, 1278, 493, 1141, 739, 697, 697, 1222, 1221,
	1277, 320, 1130, 470, 1151, 705, 740, 1013, 678, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 952, 890, 951, 743, 978, 742,
	717, 1209, 470, 1161, 1160, 56, 242, 767, 776, 1157,
	1158, 1157, 1156, 738, 489, 488, 677, 786, 786, 946,
	470, 916, 470, 786, 719, 570, 470, 778, 734, 778,
	470, 490, 736, 718, 676, 667, 665, 660, 192, 442,
	786, 192, 192, 192, 192, 192, 610, 609, 575, 578,
	579, 580, 576, 192, 577, 581, 192, 780, 983, 984,
	192, 785, 788, 979, 192, 192, 435, 794, 322, 421,
	308, 308, 308, 308, 308, 225, 797, 781, 782, 1109,
	322, 830, 978, 789, 806, 308, 790, 1047, 772, 774,
	979, 777, 779, 308, 829, 1205, 594, 796, 570, 798,
	799, 780, 60, 808, 809, 570, 811, 795, 1163, 1159,
	863, 864, 865, 866, 819, 1045, 807, 1005, 834, 810,
	26, 869, 870, 871, 832, 828, 874, 875, 876, 833,
	946, 827, 978, 192, 595, 26, 322, 821, 322, 847,
	918, 946, 192, 883, 971, 192, 322, 972, 597, 713,
	737, 502, 512, 513, 505, 506, 507, 508, 509, 510,
	511, 504, 1253, 891, 514, 893, 1235, 56, 465, 569,
	279, 53, 862, 912, 882, 596, 664, 594, 1124, 466,
	1074, 1046, 56, 739, 879, 880, 1051, 1048, 1041, 1042,
	1049, 1044, 1043, 570, 274, 267, 773, 269, 270, 271,
	272, 958, 1008, 1050, 268, 275, 273, 955, 26, 1040,
	56, 503, 502, 512, 513, 505, 506, 507, 508, 509,
	510, 511, 504, 946, 53, 514, 937, 938, 939, 983,
	984, 738, 232, 885, 711, 474, 478, 924, 309, 923,
	878, 873, 872, 233, 957, 743, 71, 742, 725, 468,
	954, 1144, 495, 320, 1109, 56, 1032, 917, 986, 930,
	674, 462, 989, 816, 814, 845, 988, 936, 817, 815,
	710, 813, 812, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 1331, 540, 514, 489, 488,
	56, 818, 1325, 579, 580, 551, 1070, 994, 237, 238,
	192, 919, 962, 1330, 945, 490, 975, 929, 484, 928,
	1023, 472, 608, 995, 322, 997, 973, 996, 443, 941,
	943, 944, 482, 473, 1015, 960, 1305, 1304, 987, 308,
	1251, 1009, 1203, 948, 949, 950, 1006, 1236, 892, 673,
	1068, 583, 959, 484, 998, 234, 235, 965, 228, 966,
	967, 968, 969, 1283, 927, 229, 1033, 322, 1282, 322,
	1020, 1021, 926, 1022, 60, 1024, 1025, 1026, 737, 1238,
	451, 451, 451, 451, 979, 451, 1010, 1011, 486, 1292,
	1226, 708, 322, 451, 1034, 192, 192, 1029, 62, 192,
	699, 7, 700, 6, 64, 467, 192, 698, 5, 593,
	1052, 57, 1, 53, 706, 322, 1201, 529, 889, 1061,
	575, 578, 579, 580, 576, 1035, 577, 581, 523, 524,
	526, 1080, 1081, 898, 1067, 1038, 1307, 739, 1264, 1138,
	849, 842, 419, 70, 1098, 1099, 1299, 1101, 1102, 848,
	1083, 1096, 786, 1097, 1078, 1117, 1110, 994, 1077, 786,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 1270,
	552, 554, 554, 554, 554, 554, 554, 554, 554, 562,
	563, 564, 565, 1224, 1113, 738, 322, 1120, 322, 1140,
	585, 1132, 1118, 856, 1104, 1017, 806, 859, 1143, 1302,
	1115, 1014, 1136, 806, 616, 727, 728, 615, 1082, 845,
	1137, 1119, 613, 192, 614, 612, 618, 617, 704, 203,
	315, 1166, 582, 605, 884, 487, 1152, 1153, 82, 1131,
	72, 1055, 1054, 894, 1168, 192, 1062, 692, 913, 460,
	206, 1171, 522, 925, 999, 321, 1116, 714, 476, 1281,
	1237, 961, 322, 550, 1037, 192, 1129, 791, 540, 253,
	729, 783, 784, 265, 262, 264, 263, 720, 1175, 1178,
	1174, 970, 1176, 496, 252, 244, 307, 566, 574, 697,
	1165, 572, 571, 1183, 308, 985, 1180, 1181, 981, 1182,
	306, 1073, 1184, 1167, 1186, 1198, 1170, 1289, 724, 28,
	1076, 61, 239, 23, 451, 1214, 1204, 1214, 1214, 1214,
	192, 1219, 451, 22, 21, 19, 18, 322, 17, 20,
	16, 839, 1100, 451, 451, 451, 451, 451, 451, 451,
	451, 1215, 1216, 1217, 15, 14, 32, 451, 451, 1006,
	1177, 1223, 1218, 322, 322, 322, 13, 1179, 12, 11,
	1212, 10, 9, 8, 4, 230, 1233, 475, 25, 1189,
	1190, 1191, 1220, 1227, 1194, 1229, 2, 1234, 0, 0,
	1232, 845, 0, 845, 0, 0, 310, 1206, 1207, 1208,
	0, 1211, 1242, 1243, 0, 1244, 1245, 1246, 1239, 1250,
	1256, 1257, 0, 0, 0, 191, 1252, 0, 216, 0,
	0, 0, 0, 1140, 0, 0, 0, 53, 0, 224,
	1263, 1269, 0, 0, 190, 0, 1214, 1113, 0, 0,
	0, 0, 541, 243, 0, 191, 191, 920, 921, 0,
	478, 191, 0, 1275, 1254, 1276, 0, 1076, 0, 1296,
	1279, 1293, 0, 0, 0, 313, 0, 0, 1297, 0,
	423, 309, 309, 309, 309, 309, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 1113, 585, 0, 826, 0,
	1311, 0, 0, 786, 309, 0, 1318, 1316, 1260, 1261,
	1262, 1294, 0, 0, 0, 0, 0, 0, 0, 1321,
	1324, 0, 0, 0, 0, 947, 0, 26, 27, 54,
	29, 30, 845, 1328, 1284, 1285, 1286, 1287, 1288, 1329,
	964, 0, 0, 0, 0, 0, 45, 806, 0, 0,
	0, 31, 0, 0, 0, 0, 1338, 0, 0, 1037,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	40, 191, 0, 0, 56, 0, 451, 191, 451, 0,
	1195, 470, 1312, 191, 0, 0, 451, 1317, 431, 0,
	432, 0, 0, 0, 0, 0, 439, 0, 0, 0,
	1322, 0, 441, 0, 0, 0, 0, 0, 0, 633,
	0, 464, 0, 0, 0, 0, 0, 0, 0, 503,
	502, 512, 513, 505, 506, 507, 508, 509, 510, 511,
	504, 1340, 1341, 514, 0, 33, 34, 36, 35, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 39, 46, 47, 0,
	0, 48, 49, 37, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 42, 0, 43, 44,
	50, 51, 52, 0, 0, 0, 0, 621, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 191, 590, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 568,
	1106, 974, 0, 976, 0, 0, 0, 634, 591, 0,
	0, 0, 0, 0, 1193, 0, 1121, 1122, 0, 0,
	1123, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	309, 648, 649, 650, 651, 652, 653, 654, 0, 655,
	656, 657, 658, 659, 635, 636, 637, 638, 619, 620,
	647, 55, 622, 0, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 639, 640, 641, 642, 643, 644,
	645, 646, 503, 502, 512, 513, 505, 506, 507, 508,
	509, 510, 511, 504, 0, 0, 514, 451, 503, 502,
	512, 513, 505, 506, 507, 508, 509, 510, 511, 504,
	0, 1173, 514, 0, 0, 0, 0, 191, 191, 0,
	0, 191, 451, 0, 191, 0, 0, 0, 679, 0,
	0, 0, 0, 0, 0, 0, 668, 669, 0, 0,
	672, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 1200, 0, 707, 0, 0, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 191, 1192, 470, 0, 0, 0,
	0, 0, 679, 1114, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 1126, 1127, 1128, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 503, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 0, 0, 514, 0,
	243, 243, 0, 0, 787, 787, 243, 0, 0, 0,
	787, 0, 0, 0, 0, 0, 0, 0, 470, 540,
	243, 243, 243, 243, 0, 191, 0, 787, 191, 191,
	191, 191, 191, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 191, 803, 0, 0, 590, 0, 0,
	0, 191, 191, 0, 0, 309, 503, 502, 512, 513,
	505, 506, 507, 508, 509, 510, 511, 504, 0, 0,
	514, 831, 0, 0, 0, 0, 1188, 0, 0, 0,
	0, 1079, 0, 0, 1197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	540, 503, 502, 512, 513, 505, 506, 507, 508, 509,
	510, 511, 504, 0, 0, 514, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 191, 942, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 451, 0, 0, 0, 0, 910, 0,
	0, 911, 0, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 0, 0, 514, 0, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 498, 0, 501, 1114, 0, 0, 1255,
	0, 515, 516, 517, 518, 519, 520, 521, 0, 499,
	500, 497, 503, 502, 512, 513, 505, 506, 507, 508,
	509, 510, 511, 504, 0, 0, 514, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 0, 0, 1114, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1066, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1169, 191, 0, 0, 0, 0, 0, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 590, 0, 81,
	0, 0, 83, 846, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 1007, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	787, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 846, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 56, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 1075, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 735, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 325, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 326, 324, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 599,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 325, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 326, 324, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 408, 398,
	0, 370, 410, 348, 362, 418, 363, 364, 391, 334,
	378, 132, 360, 0, 351, 329, 357, 330, 349, 372,
	100, 375, 347, 400, 381, 114, 416, 116, 386, 0,
	149, 125, 0, 0, 374, 402, 376, 396, 369, 392,
	339, 385, 411, 361, 389, 412, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 388, 407, 359, 390, 328, 387, 0, 332,
	335, 417, 405, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 393, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 384, 0, 0, 0,
	336, 333, 0, 371, 0, 0, 0, 338, 0, 353,
	394, 0, 327, 397, 403, 368, 193, 406, 366, 365,
	409, 138, 0, 0, 152, 105, 104, 113, 401, 350,
	358, 96, 356, 144, 134, 164, 383, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 316,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 325, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 331, 0, 150,
	166, 179, 346, 404, 172, 173, 174, 175, 0, 0,
	0, 326, 324, 319, 318, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 342, 345, 340, 341, 379, 380,
	413, 414, 415, 395, 337, 0, 343, 344, 0, 399,
	382, 84, 0, 115, 176, 140, 102, 167, 132, 0,
	0, 769, 0, 249, 0, 0, 0, 100, 0, 247,
	0, 0, 114, 289, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 280, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 81, 274, 267, 266,
	269, 270, 271, 272, 0, 0, 93, 268, 275, 273,
	276, 277, 0, 0, 245, 260, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 241,
	0, 0, 0, 300, 0, 259, 0, 0, 255, 256,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 298, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 290, 299, 296, 297, 294, 295, 293, 292, 291,
	301, 282, 283, 284, 285, 287, 0, 286, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 0,
	249, 0, 0, 0, 100, 0, 247, 0, 0, 114,
	289, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	280, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 81, 274, 267, 266, 269, 270, 271,
	272, 0, 0, 93, 268, 275, 273, 276, 277, 0,
	0, 245, 260, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 1249, 0, 0, 0,
	300, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 298, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 290, 299,
	296, 297, 294, 295, 293, 292, 291, 301, 282, 283,
	284, 285, 287, 0, 286, 84, 0, 115, 176, 140,
	102, 167, 132, 0, 0, 0, 0, 249, 0, 0,
	0, 100, 0, 247, 0, 0, 114, 289, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 280, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 470,
	81, 274, 267, 266, 269, 270, 271, 272, 0, 0,
	93, 268, 275, 273, 276, 277, 0, 0, 245, 260,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 300, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	298, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 290, 299, 296, 297, 294,
	295, 293, 292, 291, 301, 282, 283, 284, 285, 287,
	0, 286, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 0, 249, 0, 0, 0, 100, 0,
	247, 0, 0, 114, 289, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 280, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 81, 274, 267,
	266, 269, 270, 271, 272, 0, 0, 93, 268, 275,
	273, 276, 277, 0, 0, 245, 260, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	241, 0, 0, 0, 300, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 298, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 290, 299, 296, 297, 294, 295, 293, 292,
	291, 301, 282, 283, 284, 285, 287, 0, 286, 84,
	0, 115, 176, 140, 102, 167, 132, 0, 0, 0,
	0, 249, 0, 0, 0, 100, 0, 247, 0, 0,
	114, 289, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 838,
	0, 56, 0, 0, 81, 274, 267, 266, 269, 270,
	271, 272, 0, 0, 93, 268, 275, 273, 276, 277,
	0, 0, 245, 260, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 0, 0, 0,
	0, 300, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 298, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 290,
	299, 296, 297, 294, 295, 293, 292, 291, 301, 282,
	283, 284, 285, 287, 26, 286, 84, 0, 115, 176,
	140, 102, 167, 0, 0, 0, 132, 0, 0, 0,
	0, 249, 0, 0, 0, 100, 0, 247, 0, 0,
	114, 289, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 81, 274, 267, 266, 269, 270,
	271, 272, 0, 0, 93, 268, 275, 273, 276, 277,
	0, 0, 245, 260, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 0, 0, 0,
	0, 300, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 298, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 290,
	299, 296, 297, 294, 295, 293, 292, 291, 301, 282,
	283, 284, 285, 287, 0, 286, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 0, 249, 0,
	0, 0, 100, 0, 247, 0, 0, 114, 289, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 280, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 274, 267, 266, 269, 270, 271, 272, 0,
	0, 93, 268, 275, 273, 276, 277, 0, 0, 245,
	260, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 0, 0, 0, 0, 300, 0,
	259, 0, 0, 255, 256, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 298, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 290, 299, 296, 297,
	294, 295, 293, 292, 291, 301, 282, 283, 284, 285,
	287, 132, 286, 84, 0, 115, 176, 140, 102, 167,
	100, 0, 0, 0, 0, 114, 289, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 81,
	274, 267, 266, 269, 270, 271, 272, 0, 0, 93,
	268, 275, 273, 276, 277, 0, 0, 0, 260, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 0, 0, 0, 0, 300, 0, 259, 0,
	0, 255, 256, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 298,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 1339, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 179, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 290, 299, 296, 297, 294, 295,
	293, 292, 291, 301, 282, 283, 284, 285, 287, 132,
	286, 84, 0, 115, 176, 140, 102, 167, 100, 0,
	0, 0, 0, 114, 289, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 280, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 81, 274, 267,
	266, 269, 270, 271, 272, 0, 0, 93, 268, 275,
	273, 276, 277, 0, 0, 0, 260, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 300, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 298, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 290, 299, 296, 297, 294, 295, 293, 292,
	291, 301, 282, 283, 284, 285, 287, 132, 286, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 503, 502, 512, 513, 505, 506, 507, 508,
	509, 510, 511, 504, 0, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 179, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 84, 0, 115,
	176, 140, 102, 167, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	73, 0, 0, 0, 79, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 75, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 115, 176, 140,
	102, 167, 132, 0, 0, 0, 492, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 114, 0, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 489, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	179, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 83,
	722, 0, 0, 723, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 589,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 84, 0, 115, 176, 140, 102, 167,
	100, 0, 607, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 179, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 115, 176, 140, 102, 167, 132, 0,
	0, 0, 589, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 587, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 84, 0,
	115, 176, 140, 102, 167, 567, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 179, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 132, 0, 84, 0, 115,
	176, 140, 102, 167, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 193, 0,
	0, 0, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 84, 0, 115, 176, 140, 102, 167,
	100, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 179, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 115, 176, 140, 102, 167,
}
var yyPact = [...]int{

	1311, -1000, -177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 879, 913, -1000, -1000, -1000, -1000,
	-1000, -1000, 723, 6827, 84, 104, 10, 9135, 102, 137,
	9363, -1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7, 9363, 549, 732, -1000, -1000, -1000, -1000, -1000, 861,
	869, 767, 855, 789, -1000, 5201, 69, 7985, 8907, 4253,
	-1000, 543, 98, 9363, -142, 9363, 66, 66, 66, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	101, 9363, -1000, 9363, 60, 540, 60, 60, 60, 9363,
	-1000, 133, -1000, -1000, -1000, 9363, 513, 818, 49, 2753,
	2753, 2753, 2753, 23, 2753, -78, -71, 740, -1000, -1000,
	-1000, -1000, 2753, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9363, 687, 727, 427, 822, 5915, 5915,
	879, -1000, 732, -1000, -1000, -1000, 817, -1000, -1000, 279,
	897, -1000, 7064, 130, -1000, 5915, 1829, 482, 482, 482,
	114, 265, -1000, -1000, -1000, 6371, 6371, 6371, 6371, 6371,
	6371, 6371, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5678,
	482, 482, 482, 482, 482, 482, 482, 482, 5915, 482,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
	482, 482, 8679, 669, 899, -1000, -1000, -1000, 849, 7292,
	8450, 9363, 653, -1000, 624, 4003, -65, -1000, -1000, -1000,
	214, 8213, -1000, -1000, -1000, 812, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 522,
	-1000, 1369, 511, 2753, 91, 654, 510, 230, 509, 9363,
	9363, 2753, 75, 9363, 846, 739, 9363, 508, 490, -1000,
	3503, -1000, 2753, 2753, 2753, 2753, 2753, 2753, 2753, 2753,
	-1000, -1000, -1000, -1000, -1000, -1000, 2753, 2753, -1000, -86,
	-59, -1000, 9363, -1000, -1000, 94, 94, 1369, 9363, -1000,
	-1000, -1000, 902, 161, 746, 128, 625, -1000, 340, 861,
	427, 789, 7520, 736, -1000, -1000, 9363, -1000, 5915, 5915,
	391, -1000, 9363, -1000, 3253, 173, 6371, 375, 335, 6371,
	6371, 6371, 6371, 6371, 6371, 6371, 6371, 6371, 6371, 6371,
	6371, 6371, 6371, 6371, 351, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 481, 4490, -1000, 732, 667, 667, 289,
	-1000, 143, 143, 143, 143, 143, 143, 6599, 427, 505,
	188, 5678, 5201, 5201, 5915, 5915, 9363, 9363, 5201, 852,
	223, 188, 9363, -1000, 427, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5201, 5201, 5201, 5201, 150, 9363, -1000, 9363,
	7985, 7985, 7985, 7985, 7985, -1000, 761, 760, -1000, 753,
	752, 780, 9363, -1000, 501, 7292, 162, 482, -1000, 9363,
	-1000, 36, 572, 7985, 9363, -1000, -1000, 3753, 624, -65,
	594, -1000, -87, -91, 5438, 141, -1000, -1000, -1000, 2503,
	178, 268, -46, -1000, -1000, -1000, -1000, 649, -1000, 649,
	649, 649, 649, -18, -18, -18, -18, -1000, -1000, -1000,
	-1000, -1000, 719, 718, -1000, 649, 649, 649, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 717, 717, 717, 651, 651,
	711, -1000, 9363, -160, 469, 2753, 845, 2753, -1000, 72,
	-1000, 9363, -1000, -1000, 9363, 2753, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 497, -1000, 616, -1000, -1000, 794,
	5915, 5915, 3503, 5915, -1000, -1000, -1000, 822, -1000, 852,
	873, -1000, 806, 804, 5201, -1000, -1000, 173, 235, -1000,
	-1000, 297, -1000, -1000, -1000, -1000, 127, 482, -1000, -1000,
	648, -1000, -1000, -1000, -1000, 375, 6371, 6371, 6371, 710,
	648, 1780, 281, 587, 143, 316, 316, 142, 142, 142,
	142, 142, 302, 302, -1000, -1000, -1000, 427, 427, 5201,
	606, -1000, 265, -1000, 265, -1000, -1000, -1000, 5915, -1000,
	427, 495, 495, 472, 258, 726, -1000, 126, 720, 495,
	5201, 260, -1000, 5915, 427, -1000, 495, 427, 495, 495,
	644, 803, 482, -1000, 608, -1000, 192, 899, 708, 737,
	537, -1000, -1000, -1000, -1000, 755, -1000, 751, -1000, -1000,
	-1000, -1000, -1000, 97, 96, 88, 9363, -1000, 892, 7985,
	581, -1000, -1000, 594, -65, -75, -1000, -1000, -1000, 188,
	-1000, 396, 593, 2253, -1000, -1000, -1000, -1000, -1000, 679,
	833, 176, 180, 451, -1000, -1000, 825, -1000, 267, -48,
	-1000, -1000, 378, -18, -18, -1000, -1000, 141, 810, 141,
	141, 141, 407, 407, -1000, -1000, -1000, -1000, 376, -1000,
	-1000, -1000, 373, -1000, 735, 9363, 2753, -1000, 3503, -1000,
	-1000, -1000, -1000, -1000, -1000, 589, 264, 193, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34,
	-1000, 2753, -1000, 245, 9363, 9363, 1369, 848, 9363, 788,
	188, 188, 124, -1000, -1000, 9363, -1000, -1000, -1000, -1000,
	699, -1000, -1000, -1000, 3003, 5201, -1000, 710, 648, 1728,
	-1000, 6371, 6371, -1000, -1000, 495, 5201, 188, -1000, -1000,
	-1000, 148, 351, 148, 6371, 6371, 3503, 6371, 6371, -153,
	617, 194, -1000, 5915, 218, -1000, -1000, -1000, -1000, -1000,
	733, 9363, 482, -1000, 7292, -1000, 9363, 879, 9363, 5915,
	5915, -1000, -1000, 5915, 655, -1000, 5915, -1000, -1000, -1000,
	482, 482, 482, 448, -1000, 879, 581, -1000, -1000, -1000,
	-97, -116, -1000, -1000, -1000, 2503, -1000, 2503, 9363, -1000,
	438, 430, -1000, -1000, 730, 87, -1000, -1000, -1000, 449,
	141, 141, -1000, 191, -1000, -1000, -1000, 487, -1000, 485,
	585, 479, 9363, -1000, -1000, 584, -1000, 190, -1000, -1000,
	9363, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9363, 9363, -1000, -1000, -1000, -1000, -1000,
	9363, -1000, -1000, 405, 5915, -1000, -1000, -1000, 94, -1000,
	-1000, 3503, -1000, 892, 7985, -1000, -1000, 427, -1000, 6371,
	648, 648, -1000, -1000, 427, 649, 649, -1000, 649, 651,
	-1000, 649, -1, 649, -2, 482, 427, 427, 1611, 1495,
	-1000, 1316, 1479, 482, -150, -1000, 188, 5915, -175, 835,
	558, 571, -1000, -1000, 4964, 427, 477, 122, 448, 861,
	-1000, 188, 188, 188, 9363, 188, 9363, 9363, 9363, 7757,
	9363, 861, -1000, -1000, -1000, -1000, 2253, -1000, 444, -1000,
	649, -1000, -1000, -42, 901, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -18, 397, -18, 338,
	-1000, 303, 2753, 3503, 2503, -1000, 643, -1000, -1000, -1000,
	-1000, 841, -1000, 188, -1000, 886, 574, -1000, 648, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, 299, -1000,
	-1000, -1000, 6371, 6371, -1000, 6371, 6371, 6371, 427, 394,
	188, -1000, 4727, 832, -1000, 482, -1000, -1000, 659, 9363,
	9363, -1000, -1000, 436, -1000, 426, 426, 426, 162, -1000,
	-1000, 129, 9363, -1000, 155, -1000, -125, 141, -1000, 141,
	445, 437, -1000, -1000, -1000, 9363, 482, 874, 867, -1000,
	-1000, 427, 1683, 1683, 1683, 1683, 22, -1000, -1000, -1000,
	503, 900, -1000, 482, -1000, 732, 120, -1000, 9363, -1000,
	-1000, -1000, -1000, -1000, 129, -1000, 379, 182, 383, -1000,
	248, 829, -1000, 828, -1000, -1000, -1000, -1000, -1000, 424,
	33, -1000, 5915, 5915, -1000, -1000, -1000, -1000, -1000, 427,
	46, -166, 9363, 571, 427, 9363, -1000, -1000, -1000, 296,
	-1000, -1000, -1000, 381, -1000, -1000, 654, 413, -1000, 9363,
	188, 503, -1000, 784, -157, -170, 474, -1000, -1000, -1000,
	-1000, -160, -1000, 33, 800, -1000, 777, -1000, -1000, -1000,
	28, -163, 24, -168, 482, -172, 6143, -1000, 1683, 427,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1186, 45, 30, 1178, 1175, 1174, 927, 922, 920,
	1173, 1172, 1171, 1169, 1168, 1166, 1156, 1155, 1154, 1140,
	1139, 1138, 1136, 1135, 1134, 1133, 1123, 111, 1122, 1121,
	1119, 66, 1118, 72, 1117, 1115, 36, 64, 42, 23,
	536, 1111, 17, 75, 61, 1110, 47, 1108, 1105, 78,
	1102, 62, 1101, 1098, 1196, 1097, 1096, 11, 14, 1095,
	1094, 1093, 1091, 90, 9, 1087, 1086, 1085, 1084, 1083,
	1080, 51, 6, 7, 31, 10, 1079, 29, 44, 1077,
	40, 1073, 1071, 1070, 1069, 53, 1068, 55, 1067, 50,
	49, 1066, 24, 63, 35, 15, 4, 73, 59, 1065,
	28, 56, 39, 1064, 1063, 387, 1062, 1060, 1059, 1058,
	1057, 1056, 173, 343, 1053, 1052, 1051, 1050, 48, 1048,
	0, 185, 65, 1045, 1044, 1043, 1177, 67, 71, 32,
	1042, 60, 27, 18, 1040, 1039, 19, 1038, 37, 1037,
	1036, 1035, 1034, 1032, 1027, 1024, 20, 1021, 1019, 1018,
	26, 25, 1017, 1015, 57, 13, 1013, 1003, 989, 43,
	58, 969, 54, 966, 963, 962, 961, 16, 22, 960,
	8, 959, 3, 958, 956, 5, 953, 12, 945, 1,
	938, 2, 33, 937, 936, 21, 934, 932, 931, 700,
	82, 929, 924, 77,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 191, 191, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 134, 134, 11, 11, 11, 11, 11, 11,
	11, 181, 181, 180, 179, 179, 178, 178, 177, 16,
	164, 165, 165, 165, 160, 137, 137, 138, 138, 138,
	138, 138, 145, 141, 141, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 142, 142, 142,
	142, 142, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 159, 159, 146, 146, 154,
	154, 155, 155, 155, 152, 152, 153, 153, 156, 156,
	156, 147, 147, 147, 147, 147, 147, 147, 149, 149,
	157, 157, 150, 150, 150, 151, 151, 151, 158, 158,
	158, 158, 158, 148, 148, 161, 161, 173, 173, 172,
	172, 172, 163, 163, 169, 169, 169, 169, 169, 162,
	162, 171, 171, 170, 166, 166, 166, 167, 167, 167,
	168, 168, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 176, 174, 174, 175, 175, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	110, 110, 107, 107, 108, 108, 109, 109, 109, 111,
	111, 111, 135, 135, 135, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 24, 25, 25, 25,
	185, 185, 185, 185, 185, 185, 26, 26, 186, 186,
	192, 27, 28, 28, 29, 29, 29, 33, 33, 33,
	31, 31, 32, 32, 38, 38, 37, 37, 39, 39,
	39, 39, 123, 123, 123, 122, 41, 41, 42, 42,
	43, 43, 44, 44, 44, 56, 56, 92, 92, 94,
	94, 45, 45, 45, 45, 46, 46, 47, 47, 48,
	48, 130, 130, 129, 129, 129, 128, 50, 50, 50,
	52, 51, 51, 51, 51, 53, 53, 55, 55, 54,
	54, 57, 57, 57, 57, 58, 58, 40, 40, 40,
	40, 40, 40, 40, 106, 106, 60, 60, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 70, 70,
	70, 70, 70, 70, 61, 61, 61, 61, 61, 61,
	61, 36, 36, 71, 71, 71, 77, 72, 72, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	68, 68, 68, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 193, 193, 69, 69,
	69, 69, 34, 34, 34, 34, 34, 133, 133, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 81, 81, 35, 35, 79, 79, 80,
	82, 82, 78, 78, 78, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 183, 183, 65, 65,
	65, 83, 83, 84, 84, 85, 85, 86, 86, 87,
	88, 88, 88, 89, 89, 89, 89, 90, 90, 90,
	62, 62, 62, 62, 62, 62, 91, 91, 91, 91,
	95, 95, 73, 73, 75, 75, 74, 76, 184, 184,
	184, 96, 96, 100, 97, 97, 101, 101, 101, 99,
	99, 99, 125, 125, 104, 104, 112, 112, 113, 113,
	105, 105, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 116, 116, 117, 117, 117,
	124, 124, 120, 120, 120, 121, 121, 126, 127, 127,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	189, 190, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	4, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 4, 4, 7,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 4, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 0, 2,
	2, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 114, 115, 117, 116, 142, 118, 135,
	49, 154, 155, 157, 158, 25, 136, 137, 140, 141,
	159, 160, 161, -189, 8, 240, 53, -188, 256, -85,
	15, -29, 5, -27, -192, -27, -27, -27, -27, -27,
	-164, 53, -117, 123, 72, 150, 232, 120, 121, 127,
	-120, 56, -119, 59, 248, 154, 168, 162, 189, 181,
	179, 182, 219, 66, 157, 228, 138, 177, 173, 171,
	27, 194, 253, 172, 133, 132, 195, 199, 220, 166,
	167, 222, 193, 134, 32, 250, 34, 146, 223, 197,
	192, 188, 191, 165, 187, 38, 201, 200, 202, 218,
	184, 174, 18, 226, 141, 144, 196, 198, 128, 148,
	252, 224, 170, 145, 140, 227, 158, 221, 230, 37,
	206, 164, 131, 155, 152, 185, 147, 175, 176, 190,
	163, 186, 156, 149, 142, 229, 207, 254, 183, 180,
	153, 151, 211, 212, 213, 214, 251, 225, 178, 208,
	-105, 123, 125, 121, 121, 122, 123, 232, 120, 121,
	-54, -126, -120, 123, 150, 121, 108, 182, 114, 209,
	122, 32, 148, -135, 121, 156, -107, 151, 211, 212,
	213, 214, 56, 221, 220, 215, -126, 156, -131, -131,
	-131, -131, -131, 160, -126, 56, -2, -89, 17, 16,
	-5, -3, -189, 6, 20, 21, -33, 39, 40, -28,
	-39, 99, -40, -126, -59, 74, -64, 29, -120, 23,
	-78, -63, -60, -76, -77, 108, 109, 97, 98, 105,
	75, 110, -68, -66, -67, -69, 59, 58, 67, 60,
	61, 62, 63, 69, 57, 68, 70, 71, -74, -189,
	43, 44, 241, 242, 243, 244, 247, 245, 77, 33,
	231, 239, 238, 237, 235, 236, 233, 234, 126, 232,
	103, 240, -105, -42, -43, -44, -45, -56, -77, -189,
	-54, 11, -49, -54, -97, -134, 156, -101, 221, 220,
	-121, -99, -120, -118, 219, 182, 218, 119, 73, 22,
	24, 204, 76, 108, 16, 77, 107, 241, 114, 47,
	233, 234, 231, 243, 244, 232, 209, 29, 10, 25,
	136, 21, 101, 116, 80, 81, 139, 23, 137, 71,
	19, 50, 11, 13, 14, 126, 125, 92, 122, 45,
	8, 110, 26, 89, 41, 28, 43, 90, 17, 235,
	236, 31, 247, 143, 103, 48, 35, 74, 69, 51,
	72, 15, 46, 91, 117, 240, 44, 120, 6, 246,
	30, 135, 42, 121, 210, 79, 124, 70, 5, 127,
	9, 49, 52, 237, 238, 239, 33, 78, 12, -165,
	-160, 56, 122, -54, 240, -120, -113, 126, -113, -113,
	121, -54, -54, -112, 126, 56, -112, -112, -112, -54,
	111, -54, 56, 30, 232, 56, 148, 121, 149, 123,
	-132, -189, -121, -132, -132, -132, 152, 153, -132, 222,
	-108, 216, 51, -132, -126, 11, 22, -189, 52, -190,
	55, -90, 19, 31, -40, -126, -86, -87, -40, -85,
	-2, -27, 35, -31, 21, 65, 11, -123, 73, 72,
	89, -122, 22, -120, 111, -40, -61, 92, 74, 90,
	91, 76, 94, 93, 104, 97, 98, 99, 100, 101,
	102, 103, 95, 96, 107, 82, 83, 84, 85, 86,
	87, 88, -106, -189, -189, -77, -189, 112, 113, -183,
	64, -64, -64, -64, -64, -64, -64, -64, -2, -72,
	-40, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-81, -40, -189, -193, -189, -193, -193, -193, -193, -193,
	-193, -193, -189, -189, -189, -189, -55, 26, -54, 30,
	54, -50, -52, -51, -53, 41, 45, 47, 42, 43,
	44, 48, -130, 22, -42, -189, -129, 144, -128, 22,
	-126, -54, -49, -191, 54, 11, 52, 54, -97, 156,
	-98, -102, 222, 224, 82, -125, -120, 29, 30, 55,
	54, -138, -141, -143, -142, -144, -145, -139, -140, 179,
	180, 108, 183, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 30, 138, 175, 176, 177, 178, 195,
	196, 197, 198, 199, 200, 201, 202, 181, 162, 163,
	164, 165, 166, 167, 168, 170, 171, 172, 173, 174,
	56, -132, 123, -181, 52, 56, 74, 56, -54, -54,
	-132, 124, -54, 23, 51, -54, 56, 56, -127, -126,
	-118, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, 223, -110, 210, 217, -54, -185, -3, -7, -9,
	-8, 56, 59, -185, -137, -138, -186, -126, 9, 92,
	54, 18, 111, 54, -88, 24, 25, -89, -190, -33,
	-65, -120, 60, 63, -32, 42, -54, -40, -40, -70,
	69, 74, 70, 71, -122, 99, -127, -121, -118, -120,
	-64, -71, -74, -77, 64, 92, 90, 91, 76, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -133, 56, 59, 56, -38, 21,
	-37, -39, -63, 59, -63, 64, -120, -190, 54, -190,
	-2, -37, -37, -40, -40, -78, -120, -126, -78, -37,
	-31, -79, -80, 78, -78, -190, -37, -38, -37, -37,
	-93, 29, 144, -54, -96, -100, -78, -43, -44, -44,
	-43, -44, 41, 41, 41, 46, 41, 46, 41, -51,
	-126, -190, -57, 49, 125, 50, -189, -128, -93, 52,
	-42, -54, -101, -98, 54, 223, 225, 226, 51, -40,
	-151, 107, -166, -167, -168, -121, 60, -160, -161, -169,
	128, 131, 127, -162, 122, 28, -156, 69, 74, -152,
	207, -146, 53, -146, -146, -146, -146, -150, 182, -150,
	-150, -150, 53, 53, -146, -146, -146, -154, 53, -154,
	-154, -155, 53, -155, -124, 52, -54, -179, 251, -180,
	56, -132, 23, -132, -114, 119, 116, 117, -176, 115,
	204, 182, 66, 29, 15, 241, 144, 254, 56, 145,
	-54, -54, -132, -109, 11, 92, 54, -190, 54, 37,
	-40, -40, -127, -87, -90, -104, 19, 11, 33, 33,
	-37, 69, 70, 71, 111, -189, -71, -64, -64, -64,
	-36, 139, 73, -190, -190, -37, 54, -40, -190, -190,
	-190, 54, 52, 22, 54, 11, 111, 54, 11, -190,
	-37, -82, -80, 80, -40, -190, -190, -190, -190, -190,
	-62, 30, 33, -2, -189, 33, -189, -58, 54, 12,
	82, -47, -46, 51, 52, -48, 51, -46, 41, 41,
	122, 122, 122, -94, -120, -58, -42, -58, -102, -103,
	227, 224, 230, 56, 59, 54, -168, 82, 53, 28,
	-162, -162, 56, 56, -147, 29, 69, -153, 208, 60,
	-150, -150, -151, 30, -151, -151, -151, -159, 59, -159,
	60, 60, 51, -120, -132, -178, -177, -121, -131, -182,
	150, 129, 130, 133, 132, 56, 122, 28, 128, 131,
	144, 127, -182, 150, -115, -116, 124, 22, 122, 28,
	144, -132, -111, 90, 12, -126, -126, -138, 22, -126,
	38, 111, -54, -41, 11, 99, -121, -38, -36, 73,
	-64, -64, -190, -39, -136, 108, 179, 138, 177, 173,
	193, 184, 206, 175, 207, 180, -133, -136, -64, -64,
	-121, -64, -64, 248, -85, 81, -40, 79, -95, 51,
	-96, -73, -75, -74, -189, -2, -91, -120, -94, -85,
	-100, -40, -40, -40, 53, -40, -189, -189, -189, -190,
	54, -85, -58, 224, 228, 229, -167, -168, -171, -170,
	-120, 56, 56, -149, 51, 59, 60, 61, 69, 231,
	67, 55, -151, -151, 56, 108, 55, 54, 55, 54,
	55, 54, -54, 54, 82, -131, -120, -131, -120, -54,
	-131, -120, 59, -40, -185, -58, -42, -190, -64, -190,
	-146, -146, -146, -155, -146, 167, -146, 167, -189, -190,
	-190, -190, 54, 19, -190, 54, 19, -189, -35, 246,
	-40, -184, 255, 27, -95, 54, -190, -190, -190, 54,
	111, -190, -89, -92, -120, -92, -92, -92, -129, -120,
	-89, 55, 54, -146, -157, 204, 9, -150, 59, -150,
	60, 60, -132, -177, -168, 53, 26, -83, 13, -150,
	56, 60, -64, -64, -64, -64, -64, -190, 59, 99,
	-72, 28, -75, 33, -2, -189, -120, -120, 54, 55,
	-190, -190, -190, -57, -173, -172, 52, 134, 66, -170,
	-158, 128, 28, 127, 231, -151, -151, 55, 55, -92,
	-189, -84, 14, 16, -190, -190, -190, -190, -190, -34,
	92, 251, 9, -73, -2, 111, -120, -172, 56, -163,
	82, 59, -148, 66, 28, 28, 55, -174, -175, 144,
	-40, -72, -190, 249, 48, 252, -96, -190, -120, 60,
	59, -181, -190, 54, -120, 38, 250, 253, -179, -175,
	33, 38, 146, 251, 147, 252, -189, 253, -64, 143,
	-190, -190,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 535, 0, 300, 300, 300, 300,
	300, 300, 0, 607, 590, 0, 0, 0, 0, -2,
	276, 277, 0, 279, 280, 812, 812, 812, 812, 812,
	0, 0, 0, 0, 37, 38, 810, 1, 3, 543,
	0, 0, 304, 307, 302, 0, 590, 0, 0, 0,
	64, 0, 0, 799, 0, 800, 588, 588, 588, 608,
	609, 612, 613, 614, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	0, 0, 591, 0, 586, 0, 586, 586, 586, 0,
	234, 369, 617, 799, 800, 0, 0, 0, 0, 813,
	813, 813, 813, 0, 813, 0, 264, 253, 255, 256,
	257, 258, 813, 273, 274, 263, 275, 278, 281, 282,
	283, 284, 285, 0, 0, 296, 30, 547, 0, 0,
	535, 32, 0, 300, 305, 306, 310, 308, 309, 301,
	0, 318, 322, 0, 377, 0, 382, 384, -2, 0,
	419, 420, 421, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 446, 447, 448, 449, -2, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 386, 387, 567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 0,
	476, 476, 476, 476, 476, 476, 476, 476, 0, 0,
	0, 0, 0, 0, 328, 330, 331, 332, 351, 0,
	353, 0, 0, 45, 49, 0, 790, 574, -2, -2,
	0, 0, 615, 616, -2, 719, -2, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 0,
	81, 0, 0, 813, 0, 71, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 235, 813, 813, 813, 813, 813, 813, 813, 813,
	244, 814, 815, 245, 246, 247, 813, 813, 249, 0,
	0, 265, 0, 259, 286, 0, 0, 0, 0, 31,
	811, 25, 0, 0, 544, 0, 536, 537, 540, 543,
	30, 307, 0, 312, 311, 303, 0, 319, 0, 0,
	0, 323, 0, 325, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 405, 406, 407, 408,
	409, 410, 383, 0, 314, 397, 0, 0, 0, 525,
	526, 439, 440, 441, 442, 443, 444, 0, 30, 0,
	417, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 504, 0, 468, 0, 469, 470, 471, 472, 473,
	474, 475, 0, 314, 0, 0, 47, 0, 368, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 360, 0,
	0, 0, 0, 352, 0, 0, 371, 763, 354, 0,
	356, -2, 0, 0, 0, 43, 44, 0, 50, 790,
	52, 53, 0, 0, 0, 165, 582, 583, 580, 194,
	0, 148, 144, 88, 89, 90, 91, 137, 94, 137,
	137, 137, 137, 162, 162, 162, 162, 120, 121, 122,
	123, 124, 0, 0, 107, 137, 137, 137, 111, 127,
	128, 129, 130, 131, 132, 133, 134, 92, 95, 96,
	97, 98, 99, 100, 101, 139, 139, 139, 141, 141,
	610, 66, 0, 74, 0, 813, 0, 813, 79, 0,
	209, 0, 228, 587, 0, 813, 231, 232, 370, 618,
	619, 236, 237, 238, 239, 240, 241, 242, 243, 248,
	252, 250, 266, 260, 261, 254, 287, 290, 291, 292,
	293, 294, 295, 288, 0, 85, 297, 298, 548, 0,
	0, 0, 0, 0, 539, 541, 542, 547, 33, 310,
	0, 528, 0, 0, 0, 313, 28, 378, 379, 381,
	398, 0, 400, 402, 324, 320, 0, 513, -2, -2,
	388, 389, 413, 414, 415, 0, 0, 0, 0, 411,
	393, 0, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 438, 487, 488, 0, 0, 0,
	315, 316, 436, 515, 437, 527, 445, 416, 0, 566,
	30, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 510, 507, 0, 0, 477, 0, 0, 0, 0,
	0, 0, 0, 367, 375, 571, 0, 329, 347, 349,
	0, 344, 358, 359, 361, 0, 363, 0, 365, 366,
	333, 334, 335, 0, 0, 0, 0, 355, 375, 0,
	375, 46, 575, 51, 0, 0, 56, 57, 576, 577,
	578, 0, 80, 195, 197, 200, 201, 82, 83, 0,
	0, 0, 0, 0, 189, 190, 151, 149, 0, 146,
	145, 93, 0, 162, 162, 114, 115, 165, 0, 165,
	165, 165, 0, 0, 108, 109, 110, 102, 0, 103,
	104, 105, 0, 106, 0, 0, 813, 68, 0, 72,
	73, 69, 589, 70, 812, 0, 0, 602, 210, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 0,
	227, 813, 230, 269, 0, 0, 0, 0, 0, 0,
	545, 546, 0, 538, 26, 0, 584, 585, 529, 530,
	326, 399, 401, 403, 0, 314, 390, 411, 394, 0,
	391, 0, 0, 385, 450, 0, 0, 418, -2, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 508, 0, 0, 467, 478, 479, 480, 481,
	560, 0, 0, -2, 0, 36, 0, 535, 0, 0,
	0, 341, 348, 0, 0, 342, 0, 343, 362, 364,
	0, 0, 0, 0, 339, 535, 375, 42, 54, 55,
	0, 0, 61, 166, 167, 0, 198, 0, 0, 184,
	0, 0, 187, 188, 158, 0, 150, 87, 147, 0,
	165, 165, 116, 0, 117, 118, 119, 0, 135, 0,
	0, 0, 0, 611, 67, 75, 76, 0, 202, 812,
	0, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 812, 0, 0, 812, 603, 604, 605, 606,
	0, 229, 251, 0, 0, 267, 268, 86, 0, 299,
	549, 0, 27, 375, 0, 321, 514, 0, 392, 0,
	412, 395, 451, 317, 0, 137, 137, 492, 137, 141,
	495, 137, 497, 137, 500, 0, 0, 0, 0, 0,
	513, 0, 0, 0, 505, 466, 511, 0, 568, 0,
	560, 550, 562, 564, 0, 30, 0, 556, 0, 543,
	572, 376, 573, 345, 0, 350, 0, 0, 0, 353,
	0, 543, 41, 58, 59, 60, 196, 199, 0, 191,
	137, 185, 186, 160, 0, 152, 153, 154, 155, 156,
	157, 138, 112, 113, 163, 164, 162, 0, 162, 0,
	142, 0, 813, 0, 0, 203, 0, 204, 206, 207,
	208, 0, 270, 271, 289, 531, 327, 452, 396, 455,
	489, 162, 493, 494, 496, 498, 499, 501, 0, 457,
	456, 458, 0, 0, 461, 0, 0, 0, 0, 0,
	509, 34, 0, 0, 35, 0, 565, -2, 0, 0,
	0, 48, 39, 0, 337, 0, 0, 0, 371, 340,
	40, 176, 0, 193, 168, 161, 0, 165, 136, 165,
	0, 0, 65, 77, 78, 0, 0, 533, 0, 490,
	491, 0, 0, 0, 0, 0, 482, 465, 506, 569,
	570, 0, 563, 0, -2, 0, 558, 557, 0, 346,
	372, 373, 374, 336, 175, 177, 0, 182, 0, 192,
	173, 0, 170, 172, 159, 125, 126, 140, 143, 0,
	0, 29, 0, 0, 502, 459, 460, 462, 463, 0,
	0, 0, 0, 553, 30, 0, 338, 178, 179, 0,
	183, 181, 84, 0, 169, 171, 71, 0, 223, 0,
	534, 532, 464, 0, 0, 0, 561, -2, 559, 180,
	174, 74, 222, 0, 0, 483, 0, 486, 205, 224,
	0, 484, 0, 0, 0, 0, 0, 485, 0, 0,
	225, 226,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	53, 55, 99, 97, 54, 98, 111, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 256,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:319
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:324
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:325
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:420
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:430
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:466
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:474
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:479
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:483
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:559
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:564
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:594
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:625
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:637
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:666
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:909
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:930
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:934
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:957
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			if yyDollar[1].colIdent.NeedQuotes() {
				yyVAL.str = "'" + yyDollar[1].colIdent.String() + "'"
			} else {
				yyVAL.str = yyDollar[1].colIdent.String()
			}

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1221
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1225
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1256
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1261
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1289
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1305
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1309
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1321
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1329
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1334
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1428
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1472
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = "extended "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = "full "
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1522
		{
			yyVAL.showFilter = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1536
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = SessionStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = GlobalStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Begin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Commit{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Rollback{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1673
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			setAllowComments(yylex, true)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1688
		{
			yyVAL.bytes2 = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.str = UnionStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = UnionAllStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = UnionDistinctStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1711
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = SQLCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1724
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = DistinctStr
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = StraightJoinHint
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1742
		{
			yyVAL.selectExprs = nil
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1756
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1770
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1774
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1809
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1837
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1870
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1890
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1894
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1896
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.str = JoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = JoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = JoinStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.str = StraightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = LeftJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = LeftJoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = RightJoinStr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = RightJoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = NaturalJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1999
		{
			yyVAL.indexHints = nil
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2003
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2007
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2011
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2112
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = IsNullStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = IsNotNullStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = IsTrueStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = IsNotTrueStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = IsFalseStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = IsNotFalseStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = EqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = LessThanStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = GreaterThanStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.str = LessEqualStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = GreaterEqualStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = NotEqualStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 465:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.str = BooleanModeStr
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2510
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = QueryExpansionStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = nil
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2598
		{
			yyVAL.str = string("")
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2618
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2637
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2641
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &NullVal{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2729
		{
			yyVAL.exprs = nil
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2733
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2747
		{
			yyVAL.orderBy = nil
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2751
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2767
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2772
		{
			yyVAL.str = AscScr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.str = AscScr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.str = DescScr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2785
		{
			yyVAL.limit = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2789
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2793
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			yyVAL.str = ""
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.str = ForUpdateStr
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2810
		{
			yyVAL.str = ShareModeStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2836
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2840
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2844
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2863
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.updateExprs = nil
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2872
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2898
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.returning = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2923
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2956
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.bytes = []byte("charset")
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = &Default{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2991
		{
			yyVAL.byt = 0
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.byt = 1
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = ""
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = IgnoreStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3041
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), true)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(yyDollar[1].colIdent.String(), yyDollar[1].colIdent.NeedQuotes())
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			decNesting(yylex)
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3312
		{
			forceEOF(yylex)
		}
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3317
		{
			forceEOF(yylex)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			forceEOF(yylex)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
