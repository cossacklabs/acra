// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	returning         Returning
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575
const RETURNING = 57576

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 262,
	152, 262,
	-2, 252,
	-1, 238,
	110, 590,
	-2, 487,
	-1, 256,
	53, 587,
	110, 587,
	111, 587,
	112, 587,
	-2, 490,
	-1, 307,
	81, 748,
	-2, 58,
	-1, 308,
	81, 709,
	-2, 59,
	-1, 313,
	81, 693,
	-2, 552,
	-1, 315,
	81, 730,
	-2, 554,
	-1, 574,
	52, 41,
	54, 41,
	-2, 43,
	-1, 706,
	110, 592,
	-2, 589,
	-1, 707,
	110, 590,
	-2, 588,
	-1, 753,
	110, 590,
	-2, 487,
	-1, 911,
	5, 28,
	-2, 392,
	-1, 936,
	5, 27,
	-2, 524,
	-1, 1162,
	5, 28,
	-2, 525,
	-1, 1208,
	5, 27,
	-2, 527,
	-1, 1270,
	5, 28,
	-2, 528,
}

const yyPrivate = 57344

const yyLast = 9110

var yyAct = [...]int{

	238, 853, 1261, 522, 452, 770, 644, 1219, 1068, 1096,
	241, 788, 267, 806, 997, 567, 810, 847, 521, 3,
	1069, 1065, 809, 771, 312, 569, 955, 211, 903, 1042,
	1000, 74, 1168, 732, 939, 186, 217, 739, 186, 53,
	988, 584, 759, 736, 944, 454, 709, 819, 843, 409,
	268, 47, 460, 583, 306, 767, 571, 556, 294, 474,
	885, 466, 186, 186, 311, 303, 216, 226, 186, 738,
	414, 212, 213, 214, 215, 301, 536, 292, 52, 1157,
	293, 1290, 1280, 1288, 240, 1268, 1286, 854, 1279, 1267,
	1060, 1154, 413, 833, 434, 1228, 1090, 230, 47, 182,
	178, 179, 180, 1091, 1092, 585, 222, 586, 244, 801,
	827, 449, 298, 1243, 486, 485, 495, 496, 488, 489,
	490, 491, 492, 493, 494, 487, 57, 673, 497, 1102,
	1103, 1104, 979, 963, 674, 826, 962, 1107, 1105, 964,
	802, 803, 1180, 1043, 834, 1195, 1143, 1141, 210, 445,
	446, 59, 60, 61, 62, 63, 1287, 1285, 436, 1262,
	438, 1021, 422, 768, 1226, 789, 791, 1220, 423, 416,
	297, 176, 821, 1045, 652, 175, 186, 176, 186, 870,
	643, 1222, 821, 821, 186, 435, 437, 954, 953, 952,
	186, 419, 1018, 869, 311, 311, 311, 311, 1020, 311,
	410, 411, 189, 177, 1248, 1047, 311, 1051, 181, 1046,
	973, 1044, 512, 513, 1165, 1029, 1049, 919, 897, 680,
	874, 477, 429, 487, 807, 1048, 497, 497, 677, 473,
	868, 1253, 1111, 476, 1121, 880, 760, 942, 1050, 1052,
	790, 463, 472, 471, 440, 440, 440, 440, 1221, 440,
	490, 491, 492, 493, 494, 487, 440, 1062, 497, 473,
	462, 587, 1227, 1225, 647, 820, 433, 834, 471, 1244,
	818, 816, 977, 47, 817, 820, 820, 1025, 865, 862,
	863, 1008, 861, 1112, 473, 760, 1266, 926, 506, 507,
	509, 1019, 186, 1017, 894, 895, 896, 1106, 716, 186,
	186, 186, 1256, 468, 511, 311, 916, 872, 875, 1006,
	1272, 589, 714, 715, 713, 881, 174, 50, 1186, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 712, 535,
	537, 537, 537, 537, 537, 537, 537, 537, 545, 546,
	547, 548, 867, 425, 426, 427, 823, 1185, 508, 568,
	464, 824, 683, 684, 1024, 472, 471, 538, 539, 540,
	541, 542, 543, 544, 866, 992, 698, 700, 701, 415,
	581, 699, 473, 991, 1007, 733, 575, 291, 734, 1012,
	1009, 1002, 1003, 1010, 1005, 1004, 495, 496, 488, 489,
	490, 491, 492, 493, 494, 487, 1011, 980, 497, 472,
	471, 871, 1014, 1273, 1254, 472, 471, 297, 915, 1202,
	914, 1183, 1064, 311, 873, 453, 473, 1129, 1251, 186,
	186, 311, 473, 186, 989, 1099, 186, 472, 471, 1098,
	186, 974, 311, 311, 311, 311, 311, 311, 311, 311,
	965, 417, 418, 856, 473, 735, 311, 311, 1276, 453,
	1232, 186, 1212, 1259, 661, 488, 489, 490, 491, 492,
	493, 494, 487, 440, 658, 497, 689, 1231, 686, 657,
	186, 440, 1212, 453, 1212, 1213, 476, 648, 707, 646,
	679, 641, 440, 440, 440, 440, 440, 440, 440, 440,
	659, 1177, 1176, 710, 1087, 453, 440, 440, 431, 685,
	1164, 453, 706, 486, 485, 495, 496, 488, 489, 490,
	491, 492, 493, 494, 487, 424, 678, 497, 1118, 1117,
	23, 743, 1114, 1115, 1114, 1113, 744, 746, 909, 453,
	753, 753, 687, 472, 471, 702, 753, 410, 704, 232,
	752, 755, 762, 747, 934, 578, 761, 935, 1108, 904,
	473, 186, 23, 753, 186, 186, 186, 186, 186, 1032,
	47, 553, 453, 772, 745, 453, 186, 50, 21, 186,
	593, 592, 787, 186, 795, 524, 577, 186, 186, 1207,
	1066, 311, 921, 940, 941, 918, 579, 747, 577, 711,
	764, 941, 796, 311, 757, 748, 749, 740, 742, 50,
	54, 756, 909, 940, 298, 298, 298, 298, 298, 745,
	1160, 553, 236, 774, 775, 763, 777, 765, 766, 568,
	23, 792, 785, 1120, 221, 920, 553, 298, 917, 793,
	794, 552, 1116, 940, 773, 798, 799, 776, 966, 909,
	800, 909, 580, 813, 186, 681, 223, 311, 50, 311,
	1190, 828, 441, 186, 645, 553, 186, 311, 849, 848,
	1081, 969, 297, 297, 297, 297, 297, 50, 264, 257,
	741, 259, 260, 261, 262, 945, 946, 297, 258, 263,
	844, 707, 839, 838, 65, 297, 845, 846, 558, 561,
	562, 563, 559, 50, 560, 564, 851, 440, 693, 440,
	835, 836, 837, 1101, 1066, 706, 993, 440, 948, 655,
	450, 951, 829, 830, 831, 832, 309, 782, 780, 950,
	779, 778, 783, 781, 227, 228, 710, 1284, 840, 841,
	842, 887, 1278, 784, 886, 562, 563, 1028, 882, 1283,
	906, 907, 892, 467, 891, 984, 591, 432, 976, 1258,
	1158, 455, 911, 912, 913, 1257, 898, 465, 457, 461,
	899, 922, 893, 456, 1191, 1205, 928, 970, 929, 930,
	931, 932, 858, 654, 566, 478, 467, 558, 561, 562,
	563, 559, 218, 560, 564, 54, 936, 945, 946, 224,
	225, 890, 1237, 956, 219, 1236, 186, 1193, 941, 889,
	469, 925, 1245, 1181, 676, 56, 58, 908, 523, 576,
	311, 958, 51, 1, 1156, 510, 855, 534, 937, 938,
	996, 949, 711, 864, 1260, 1218, 967, 923, 1095, 957,
	815, 959, 808, 408, 64, 1252, 814, 1224, 1179, 822,
	978, 825, 960, 1100, 1255, 975, 298, 983, 458, 985,
	986, 987, 994, 311, 598, 311, 439, 596, 514, 515,
	516, 517, 518, 519, 520, 971, 972, 597, 595, 600,
	599, 594, 197, 304, 565, 588, 850, 470, 311, 76,
	990, 186, 186, 185, 66, 1016, 209, 1015, 999, 186,
	860, 1023, 672, 1013, 879, 448, 199, 505, 311, 888,
	961, 310, 1073, 440, 297, 682, 459, 1235, 233, 1192,
	185, 185, 924, 1040, 533, 758, 185, 243, 697, 255,
	707, 252, 254, 981, 982, 253, 688, 933, 440, 1036,
	479, 242, 234, 296, 549, 753, 557, 555, 1074, 956,
	1067, 753, 1035, 554, 706, 772, 1054, 1041, 1070, 1053,
	947, 772, 943, 295, 1031, 1153, 1072, 309, 1242, 692,
	1086, 25, 55, 1061, 1077, 1075, 229, 311, 19, 311,
	1097, 18, 17, 20, 16, 15, 14, 29, 13, 1076,
	12, 11, 10, 9, 8, 1094, 1071, 7, 47, 1093,
	6, 5, 4, 1089, 186, 1109, 1110, 1088, 220, 22,
	2, 0, 1123, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 695, 696, 0, 0, 1125, 186, 0, 0, 0,
	0, 0, 1128, 0, 185, 0, 185, 0, 1122, 0,
	311, 0, 185, 186, 0, 0, 0, 0, 185, 0,
	1133, 1124, 0, 0, 1127, 0, 0, 1135, 1132, 0,
	0, 442, 443, 444, 0, 447, 0, 0, 1144, 1145,
	1146, 0, 451, 1149, 523, 1139, 1131, 750, 751, 0,
	0, 0, 0, 0, 0, 0, 1161, 1162, 1163, 0,
	1166, 0, 1169, 298, 1169, 1169, 1169, 186, 1174, 1159,
	0, 0, 708, 0, 311, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	967, 1152, 1173, 1167, 0, 0, 1170, 1171, 1172, 0,
	311, 311, 311, 0, 0, 1175, 0, 805, 0, 0,
	705, 0, 0, 0, 0, 1188, 0, 0, 1189, 0,
	185, 297, 0, 0, 0, 0, 0, 185, 573, 185,
	0, 0, 0, 0, 1136, 1137, 0, 1138, 1201, 0,
	1140, 1204, 1142, 0, 299, 1210, 1211, 0, 0, 0,
	440, 0, 0, 1070, 0, 1214, 1215, 1216, 1097, 0,
	0, 1206, 1208, 0, 0, 1217, 0, 1223, 0, 0,
	0, 1169, 0, 0, 0, 0, 1229, 0, 1230, 184,
	0, 1238, 1239, 1240, 1241, 0, 0, 1182, 1178, 1184,
	0, 1071, 0, 1249, 1209, 0, 1246, 0, 883, 884,
	1070, 461, 0, 1233, 0, 0, 1250, 302, 1247, 0,
	0, 1194, 412, 309, 0, 0, 0, 0, 0, 0,
	0, 1264, 1234, 0, 0, 811, 753, 1265, 0, 1271,
	0, 1269, 1270, 0, 0, 0, 772, 0, 1071, 0,
	47, 0, 0, 1277, 0, 1275, 1274, 185, 185, 642,
	0, 185, 0, 0, 185, 0, 1281, 651, 660, 1282,
	0, 0, 0, 0, 0, 910, 1037, 0, 662, 663,
	664, 665, 666, 667, 668, 669, 1293, 1294, 0, 185,
	927, 0, 670, 671, 0, 0, 486, 485, 495, 496,
	488, 489, 490, 491, 492, 493, 494, 487, 185, 0,
	497, 0, 0, 0, 0, 0, 660, 900, 901, 902,
	0, 0, 0, 705, 0, 0, 0, 0, 1289, 0,
	420, 0, 421, 23, 24, 48, 26, 27, 428, 0,
	0, 0, 0, 0, 430, 0, 233, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 233, 233, 0, 0, 754, 754,
	233, 0, 0, 0, 754, 0, 37, 0, 0, 0,
	50, 0, 1150, 453, 233, 233, 233, 233, 0, 185,
	0, 754, 185, 185, 185, 185, 185, 0, 0, 0,
	0, 0, 0, 0, 786, 0, 0, 185, 0, 0,
	0, 573, 0, 0, 0, 185, 185, 0, 0, 0,
	486, 485, 495, 496, 488, 489, 490, 491, 492, 493,
	494, 487, 0, 0, 497, 0, 0, 0, 0, 0,
	30, 31, 33, 32, 35, 1008, 551, 0, 0, 0,
	0, 0, 811, 195, 0, 574, 1063, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 1078, 1079, 1006, 0, 1080, 0, 205, 1082, 0,
	38, 39, 185, 40, 41, 0, 0, 0, 0, 0,
	0, 185, 0, 857, 185, 859, 0, 998, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 1038, 1039, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	1055, 1056, 0, 1058, 1059, 0, 0, 0, 190, 0,
	0, 233, 0, 0, 192, 0, 0, 0, 1007, 0,
	1034, 198, 194, 1012, 1009, 1002, 1003, 1010, 1005, 1004,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	1011, 905, 1057, 49, 0, 0, 1001, 0, 196, 0,
	0, 200, 0, 649, 650, 0, 233, 653, 0, 0,
	656, 486, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 0, 1155, 497, 233, 0, 0, 191,
	0, 523, 1151, 0, 0, 675, 0, 0, 0, 811,
	0, 811, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 0, 694, 497, 193, 0, 201, 202,
	203, 204, 208, 481, 185, 484, 0, 207, 206, 0,
	1134, 498, 499, 500, 501, 502, 503, 504, 0, 482,
	483, 480, 486, 485, 495, 496, 488, 489, 490, 491,
	492, 493, 494, 487, 0, 0, 497, 0, 0, 1147,
	453, 0, 1034, 0, 0, 486, 485, 495, 496, 488,
	489, 490, 491, 492, 493, 494, 487, 523, 0, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 769, 0, 486, 485, 495,
	496, 488, 489, 490, 491, 492, 493, 494, 487, 1026,
	1027, 497, 0, 0, 1022, 0, 0, 185, 0, 0,
	0, 0, 797, 0, 0, 0, 811, 233, 0, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 233, 0,
	1196, 1197, 0, 1198, 1199, 1200, 0, 0, 660, 0,
	0, 0, 0, 998, 811, 0, 1263, 523, 1148, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 0, 754,
	486, 485, 495, 496, 488, 489, 490, 491, 492, 493,
	494, 487, 0, 0, 497, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 185, 108, 0, 110, 0, 0, 143, 119,
	0, 486, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 0, 185, 497, 0, 75, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 185, 486, 485, 495, 496, 488, 489, 490, 491,
	492, 493, 494, 487, 0, 0, 497, 0, 0, 0,
	0, 0, 1291, 486, 485, 495, 496, 488, 489, 490,
	491, 492, 493, 494, 487, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 573, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	188, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 1187, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 78, 0, 109, 170, 134,
	96, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 397, 387,
	0, 359, 399, 337, 351, 407, 352, 353, 380, 323,
	367, 126, 349, 0, 340, 318, 346, 319, 338, 361,
	94, 364, 336, 389, 370, 108, 405, 110, 375, 0,
	143, 119, 0, 0, 363, 391, 365, 385, 358, 381,
	328, 374, 400, 350, 378, 401, 0, 0, 0, 75,
	0, 0, 77, 812, 0, 0, 0, 0, 1119, 87,
	0, 377, 396, 348, 379, 317, 376, 0, 321, 324,
	406, 394, 343, 344, 968, 0, 0, 0, 0, 0,
	1126, 362, 366, 382, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 373, 0, 0, 0, 325,
	322, 0, 360, 0, 0, 0, 327, 0, 342, 383,
	0, 316, 386, 392, 357, 187, 395, 355, 354, 398,
	132, 0, 0, 146, 99, 98, 107, 390, 339, 347,
	90, 345, 138, 128, 158, 372, 129, 137, 111, 150,
	133, 157, 188, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 320, 0, 144, 160, 173, 335, 393,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	331, 334, 329, 330, 368, 369, 402, 403, 404, 384,
	326, 0, 332, 333, 0, 388, 371, 78, 0, 109,
	170, 134, 96, 161, 397, 387, 0, 359, 399, 337,
	351, 407, 352, 353, 380, 323, 367, 126, 349, 0,
	340, 318, 346, 319, 338, 361, 94, 364, 336, 389,
	370, 108, 405, 110, 375, 0, 143, 119, 0, 0,
	363, 391, 365, 385, 358, 381, 328, 374, 400, 350,
	378, 401, 0, 0, 0, 75, 0, 0, 77, 812,
	0, 0, 0, 0, 0, 87, 0, 377, 396, 348,
	379, 317, 376, 0, 321, 324, 406, 394, 343, 344,
	0, 0, 0, 0, 0, 0, 0, 362, 366, 382,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 373, 0, 0, 0, 325, 322, 0, 360, 0,
	0, 0, 327, 0, 342, 383, 0, 316, 386, 392,
	357, 187, 395, 355, 354, 398, 132, 0, 0, 146,
	99, 98, 107, 390, 339, 347, 90, 345, 138, 128,
	158, 372, 129, 137, 111, 150, 133, 157, 188, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 320,
	0, 144, 160, 173, 335, 393, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 331, 334, 329, 330,
	368, 369, 402, 403, 404, 384, 326, 0, 332, 333,
	0, 388, 371, 78, 0, 109, 170, 134, 96, 161,
	397, 387, 0, 359, 399, 337, 351, 407, 352, 353,
	380, 323, 367, 126, 349, 0, 340, 318, 346, 319,
	338, 361, 94, 364, 336, 389, 370, 108, 405, 110,
	375, 0, 143, 119, 0, 0, 363, 391, 365, 385,
	358, 381, 328, 374, 400, 350, 378, 401, 50, 0,
	0, 75, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 87, 0, 377, 396, 348, 379, 317, 376, 0,
	321, 324, 406, 394, 343, 344, 0, 0, 0, 0,
	0, 0, 0, 362, 366, 382, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 373, 0, 0,
	0, 325, 322, 0, 360, 0, 0, 0, 327, 0,
	342, 383, 0, 316, 386, 392, 357, 187, 395, 355,
	354, 398, 132, 0, 0, 146, 99, 98, 107, 390,
	339, 347, 90, 345, 138, 128, 158, 372, 129, 137,
	111, 150, 133, 157, 188, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 320, 0, 144, 160, 173,
	335, 393, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 331, 334, 329, 330, 368, 369, 402, 403,
	404, 384, 326, 0, 332, 333, 0, 388, 371, 78,
	0, 109, 170, 134, 96, 161, 397, 387, 0, 359,
	399, 337, 351, 407, 352, 353, 380, 323, 367, 126,
	349, 0, 340, 318, 346, 319, 338, 361, 94, 364,
	336, 389, 370, 108, 405, 110, 375, 0, 143, 119,
	0, 0, 363, 391, 365, 385, 358, 381, 328, 374,
	400, 350, 378, 401, 0, 0, 0, 75, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 0, 377,
	396, 348, 379, 317, 376, 0, 321, 324, 406, 394,
	343, 344, 0, 0, 0, 0, 0, 0, 0, 362,
	366, 382, 356, 0, 0, 0, 0, 0, 0, 1033,
	0, 341, 0, 373, 0, 0, 0, 325, 322, 0,
	360, 0, 0, 0, 327, 0, 342, 383, 0, 316,
	386, 392, 357, 187, 395, 355, 354, 398, 132, 0,
	0, 146, 99, 98, 107, 390, 339, 347, 90, 345,
	138, 128, 158, 372, 129, 137, 111, 150, 133, 157,
	188, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 320, 0, 144, 160, 173, 335, 393, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 331, 334,
	329, 330, 368, 369, 402, 403, 404, 384, 326, 0,
	332, 333, 0, 388, 371, 78, 0, 109, 170, 134,
	96, 161, 397, 387, 0, 359, 399, 337, 351, 407,
	352, 353, 380, 323, 367, 126, 349, 0, 340, 318,
	346, 319, 338, 361, 94, 364, 336, 389, 370, 108,
	405, 110, 375, 0, 143, 119, 0, 0, 363, 391,
	365, 385, 358, 381, 328, 374, 400, 350, 378, 401,
	0, 0, 0, 75, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 87, 0, 377, 396, 348, 379, 317,
	376, 0, 321, 324, 406, 394, 343, 344, 0, 0,
	0, 0, 0, 0, 0, 362, 366, 382, 356, 0,
	0, 0, 0, 0, 0, 703, 0, 341, 0, 373,
	0, 0, 0, 325, 322, 0, 360, 0, 0, 0,
	327, 0, 342, 383, 0, 316, 386, 392, 357, 187,
	395, 355, 354, 398, 132, 0, 0, 146, 99, 98,
	107, 390, 339, 347, 90, 345, 138, 128, 158, 372,
	129, 137, 111, 150, 133, 157, 188, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 320, 0, 144,
	160, 173, 335, 393, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 331, 334, 329, 330, 368, 369,
	402, 403, 404, 384, 326, 0, 332, 333, 0, 388,
	371, 78, 0, 109, 170, 134, 96, 161, 397, 387,
	0, 359, 399, 337, 351, 407, 352, 353, 380, 323,
	367, 126, 349, 0, 340, 318, 346, 319, 338, 361,
	94, 364, 336, 389, 370, 108, 405, 110, 375, 0,
	143, 119, 0, 0, 363, 391, 365, 385, 358, 381,
	328, 374, 400, 350, 378, 401, 0, 0, 0, 75,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 87,
	0, 377, 396, 348, 379, 317, 376, 0, 321, 324,
	406, 394, 343, 344, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 382, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 373, 0, 0, 0, 325,
	322, 0, 360, 0, 0, 0, 327, 0, 342, 383,
	0, 316, 386, 392, 357, 187, 395, 355, 354, 398,
	132, 0, 0, 146, 99, 98, 107, 390, 339, 347,
	90, 345, 138, 128, 158, 372, 129, 137, 111, 150,
	133, 157, 188, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 320, 0, 144, 160, 173, 335, 393,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	331, 334, 329, 330, 368, 369, 402, 403, 404, 384,
	326, 0, 332, 333, 0, 388, 371, 78, 0, 109,
	170, 134, 96, 161, 397, 387, 0, 359, 399, 337,
	351, 407, 352, 353, 380, 323, 367, 126, 349, 0,
	340, 318, 346, 319, 338, 361, 94, 364, 336, 389,
	370, 108, 405, 110, 375, 0, 143, 119, 0, 0,
	363, 391, 365, 385, 358, 381, 328, 374, 400, 350,
	378, 401, 0, 0, 0, 75, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 87, 0, 377, 396, 348,
	379, 317, 376, 0, 321, 324, 406, 394, 343, 344,
	0, 0, 0, 0, 0, 0, 0, 362, 366, 382,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 373, 0, 0, 0, 325, 322, 0, 360, 0,
	0, 0, 327, 0, 342, 383, 0, 316, 386, 392,
	357, 187, 395, 355, 354, 398, 132, 0, 0, 146,
	99, 98, 107, 390, 339, 347, 90, 345, 138, 128,
	158, 372, 129, 137, 111, 150, 133, 157, 188, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 314, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 320,
	0, 144, 160, 173, 335, 393, 166, 167, 168, 169,
	0, 0, 0, 315, 313, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 331, 334, 329, 330,
	368, 369, 402, 403, 404, 384, 326, 0, 332, 333,
	0, 388, 371, 78, 0, 109, 170, 134, 96, 161,
	397, 387, 0, 359, 399, 337, 351, 407, 352, 353,
	380, 323, 367, 126, 349, 0, 340, 318, 346, 319,
	338, 361, 94, 364, 336, 389, 370, 108, 405, 110,
	375, 0, 143, 119, 0, 0, 363, 391, 365, 385,
	358, 381, 328, 374, 400, 350, 378, 401, 0, 0,
	0, 75, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 87, 0, 377, 396, 348, 379, 317, 376, 0,
	321, 324, 406, 394, 343, 344, 0, 0, 0, 0,
	0, 0, 0, 362, 366, 382, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 373, 0, 0,
	0, 325, 322, 0, 360, 0, 0, 0, 327, 0,
	342, 383, 0, 316, 386, 392, 357, 187, 395, 355,
	354, 398, 132, 0, 0, 146, 99, 98, 107, 390,
	339, 347, 90, 345, 138, 128, 158, 372, 129, 137,
	111, 150, 133, 157, 188, 165, 148, 164, 79, 147,
	582, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 314, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 320, 0, 144, 160, 173,
	335, 393, 166, 167, 168, 169, 0, 0, 0, 315,
	313, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 331, 334, 329, 330, 368, 369, 402, 403,
	404, 384, 326, 0, 332, 333, 0, 388, 371, 78,
	0, 109, 170, 134, 96, 161, 397, 387, 0, 359,
	399, 337, 351, 407, 352, 353, 380, 323, 367, 126,
	349, 0, 340, 318, 346, 319, 338, 361, 94, 364,
	336, 389, 370, 108, 405, 110, 375, 0, 143, 119,
	0, 0, 363, 391, 365, 385, 358, 381, 328, 374,
	400, 350, 378, 401, 0, 0, 0, 75, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 0, 377,
	396, 348, 379, 317, 376, 0, 321, 324, 406, 394,
	343, 344, 0, 0, 0, 0, 0, 0, 0, 362,
	366, 382, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 373, 0, 0, 0, 325, 322, 0,
	360, 0, 0, 0, 327, 0, 342, 383, 0, 316,
	386, 392, 357, 187, 395, 355, 354, 398, 132, 0,
	0, 146, 99, 98, 107, 390, 339, 347, 90, 345,
	138, 128, 158, 372, 129, 137, 111, 150, 133, 157,
	188, 165, 148, 164, 79, 147, 305, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 314,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 320, 0, 144, 160, 173, 335, 393, 166, 167,
	168, 169, 0, 0, 0, 315, 313, 308, 307, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 331, 334,
	329, 330, 368, 369, 402, 403, 404, 384, 326, 0,
	332, 333, 0, 388, 371, 78, 0, 109, 170, 134,
	96, 161, 126, 0, 0, 737, 0, 239, 0, 0,
	0, 94, 0, 237, 0, 0, 108, 278, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 269, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	75, 264, 257, 256, 259, 260, 261, 262, 0, 0,
	87, 258, 263, 265, 266, 0, 0, 235, 250, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 231, 0, 0, 0, 289, 0, 249, 0,
	0, 245, 246, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 287,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 188, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 279, 288, 285, 286, 283, 284, 282, 281, 280,
	290, 271, 272, 273, 274, 276, 0, 275, 78, 0,
	109, 170, 134, 96, 161, 126, 0, 0, 0, 0,
	239, 0, 0, 0, 94, 0, 237, 0, 0, 108,
	278, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	269, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 75, 264, 257, 256, 259, 260, 261,
	262, 0, 0, 87, 258, 263, 265, 266, 0, 0,
	235, 250, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 1203, 0, 0, 0, 289,
	0, 249, 0, 0, 245, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 287, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 188, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 279, 288, 285, 286, 283, 284,
	282, 281, 280, 290, 271, 272, 273, 274, 276, 0,
	275, 78, 0, 109, 170, 134, 96, 161, 126, 0,
	0, 0, 0, 239, 0, 0, 0, 94, 0, 237,
	0, 0, 108, 278, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 269, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 453, 75, 264, 257, 256,
	259, 260, 261, 262, 0, 0, 87, 258, 263, 265,
	266, 0, 0, 235, 250, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 289, 0, 249, 0, 0, 245, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 287, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 188,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 279, 288, 285,
	286, 283, 284, 282, 281, 280, 290, 271, 272, 273,
	274, 276, 0, 275, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 239, 0, 0, 0,
	94, 0, 237, 0, 0, 108, 278, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 75,
	264, 257, 256, 259, 260, 261, 262, 0, 0, 87,
	258, 263, 265, 266, 0, 0, 235, 250, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 231, 0, 0, 0, 289, 0, 249, 0, 0,
	245, 246, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 287, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 188, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	279, 288, 285, 286, 283, 284, 282, 281, 280, 290,
	271, 272, 273, 274, 276, 0, 275, 78, 0, 109,
	170, 134, 96, 161, 126, 0, 0, 0, 0, 239,
	0, 0, 0, 94, 0, 237, 0, 0, 108, 278,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 269,
	270, 0, 0, 0, 0, 0, 0, 804, 0, 50,
	0, 0, 75, 264, 257, 256, 259, 260, 261, 262,
	0, 0, 87, 258, 263, 265, 266, 0, 0, 235,
	250, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 0, 0, 0, 0, 289, 0,
	249, 0, 0, 245, 246, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 287, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 188, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 279, 288, 285, 286, 283, 284, 282,
	281, 280, 290, 271, 272, 273, 274, 276, 23, 275,
	78, 0, 109, 170, 134, 96, 161, 0, 0, 0,
	126, 0, 0, 0, 0, 239, 0, 0, 0, 94,
	0, 237, 0, 0, 108, 278, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 75, 264,
	257, 256, 259, 260, 261, 262, 0, 0, 87, 258,
	263, 265, 266, 0, 0, 235, 250, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	0, 0, 0, 0, 289, 0, 249, 0, 0, 245,
	246, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 287, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 188, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 279,
	288, 285, 286, 283, 284, 282, 281, 280, 290, 271,
	272, 273, 274, 276, 0, 275, 78, 0, 109, 170,
	134, 96, 161, 126, 0, 0, 0, 0, 239, 0,
	0, 0, 94, 0, 237, 0, 0, 108, 278, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 269, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 75, 264, 257, 256, 259, 260, 261, 262, 0,
	0, 87, 258, 263, 265, 266, 0, 0, 235, 250,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 0, 0, 0, 0, 289, 0, 249,
	0, 0, 245, 246, 251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	287, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 188, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 279, 288, 285, 286, 283, 284, 282, 281,
	280, 290, 271, 272, 273, 274, 276, 126, 275, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 0, 0,
	0, 108, 278, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 75, 264, 257, 256, 259,
	260, 261, 262, 0, 0, 87, 258, 263, 265, 266,
	0, 0, 0, 250, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 289, 0, 249, 0, 0, 245, 246, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 287, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 1292, 129, 137, 111, 150, 133, 157, 188, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 279, 288, 285, 286,
	283, 284, 282, 281, 280, 290, 271, 272, 273, 274,
	276, 126, 275, 78, 0, 109, 170, 134, 96, 161,
	94, 0, 0, 0, 0, 108, 278, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 75,
	264, 257, 256, 259, 260, 261, 262, 0, 0, 87,
	258, 263, 265, 266, 0, 0, 0, 250, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 0, 0, 0, 0, 289, 0, 249, 0, 0,
	245, 246, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 287, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 188, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	279, 288, 285, 286, 283, 284, 282, 281, 280, 290,
	271, 272, 273, 274, 276, 126, 275, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 67,
	0, 0, 0, 73, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 69, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 109, 170, 134, 96, 161, 126, 0,
	0, 0, 475, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 472, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 188,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	75, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 188, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 77, 690, 0,
	0, 691, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 188, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 109, 170, 134, 96, 161, 126,
	0, 0, 0, 572, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	188, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 78, 0, 109, 170, 134,
	96, 161, 94, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 75, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 188, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 590, 0,
	0, 108, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 188, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 109, 170, 134, 96, 161,
	126, 0, 0, 0, 572, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 570, 137, 111, 150, 133,
	157, 188, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 615, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 126, 78, 0, 109, 170,
	134, 96, 161, 550, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 87, 0, 629, 630, 631, 632, 633,
	634, 635, 0, 636, 637, 638, 639, 640, 617, 618,
	619, 620, 601, 602, 0, 0, 604, 0, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 621, 622,
	623, 624, 625, 626, 627, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 188, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 126,
	0, 78, 0, 109, 170, 134, 96, 161, 94, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	188, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 78, 0, 109, 170, 134,
	96, 161, 94, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 187, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 188, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 0, 0,
	0, 108, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 188, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 109, 170, 134, 96, 161,
}
var yyPact = [...]int{

	1337, -1000, -174, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 770, 800, -1000, -1000, -1000, -1000, -1000, -1000, 631,
	6367, 53, 83, -20, 8635, 82, 1431, 8859, -1000, -7,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 614, -1000, -1000,
	-1000, -1000, -1000, 765, 778, 640, 769, 685, -1000, 4993,
	47, 7505, 8411, 4061, -1000, 481, 80, 8859, -144, 8859,
	44, 44, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 71, 8859, -1000, 8859, 43, 459,
	43, 43, 43, 8859, -1000, 112, -1000, -1000, -1000, 8859,
	442, 717, 38, 2585, 2585, 2585, 2585, -2, 2585, -101,
	659, -1000, -1000, -1000, -1000, 2585, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 360, 732, 5695, 5695,
	770, -1000, 614, -1000, -1000, -1000, 722, -1000, -1000, 238,
	789, -1000, 6600, 111, -1000, 5695, 1570, 595, 595, 595,
	240, 101, -1000, -1000, -1000, 6143, 6143, 6143, 6143, 6143,
	6143, 6143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5462, 595,
	595, 595, 595, 595, 595, 595, 595, 5695, 595, 595,
	595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
	595, 8187, 601, 647, -1000, -1000, -1000, 752, 6824, 7962,
	8859, 534, -1000, 588, 3815, -113, -1000, -1000, -1000, 180,
	7729, -1000, -1000, -1000, 716, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 516, -1000,
	8097, 425, 2585, 58, 602, 423, 191, 421, 8859, 8859,
	2585, 51, 8859, 750, 658, 8859, 413, 408, -1000, 3323,
	-1000, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, -1000,
	-1000, -1000, -1000, -1000, -1000, 2585, 2585, -1000, -79, -1000,
	8859, -1000, -1000, -1000, -1000, 795, 137, 462, 109, 591,
	-1000, 328, 765, 360, 685, 7048, 656, -1000, -1000, 8859,
	-1000, 5695, 5695, 298, -1000, 8859, -1000, 3077, 141, 6143,
	264, 223, 6143, 6143, 6143, 6143, 6143, 6143, 6143, 6143,
	6143, 6143, 6143, 6143, 6143, 6143, 6143, 319, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 389, 4294, -1000, 614,
	-1000, -1000, 611, 611, 121, 121, 121, 121, 121, 121,
	1811, 360, 510, 171, 5462, 4993, 4993, 5695, 5695, 8859,
	8859, 4993, 755, 159, 171, 8859, -1000, 360, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4993, 4993, 4993, 4993, 20,
	8859, -1000, 8859, 7505, 7505, 7505, 7505, 7505, -1000, 680,
	679, -1000, 677, 676, 692, 8859, -1000, 507, 6824, 116,
	595, -1000, 8859, -1000, 20, 522, 7505, 8859, -1000, -1000,
	3569, 588, -113, 586, -1000, -110, -81, 5226, 118, -1000,
	-1000, -1000, 2339, 144, 278, -68, -1000, -1000, -1000, 598,
	-1000, 598, 598, 598, 598, -34, -34, -34, -34, -1000,
	-1000, -1000, -1000, -1000, 630, 629, -1000, 598, 598, 598,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 627, 627, 627, 606,
	606, 644, -1000, 8859, -160, 387, 2585, 749, 2585, -1000,
	164, -1000, 8859, -1000, -1000, 8859, 2585, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 224, -1000, -1000, -1000, -1000, 701, 5695, 5695,
	3323, 5695, -1000, -1000, -1000, 732, -1000, 755, 780, -1000,
	711, 709, 4993, -1000, -1000, 141, 196, -1000, -1000, 226,
	-1000, -1000, -1000, -1000, 108, 595, -1000, -1000, 1790, -1000,
	-1000, -1000, -1000, 264, 6143, 6143, 6143, 411, 1790, 1499,
	292, 1529, 121, 152, 152, 120, 120, 120, 120, 120,
	359, 359, -1000, -1000, -1000, 360, 360, 4993, 587, -1000,
	240, -1000, 240, -1000, -1000, 5695, -1000, 360, 474, 474,
	356, 284, 574, -1000, 107, 571, 474, 4993, 208, -1000,
	5695, 360, -1000, 474, 360, 474, 474, 514, 595, -1000,
	579, -1000, 156, 647, 624, 657, 736, -1000, -1000, -1000,
	-1000, 678, -1000, 670, -1000, -1000, -1000, -1000, -1000, 68,
	67, 66, 8859, -1000, 786, 7505, 572, -1000, -1000, 586,
	-113, -87, -1000, -1000, -1000, 171, -1000, 384, 584, 2093,
	-1000, -1000, -1000, -1000, -1000, 608, 739, 155, 154, 375,
	-1000, -1000, 719, -1000, 204, -72, -1000, -1000, 337, -34,
	-34, -1000, -1000, 118, 715, 118, 118, 118, 365, 365,
	-1000, -1000, -1000, -1000, 313, -1000, -1000, -1000, 305, -1000,
	655, 8859, 2585, -1000, 3323, -1000, -1000, -1000, -1000, -1000,
	-1000, 1427, 253, 170, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18, -1000, 2585, -1000, 265,
	8859, 8859, 699, 171, 171, 105, -1000, -1000, 8859, -1000,
	-1000, -1000, -1000, 548, -1000, -1000, -1000, 2831, 4993, -1000,
	411, 1790, 1214, -1000, 6143, 6143, -1000, -1000, 474, 4993,
	171, -1000, -1000, -1000, 36, 319, 36, 6143, 6143, 3323,
	6143, 6143, -154, 585, 177, -1000, 5695, 334, -1000, -1000,
	-1000, -1000, -1000, 653, 8859, 595, -1000, 6824, 8859, 770,
	8859, 5695, 5695, -1000, -1000, 5695, 607, -1000, 5695, -1000,
	-1000, -1000, 595, 595, 595, 440, -1000, 770, 572, -1000,
	-1000, -1000, -124, -121, -1000, -1000, 2339, -1000, 2339, 8859,
	-1000, 373, 369, -1000, -1000, 652, 70, -1000, -1000, -1000,
	493, 118, 118, -1000, 176, -1000, -1000, -1000, 470, -1000,
	468, 578, 464, 8859, -1000, -1000, 569, -1000, 153, -1000,
	-1000, 8859, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8859, 8859, -1000, -1000, -1000, -1000,
	-1000, 8859, -1000, -1000, 358, 5695, -1000, -1000, -1000, 3323,
	-1000, 786, 7505, -1000, -1000, 360, -1000, 6143, 1790, 1790,
	-1000, -1000, 360, 598, 598, -1000, 598, 606, -1000, 598,
	-16, 598, -17, 360, 360, 1625, 1759, -1000, 1338, 1593,
	595, -151, -1000, 171, 5695, -172, 723, 529, 556, -1000,
	-1000, 4760, 360, 446, 104, 440, 765, -1000, 171, 171,
	171, 8859, 171, 8859, 8859, 8859, 7281, 8859, 765, -1000,
	-1000, -1000, -1000, 2093, -1000, 437, -1000, 598, -1000, -1000,
	-58, 794, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -34, 352, -34, 287, -1000, 258, 2585,
	3323, 2339, -1000, 597, -1000, -1000, -1000, -1000, 738, -1000,
	171, 784, 557, -1000, 1790, -1000, -1000, 89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6143, 6143, -1000,
	6143, 6143, 6143, 360, 350, 171, -1000, 4527, 737, -1000,
	595, -1000, -1000, 546, 8859, 8859, -1000, -1000, 420, -1000,
	418, 418, 418, 116, -1000, -1000, 115, 8859, -1000, 136,
	-1000, -132, 118, -1000, 118, 412, 395, -1000, -1000, -1000,
	8859, 595, 781, 776, -1000, -1000, 1698, 1698, 1698, 1698,
	22, -1000, -1000, -1000, 555, 793, -1000, 595, -1000, 614,
	94, -1000, 8859, -1000, -1000, -1000, -1000, -1000, 115, -1000,
	362, 150, 345, -1000, 236, 727, -1000, 721, -1000, -1000,
	-1000, -1000, -1000, 398, 16, -1000, 5695, 5695, -1000, -1000,
	-1000, -1000, 360, 41, -163, 8859, 556, 360, 8859, -1000,
	-1000, -1000, 250, -1000, -1000, -1000, 344, -1000, -1000, 602,
	394, -1000, 8859, 171, 555, -1000, 694, -158, -167, 549,
	-1000, -1000, -1000, -1000, -160, -1000, 16, 706, -1000, 689,
	-1000, -1000, -1000, 12, -161, 10, -165, 595, -168, 5919,
	-1000, 1698, 360, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1000, 18, 568, 999, 998, 992, 991, 990, 987,
	984, 983, 982, 981, 980, 978, 977, 976, 975, 974,
	973, 972, 971, 968, 126, 966, 962, 961, 61, 959,
	67, 958, 955, 28, 69, 43, 37, 539, 954, 15,
	80, 58, 953, 44, 952, 950, 75, 943, 57, 937,
	936, 1164, 934, 933, 11, 34, 932, 931, 930, 927,
	84, 612, 926, 925, 922, 921, 919, 918, 46, 3,
	8, 12, 20, 917, 108, 10, 915, 42, 914, 912,
	909, 907, 39, 906, 52, 905, 36, 45, 902, 32,
	55, 26, 21, 5, 65, 53, 901, 23, 54, 41,
	900, 899, 316, 897, 896, 895, 894, 892, 891, 162,
	369, 890, 887, 885, 884, 24, 879, 0, 652, 59,
	877, 876, 875, 848, 60, 56, 25, 874, 27, 856,
	33, 873, 872, 29, 871, 870, 869, 868, 867, 857,
	854, 110, 845, 844, 843, 93, 13, 841, 840, 48,
	17, 839, 838, 837, 40, 49, 836, 47, 835, 834,
	833, 832, 22, 16, 830, 9, 828, 7, 825, 824,
	2, 823, 14, 820, 1, 816, 6, 30, 815, 814,
	813, 812, 50, 4, 809, 806, 76,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 184,
	184, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 136, 136, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 154, 154, 141,
	141, 149, 149, 150, 150, 150, 147, 147, 148, 148,
	151, 151, 151, 142, 142, 142, 142, 142, 142, 142,
	144, 144, 152, 152, 145, 145, 145, 146, 146, 153,
	153, 153, 153, 153, 143, 143, 156, 156, 168, 168,
	167, 167, 167, 158, 158, 164, 164, 164, 164, 164,
	157, 157, 166, 166, 165, 161, 161, 161, 162, 162,
	162, 163, 163, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 171, 169, 169, 170, 170, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	107, 107, 104, 104, 105, 105, 106, 106, 106, 108,
	108, 108, 132, 132, 132, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 185, 24, 25, 25,
	26, 26, 26, 30, 30, 30, 28, 28, 29, 29,
	35, 35, 34, 34, 36, 36, 36, 36, 120, 120,
	120, 119, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 127, 127, 126,
	126, 126, 125, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 186, 186, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 130, 130, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	178, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 179, 179, 179, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 122, 122, 101, 101, 109,
	109, 110, 110, 102, 102, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 112, 112, 112, 113, 113,
	114, 114, 114, 121, 121, 117, 117, 117, 118, 118,
	123, 124, 124, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 182, 183, 128, 129, 129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 8, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 0, 2, 2, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	113, 114, 116, 115, 141, 117, 134, 49, 153, 154,
	156, 157, 25, 135, 136, 139, 140, -182, 8, 236,
	53, -181, 252, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 53, -114, 122, 71, 149,
	228, 119, 120, 126, -117, 56, -116, 59, 244, 153,
	164, 158, 185, 177, 175, 178, 215, 66, 156, 224,
	137, 173, 169, 167, 27, 190, 249, 168, 132, 131,
	191, 195, 216, 162, 163, 218, 189, 133, 32, 246,
	34, 145, 219, 193, 188, 184, 187, 161, 183, 38,
	197, 196, 198, 214, 180, 170, 18, 222, 140, 143,
	192, 194, 127, 147, 248, 220, 166, 144, 139, 223,
	157, 217, 226, 37, 202, 160, 130, 154, 151, 181,
	146, 171, 172, 186, 159, 182, 155, 148, 141, 225,
	203, 250, 179, 176, 152, 150, 207, 208, 209, 210,
	247, 221, 174, 204, -102, 122, 124, 120, 120, 121,
	122, 228, 119, 120, -51, -123, -117, 122, 149, 120,
	107, 178, 113, 205, 121, 32, 147, -132, 120, -104,
	150, 207, 208, 209, 210, 56, 217, 216, 211, -123,
	155, -128, -128, -128, -128, -128, -2, -86, 17, 16,
	-5, -3, -182, 6, 20, 21, -30, 39, 40, -25,
	-36, 98, -37, -123, -56, 73, -61, 29, -117, 23,
	-60, -75, -57, -73, -74, 107, 108, 96, 97, 104,
	74, 109, -65, -63, -64, -66, 59, 58, 67, 60,
	61, 62, 63, 68, 57, 69, 70, -71, -182, 43,
	44, 237, 238, 239, 240, 243, 241, 76, 33, 227,
	235, 234, 233, 231, 232, 229, 230, 125, 228, 102,
	236, -102, -39, -40, -41, -42, -53, -74, -182, -51,
	11, -46, -51, -94, -131, 155, -98, 217, 216, -118,
	-96, -117, -115, 215, 178, 214, 118, 72, 22, 24,
	200, 75, 107, 16, 76, 106, 237, 113, 47, 229,
	230, 227, 239, 240, 228, 205, 29, 10, 25, 135,
	21, 100, 115, 79, 80, 138, 23, 136, 70, 19,
	50, 11, 13, 14, 125, 124, 91, 121, 45, 8,
	109, 26, 88, 41, 28, 43, 89, 17, 231, 232,
	31, 243, 142, 102, 48, 35, 73, 68, 51, 71,
	15, 46, 90, 116, 236, 44, 119, 6, 242, 30,
	134, 42, 120, 206, 78, 123, 69, 5, 126, 9,
	49, 52, 233, 234, 235, 33, 77, 12, -160, -155,
	56, 121, -51, 236, -117, -110, 125, -110, -110, 120,
	-51, -51, -109, 125, 56, -109, -109, -109, -51, 110,
	-51, 56, 30, 228, 56, 147, 120, 148, 122, -129,
	-182, -118, -129, -129, -129, 151, 152, -129, -105, 212,
	51, -129, -183, 55, -87, 19, 31, -37, -123, -83,
	-84, -37, -82, -2, -24, 35, -28, 21, 65, 11,
	-120, 72, 71, 88, -119, 22, -117, 110, -37, -58,
	91, 73, 89, 90, 75, 93, 92, 103, 96, 97,
	98, 99, 100, 101, 102, 94, 95, 106, 81, 82,
	83, 84, 85, 86, 87, -103, -182, -182, -74, -182,
	-178, 64, 111, 112, -61, -61, -61, -61, -61, -61,
	-61, -2, -69, -37, -182, -182, -182, -182, -182, -182,
	-182, -182, -182, -78, -37, -182, -186, -182, -186, -186,
	-186, -186, -186, -186, -186, -182, -182, -182, -182, -52,
	26, -51, 30, 54, -47, -49, -48, -50, 41, 45,
	47, 42, 43, 44, 48, -127, 22, -39, -182, -126,
	143, -125, 22, -123, -51, -46, -184, 54, 11, 52,
	54, -94, 155, -95, -99, 218, 220, 81, -122, -117,
	29, 30, 55, 54, -134, -137, -139, -138, -140, -135,
	-136, 175, 176, 107, 179, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 30, 137, 171, 172, 173,
	174, 191, 192, 193, 194, 195, 196, 197, 198, 158,
	159, 160, 161, 162, 163, 164, 166, 167, 168, 169,
	170, 56, -129, 122, -176, 52, 56, 73, 56, -51,
	-51, -129, 123, -51, 23, 51, -51, 56, 56, -124,
	-123, -115, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -107, 206, 213, -51, 9, 91, 54, 18,
	110, 54, -85, 24, 25, -86, -183, -30, -62, -117,
	60, 63, -29, 42, -51, -37, -37, -67, 68, 73,
	69, 70, -119, 98, -124, -118, -115, -117, -61, -68,
	-71, -74, 64, 91, 89, 90, 75, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -130, 56, 59, 56, -35, 21, -34, -36,
	-60, 59, -60, -117, -183, 54, -183, -2, -34, -34,
	-37, -37, -75, -117, -123, -75, -34, -28, -76, -77,
	77, -75, -183, -34, -35, -34, -34, -90, 143, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 41, 41,
	41, 46, 41, 46, 41, -48, -123, -183, -54, 49,
	124, 50, -182, -125, -90, 52, -39, -51, -98, -95,
	54, 219, 221, 222, 51, -37, -146, 106, -161, -162,
	-163, -118, 60, -155, -156, -164, 127, 130, 126, -157,
	121, 28, -151, 68, 73, -147, 203, -141, 53, -141,
	-141, -141, -141, -145, 178, -145, -145, -145, 53, 53,
	-141, -141, -141, -149, 53, -149, -149, -150, 53, -150,
	-121, 52, -51, -174, 247, -175, 56, -129, 23, -129,
	-111, 118, 115, 116, -171, 114, 200, 178, 66, 29,
	15, 237, 143, 250, 56, 144, -51, -51, -129, -106,
	11, 91, 37, -37, -37, -124, -84, -87, -101, 19,
	11, 33, 33, -34, 68, 69, 70, 110, -182, -68,
	-61, -61, -61, -33, 138, 72, -183, -183, -34, 54,
	-37, -183, -183, -183, 54, 52, 22, 54, 11, 110,
	54, 11, -183, -34, -79, -77, 79, -37, -183, -183,
	-183, -183, -183, -59, 30, 33, -2, -182, -182, -55,
	54, 12, 81, -44, -43, 51, 52, -45, 51, -43,
	41, 41, 121, 121, 121, -91, -117, -55, -39, -55,
	-99, -100, 223, 220, 226, 56, 54, -163, 81, 53,
	28, -157, -157, 56, 56, -142, 29, 68, -148, 204,
	60, -145, -145, -146, 30, -146, -146, -146, -154, 59,
	-154, 60, 60, 51, -117, -129, -173, -172, -118, -128,
	-177, 149, 128, 129, 132, 131, 56, 121, 28, 127,
	130, 143, 126, -177, 149, -112, -113, 123, 22, 121,
	28, 143, -129, -108, 89, 12, -123, -123, 38, 110,
	-51, -38, 11, 98, -118, -35, -33, 72, -61, -61,
	-183, -36, -133, 107, 175, 137, 173, 169, 189, 180,
	202, 171, 203, -130, -133, -61, -61, -118, -61, -61,
	244, -82, 80, -37, 78, -92, 51, -93, -70, -72,
	-71, -182, -2, -88, -117, -91, -82, -97, -37, -37,
	-37, 53, -37, -182, -182, -182, -183, 54, -82, -55,
	220, 224, 225, -162, -163, -166, -165, -117, 56, 56,
	-144, 51, 59, 60, 61, 68, 227, 67, 55, -146,
	-146, 56, 107, 55, 54, 55, 54, 55, 54, -51,
	54, 81, -128, -117, -128, -117, -51, -128, -117, 59,
	-37, -55, -39, -183, -61, -183, -141, -141, -141, -150,
	-141, 163, -141, 163, -183, -183, -183, 54, 19, -183,
	54, 19, -182, -32, 242, -37, -179, 251, 27, -92,
	54, -183, -183, -183, 54, 110, -183, -86, -89, -117,
	-89, -89, -89, -126, -117, -86, 55, 54, -141, -152,
	200, 9, -145, 59, -145, 60, 60, -129, -172, -163,
	53, 26, -80, 13, -145, 56, -61, -61, -61, -61,
	-61, -183, 59, 98, -69, 28, -72, 33, -2, -182,
	-117, -117, 54, 55, -183, -183, -183, -54, -168, -167,
	52, 133, 66, -165, -153, 127, 28, 126, 227, -146,
	-146, 55, 55, -89, -182, -81, 14, 16, -183, -183,
	-183, -183, -31, 91, 247, 9, -70, -2, 110, -117,
	-167, 56, -158, 81, 59, -143, 66, 28, 28, 55,
	-169, -170, 143, -37, -69, -183, 245, 48, 248, -93,
	-183, -117, 60, 59, -176, -183, 54, -117, 38, 246,
	249, -174, -170, 33, 38, 145, 247, 146, 248, -182,
	249, -61, 142, -183, -183,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 508, 0, 276, 276, 276, 276, 276, 276, 0,
	580, 563, 0, 0, 0, 0, -2, 266, 267, 0,
	269, 270, 785, 785, 785, 785, 785, 0, 33, 34,
	783, 1, 3, 516, 0, 0, 280, 283, 278, 0,
	563, 0, 0, 0, 60, 0, 0, 772, 0, 773,
	561, 561, 561, 581, 582, 585, 586, 587, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 0, 0, 564, 0, 559, 0,
	559, 559, 559, 0, 225, 345, 590, 772, 773, 0,
	0, 0, 0, 786, 786, 786, 786, 0, 786, 254,
	243, 245, 246, 247, 248, 786, 263, 264, 253, 265,
	268, 271, 272, 273, 274, 275, 27, 520, 0, 0,
	508, 29, 0, 276, 281, 282, 286, 284, 285, 277,
	0, 294, 298, 0, 353, 0, 358, 360, -2, 0,
	395, 396, 397, 398, 399, 0, 0, 0, 0, 0,
	0, 0, 422, 423, 424, 425, -2, 491, 492, 493,
	494, 495, 496, 497, 498, 362, 363, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 0, 452,
	452, 452, 452, 452, 452, 452, 452, 0, 0, 0,
	0, 0, 0, 304, 306, 307, 308, 327, 0, 329,
	0, 0, 41, 45, 0, 763, 547, -2, -2, 0,
	0, 588, 589, -2, 692, -2, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 0, 77,
	0, 0, 786, 0, 67, 0, 0, 0, 0, 0,
	786, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	226, 786, 786, 786, 786, 786, 786, 786, 786, 235,
	787, 788, 236, 237, 238, 786, 786, 240, 0, 255,
	0, 249, 28, 784, 22, 0, 0, 517, 0, 509,
	510, 513, 516, 27, 283, 0, 288, 287, 279, 0,
	295, 0, 0, 0, 299, 0, 301, 0, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 381,
	382, 383, 384, 385, 386, 359, 0, 290, 373, 0,
	499, 500, 0, 0, 415, 416, 417, 418, 419, 420,
	0, 27, 0, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 479, 0, 444, 0, 445, 446,
	447, 448, 449, 450, 451, 0, 290, 0, 0, 43,
	0, 344, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 336, 0, 0, 0, 0, 328, 0, 0, 347,
	736, 330, 0, 332, -2, 0, 0, 0, 39, 40,
	0, 46, 763, 48, 49, 0, 0, 0, 157, 555,
	556, 553, 185, 0, 140, 136, 82, 83, 84, 129,
	86, 129, 129, 129, 129, 154, 154, 154, 154, 112,
	113, 114, 115, 116, 0, 0, 99, 129, 129, 129,
	103, 119, 120, 121, 122, 123, 124, 125, 126, 87,
	88, 89, 90, 91, 92, 93, 131, 131, 131, 133,
	133, 583, 62, 0, 70, 0, 786, 0, 786, 75,
	0, 200, 0, 219, 560, 0, 786, 222, 223, 346,
	591, 592, 227, 228, 229, 230, 231, 232, 233, 234,
	239, 242, 256, 250, 251, 244, 521, 0, 0, 0,
	0, 0, 512, 514, 515, 520, 30, 286, 0, 501,
	0, 0, 0, 289, 25, 354, 355, 357, 374, 0,
	376, 378, 300, 296, 0, 488, -2, -2, 364, 365,
	389, 390, 391, 0, 0, 0, 0, 387, 369, 0,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 414, 463, 464, 0, 0, 0, 291, 292,
	412, 490, 413, 421, 392, 0, 539, 27, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 485, 482,
	0, 0, 453, 0, 0, 0, 0, 0, 0, 343,
	351, 544, 0, 305, 323, 325, 0, 320, 334, 335,
	337, 0, 339, 0, 341, 342, 309, 310, 311, 0,
	0, 0, 0, 331, 351, 0, 351, 42, 548, 47,
	0, 0, 52, 53, 549, 550, 551, 0, 76, 186,
	188, 191, 192, 78, 79, 0, 0, 0, 0, 0,
	180, 181, 143, 141, 0, 138, 137, 85, 0, 154,
	154, 106, 107, 157, 0, 157, 157, 157, 0, 0,
	100, 101, 102, 94, 0, 95, 96, 97, 0, 98,
	0, 0, 786, 64, 0, 68, 69, 65, 562, 66,
	785, 0, 0, 575, 201, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 0, 218, 786, 221, 259,
	0, 0, 0, 518, 519, 0, 511, 23, 0, 557,
	558, 502, 503, 302, 375, 377, 379, 0, 290, 366,
	387, 370, 0, 367, 0, 0, 361, 426, 0, 0,
	394, -2, 429, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 483, 0, 0, 443, 454,
	455, 456, 457, 533, 0, 0, -2, 0, 0, 508,
	0, 0, 0, 317, 324, 0, 0, 318, 0, 319,
	338, 340, 0, 0, 0, 0, 315, 508, 351, 38,
	50, 51, 0, 0, 57, 158, 0, 189, 0, 0,
	175, 0, 0, 178, 179, 150, 0, 142, 81, 139,
	0, 157, 157, 108, 0, 109, 110, 111, 0, 127,
	0, 0, 0, 0, 584, 63, 71, 72, 0, 193,
	785, 0, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 785, 0, 0, 785, 576, 577, 578,
	579, 0, 220, 241, 0, 0, 257, 258, 522, 0,
	24, 351, 0, 297, 489, 0, 368, 0, 388, 371,
	427, 293, 0, 129, 129, 468, 129, 133, 471, 129,
	473, 129, 476, 0, 0, 0, 0, 488, 0, 0,
	0, 480, 442, 486, 0, 541, 0, 533, 523, 535,
	537, 0, 27, 0, 529, 0, 516, 545, 352, 546,
	321, 0, 326, 0, 0, 0, 329, 0, 516, 37,
	54, 55, 56, 187, 190, 0, 182, 129, 176, 177,
	152, 0, 144, 145, 146, 147, 148, 149, 130, 104,
	105, 155, 156, 154, 0, 154, 0, 134, 0, 786,
	0, 0, 194, 0, 195, 197, 198, 199, 0, 260,
	261, 504, 303, 428, 372, 431, 465, 154, 469, 470,
	472, 474, 475, 477, 433, 432, 434, 0, 0, 437,
	0, 0, 0, 0, 0, 484, 31, 0, 0, 32,
	0, 538, -2, 0, 0, 0, 44, 35, 0, 313,
	0, 0, 0, 347, 316, 36, 167, 0, 184, 159,
	153, 0, 157, 128, 157, 0, 0, 61, 73, 74,
	0, 0, 506, 0, 466, 467, 0, 0, 0, 0,
	458, 441, 481, 542, 543, 0, 536, 0, -2, 0,
	531, 530, 0, 322, 348, 349, 350, 312, 166, 168,
	0, 173, 0, 183, 164, 0, 161, 163, 151, 117,
	118, 132, 135, 0, 0, 26, 0, 0, 435, 436,
	438, 439, 0, 0, 0, 0, 526, 27, 0, 314,
	169, 170, 0, 174, 172, 80, 0, 160, 162, 67,
	0, 214, 0, 507, 505, 440, 0, 0, 0, 534,
	-2, 532, 171, 165, 70, 213, 0, 0, 459, 0,
	462, 196, 215, 0, 460, 0, 0, 0, 0, 0,
	461, 0, 0, 216, 217,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 252,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:309
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:314
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:315
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:342
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:350
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:354
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:360
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:394
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:547
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:577
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:592
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:597
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:603
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:649
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:873
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:877
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:882
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:886
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:894
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:898
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:904
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:921
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:944
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:948
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:956
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:960
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1013
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1044
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1048
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1068
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1079
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1136
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			if yyDollar[1].colIdent.NeedQuotes() {
				yyVAL.str = "'" + yyDollar[1].colIdent.String() + "'"
			} else {
				yyVAL.str = yyDollar[1].colIdent.String()
			}

		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1185
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1189
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1193
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1216
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1221
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1226
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1249
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1259
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 216:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1265
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1269
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1275
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1281
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1289
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1316
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1384
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1444
		{
			yyVAL.str = ""
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = "extended "
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = "full "
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1478
		{
			yyVAL.showFilter = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1482
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1486
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = SessionStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = GlobalStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Begin{}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Begin{}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Commit{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Rollback{}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &OtherRead{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			setAllowComments(yylex, true)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1569
		{
			yyVAL.bytes2 = nil
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = UnionStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = UnionAllStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = UnionDistinctStr
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = SQLCacheStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = DistinctStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = StraightJoinHint
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1623
		{
			yyVAL.selectExprs = nil
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1660
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1676
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1708
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1718
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1751
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1755
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1775
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1781
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1786
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = JoinStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = JoinStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = JoinStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = StraightJoinStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = LeftJoinStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = LeftJoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = RightJoinStr
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = RightJoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = NaturalJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.indexHints = nil
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1884
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1888
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1892
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.expr = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1957
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1965
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1969
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1973
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1985
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1989
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = IsNullStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = IsNotNullStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = IsTrueStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = IsNotTrueStr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = IsFalseStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = IsNotFalseStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = EqualStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = LessThanStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = GreaterThanStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = LessEqualStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = GreaterEqualStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = NotEqualStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2078
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2185
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2255
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2259
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 436:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 438:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 439:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 440:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2381
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.str = BooleanModeStr
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2389
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2393
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = QueryExpansionStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2447
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = nil
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = string("")
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2516
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2520
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &NullVal{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2594
		{
			yyVAL.exprs = nil
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2598
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = nil
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2612
		{
			yyVAL.orderBy = nil
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2637
		{
			yyVAL.str = AscScr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.str = AscScr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = DescScr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.limit = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2658
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2662
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = ForUpdateStr
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2675
		{
			yyVAL.str = ShareModeStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2701
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2705
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2709
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.updateExprs = nil
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2737
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2747
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2778
		{
			yyVAL.returning = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2783
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2829
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.bytes = []byte("charset")
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &Default{}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2856
		{
			yyVAL.byt = 0
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.byt = 1
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2866
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = IgnoreStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2923
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), true)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(yyDollar[1].colIdent.String(), yyDollar[1].colIdent.NeedQuotes())
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			decNesting(yylex)
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3177
		{
			forceEOF(yylex)
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3182
		{
			forceEOF(yylex)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			forceEOF(yylex)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
