// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

// setErrorVerbose configures format of ErrorMessages from parser. If false then only "syntax error" will be shown.
// Default is false
func SetSQLParserErrorVerboseLevel(verbose bool) {
	yyErrorVerbose = verbose
}

// setDebugLevel configures debug level of log messages from parser. Default is 0
func setDebugLevel(level int) {
	if level < 0 {
		panic("unsupported debug level for sqlparser")
	}
	yyDebug = level
}

//line sql.y:68
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const ILIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const JSON_EXTRACT_OP = 57463
const JSON_UNQUOTE_EXTRACT_OP = 57464
const CREATE = 57465
const ALTER = 57466
const DROP = 57467
const RENAME = 57468
const ANALYZE = 57469
const ADD = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const CONSTRAINT = 57481
const SPATIAL = 57482
const FULLTEXT = 57483
const FOREIGN = 57484
const KEY_BLOCK_SIZE = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const MAXVALUE = 57494
const PARTITION = 57495
const REORGANIZE = 57496
const LESS = 57497
const THAN = 57498
const PROCEDURE = 57499
const TRIGGER = 57500
const VINDEX = 57501
const VINDEXES = 57502
const STATUS = 57503
const VARIABLES = 57504
const BEGIN = 57505
const START = 57506
const TRANSACTION = 57507
const COMMIT = 57508
const ROLLBACK = 57509
const DEALLOCATE = 57510
const PREPARE = 57511
const EXECUTE = 57512
const BIT = 57513
const TINYINT = 57514
const SMALLINT = 57515
const MEDIUMINT = 57516
const INT = 57517
const INTEGER = 57518
const BIGINT = 57519
const INTNUM = 57520
const REAL = 57521
const DOUBLE = 57522
const FLOAT_TYPE = 57523
const DECIMAL = 57524
const NUMERIC = 57525
const TIME = 57526
const TIMESTAMP = 57527
const DATETIME = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const BLOB = 57539
const TINYBLOB = 57540
const MEDIUMBLOB = 57541
const LONGBLOB = 57542
const JSON = 57543
const ENUM = 57544
const GEOMETRY = 57545
const POINT = 57546
const LINESTRING = 57547
const POLYGON = 57548
const GEOMETRYCOLLECTION = 57549
const MULTIPOINT = 57550
const MULTILINESTRING = 57551
const MULTIPOLYGON = 57552
const NULLX = 57553
const AUTO_INCREMENT = 57554
const APPROXNUM = 57555
const SIGNED = 57556
const UNSIGNED = 57557
const ZEROFILL = 57558
const DATABASES = 57559
const TABLES = 57560
const VITESS_KEYSPACES = 57561
const VITESS_SHARDS = 57562
const VITESS_TABLETS = 57563
const VSCHEMA_TABLES = 57564
const EXTENDED = 57565
const FULL = 57566
const PROCESSLIST = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const LOCAL = 57572
const ISOLATION = 57573
const LEVEL = 57574
const READ = 57575
const WRITE = 57576
const ONLY = 57577
const REPEATABLE = 57578
const COMMITTED = 57579
const UNCOMMITTED = 57580
const SERIALIZABLE = 57581
const CURRENT_TIMESTAMP = 57582
const DATABASE = 57583
const CURRENT_DATE = 57584
const CURRENT_TIME = 57585
const LOCALTIME = 57586
const LOCALTIMESTAMP = 57587
const UTC_DATE = 57588
const UTC_TIME = 57589
const UTC_TIMESTAMP = 57590
const REPLACE = 57591
const CONVERT = 57592
const CAST = 57593
const SUBSTR = 57594
const SUBSTRING = 57595
const GROUP_CONCAT = 57596
const SEPARATOR = 57597
const MATCH = 57598
const AGAINST = 57599
const BOOLEAN = 57600
const LANGUAGE = 57601
const WITH = 57602
const QUERY = 57603
const EXPANSION = 57604
const UNUSED = 57605
const RETURNING = 57606

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"ILIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	178, 282,
	179, 282,
	-2, 270,
	-1, 253,
	74, 552,
	100, 552,
	102, 552,
	108, 552,
	109, 552,
	110, 552,
	111, 552,
	112, 552,
	113, 552,
	114, 552,
	116, 552,
	117, 552,
	118, 552,
	119, 552,
	120, 552,
	121, 552,
	122, 552,
	123, 552,
	124, 552,
	125, 552,
	126, 552,
	127, 552,
	128, 552,
	129, 552,
	130, 552,
	131, 552,
	134, 552,
	-2, 399,
	-1, 254,
	56, 537,
	74, 541,
	137, 649,
	138, 537,
	139, 537,
	-2, 531,
	-1, 255,
	137, 651,
	-2, 540,
	-1, 256,
	137, 652,
	-2, 538,
	-1, 257,
	137, 653,
	-2, 539,
	-1, 333,
	108, 805,
	-2, 66,
	-1, 334,
	108, 833,
	-2, 67,
	-1, 335,
	108, 793,
	-2, 68,
	-1, 339,
	108, 777,
	150, 777,
	-2, 613,
	-1, 341,
	108, 815,
	150, 815,
	-2, 615,
	-1, 567,
	74, 540,
	137, 651,
	-2, 467,
	-1, 618,
	55, 46,
	57, 46,
	-2, 48,
	-1, 776,
	137, 655,
	-2, 648,
	-1, 777,
	137, 649,
	-2, 537,
	-1, 1014,
	5, 31,
	-2, 433,
	-1, 1042,
	5, 30,
	-2, 584,
	-1, 1286,
	5, 31,
	-2, 585,
	-1, 1334,
	5, 30,
	-2, 587,
	-1, 1401,
	5, 31,
	-2, 588,
}

const yyPrivate = 57344

const yyLast = 12066

var yyAct = [...]int16{
	280, 53, 1392, 951, 865, 513, 563, 697, 1348, 1187,
	263, 562, 3, 883, 931, 233, 1219, 1293, 279, 1188,
	903, 1184, 613, 906, 907, 1211, 866, 1064, 1107, 1160,
	1047, 224, 804, 645, 611, 59, 24, 732, 820, 1110,
	338, 1008, 630, 1053, 917, 779, 853, 945, 1098, 436,
	490, 497, 941, 331, 53, 817, 503, 629, 319, 600,
	861, 511, 238, 242, 58, 232, 276, 987, 321, 1212,
	615, 248, 327, 326, 1421, 324, 1411, 925, 225, 226,
	227, 228, 1419, 262, 1399, 1417, 952, 1410, 1398, 1179,
	317, 239, 1279, 54, 29, 30, 440, 1072, 237, 1357,
	1071, 897, 315, 1073, 246, 1214, 1215, 316, 188, 184,
	185, 186, 580, 1213, 640, 739, 641, 1226, 1227, 968,
	898, 899, 461, 1230, 727, 478, 1228, 325, 631, 729,
	632, 909, 480, 967, 1089, 924, 730, 63, 1307, 932,
	1267, 1265, 449, 229, 1418, 737, 819, 628, 640, 739,
	641, 320, 223, 475, 476, 473, 474, 1416, 1393, 1131,
	863, 450, 1322, 443, 972, 65, 66, 67, 68, 69,
	182, 705, 862, 1349, 633, 966, 528, 527, 537, 538,
	530, 531, 532, 533, 534, 535, 536, 529, 257, 1351,
	539, 1355, 696, 884, 886, 181, 1063, 182, 919, 919,
	1062, 1061, 438, 904, 467, 467, 467, 467, 1128, 463,
	467, 465, 446, 199, 1130, 183, 551, 552, 467, 1118,
	187, 1009, 83, 1378, 1289, 1142, 196, 1025, 1001, 196,
	1083, 486, 750, 919, 518, 456, 462, 464, 529, 53,
	196, 539, 539, 746, 508, 963, 960, 961, 978, 959,
	500, 1116, 1234, 787, 548, 510, 196, 196, 83, 550,
	510, 1022, 196, 1384, 83, 437, 1244, 784, 785, 786,
	783, 1181, 499, 1051, 970, 973, 1135, 634, 1350, 854,
	700, 565, 566, 1087, 569, 570, 571, 572, 573, 574,
	575, 576, 885, 579, 581, 581, 581, 581, 581, 581,
	581, 581, 589, 590, 591, 592, 493, 498, 1229, 932,
	921, 965, 1397, 863, 56, 561, 1356, 1354, 918, 918,
	460, 812, 612, 519, 854, 1387, 1032, 1235, 1403, 452,
	453, 454, 782, 964, 1129, 922, 1127, 509, 508, 1117,
	505, 205, 549, 1323, 1122, 1119, 1112, 1113, 1120, 1115,
	1114, 55, 564, 918, 510, 1313, 979, 1312, 916, 914,
	442, 1121, 915, 578, 509, 508, 1102, 1124, 1101, 217,
	196, 969, 196, 1021, 180, 1020, 1382, 501, 196, 1090,
	1134, 510, 618, 1222, 971, 998, 999, 1000, 196, 768,
	770, 771, 83, 83, 83, 83, 753, 754, 83, 619,
	1221, 627, 626, 1084, 748, 320, 83, 582, 583, 584,
	585, 586, 587, 588, 769, 954, 509, 508, 196, 807,
	1373, 528, 527, 537, 538, 530, 531, 532, 533, 534,
	535, 536, 529, 510, 1048, 539, 711, 83, 444, 445,
	467, 314, 805, 747, 200, 640, 739, 641, 467, 202,
	532, 533, 534, 535, 536, 529, 209, 204, 539, 467,
	467, 467, 467, 467, 467, 467, 467, 1161, 710, 637,
	509, 508, 509, 508, 467, 467, 467, 467, 701, 1183,
	640, 739, 641, 206, 509, 508, 212, 510, 699, 510,
	1074, 210, 694, 640, 739, 641, 1163, 714, 458, 451,
	437, 510, 231, 196, 1407, 489, 489, 488, 1340, 1390,
	196, 196, 196, 1340, 489, 755, 201, 83, 1361, 281,
	742, 733, 733, 740, 712, 1360, 83, 1340, 1341, 1304,
	1303, 1165, 1231, 1169, 814, 1164, 1162, 1171, 1208, 489,
	780, 1167, 890, 203, 621, 213, 214, 215, 216, 221,
	1166, 53, 1284, 80, 219, 218, 220, 1288, 489, 776,
	1241, 1240, 622, 1168, 1170, 757, 565, 1237, 1238, 1237,
	1236, 1017, 489, 26, 772, 980, 489, 816, 1374, 26,
	765, 766, 597, 489, 846, 849, 774, 814, 489, 332,
	855, 644, 643, 1049, 1050, 441, 1149, 1040, 321, 321,
	321, 321, 321, 1041, 596, 781, 623, 867, 621, 1333,
	26, 1185, 1027, 612, 1048, 887, 738, 738, 808, 811,
	1024, 321, 1017, 56, 816, 1118, 597, 1050, 83, 56,
	1224, 597, 1243, 851, 196, 196, 83, 564, 196, 1048,
	1239, 196, 1017, 844, 845, 196, 858, 83, 83, 83,
	83, 83, 83, 83, 83, 891, 60, 1116, 1026, 1076,
	56, 239, 83, 83, 83, 83, 1023, 252, 880, 896,
	196, 806, 597, 933, 934, 935, 196, 982, 893, 889,
	892, 320, 320, 320, 320, 320, 895, 888, 625, 869,
	870, 83, 872, 624, 911, 196, 320, 751, 1017, 56,
	467, 83, 467, 1317, 320, 868, 902, 926, 871, 946,
	467, 56, 1202, 1079, 1054, 1055, 842, 843, 942, 937,
	936, 71, 850, 469, 469, 469, 469, 698, 949, 469,
	487, 927, 928, 929, 930, 484, 857, 469, 859, 860,
	1185, 947, 1103, 943, 944, 1117, 485, 938, 939, 940,
	1122, 1119, 1112, 1113, 1120, 1115, 1114, 537, 538, 530,
	531, 532, 533, 534, 535, 536, 529, 1121, 517, 539,
	1275, 489, 1057, 1111, 708, 481, 1002, 877, 1060, 875,
	56, 763, 878, 196, 876, 1059, 196, 196, 196, 196,
	196, 776, 874, 602, 605, 606, 607, 603, 196, 604,
	608, 196, 780, 988, 873, 196, 991, 243, 244, 196,
	196, 1415, 879, 83, 606, 607, 1409, 1141, 983, 984,
	985, 986, 1414, 498, 1145, 1146, 1143, 1144, 504, 1003,
	1044, 1010, 83, 528, 527, 537, 538, 530, 531, 532,
	533, 534, 535, 536, 529, 502, 996, 539, 332, 530,
	531, 532, 533, 534, 535, 536, 529, 636, 995, 539,
	468, 990, 1043, 989, 1045, 1094, 642, 781, 554, 1389,
	459, 1086, 1388, 1042, 527, 537, 538, 530, 531, 532,
	533, 534, 535, 536, 529, 196, 1013, 539, 83, 1331,
	83, 321, 491, 1080, 196, 1282, 1318, 196, 83, 1031,
	312, 305, 809, 810, 492, 307, 308, 309, 310, 997,
	956, 306, 313, 707, 311, 1058, 1139, 610, 240, 241,
	1066, 504, 1068, 749, 234, 1067, 1033, 1366, 235, 60,
	336, 1077, 553, 555, 556, 557, 558, 559, 994, 1069,
	1365, 1320, 1091, 1092, 1050, 506, 993, 1375, 1308, 745,
	568, 467, 1093, 62, 1095, 1096, 1097, 735, 7, 469,
	1081, 1082, 736, 6, 64, 1016, 620, 469, 734, 5,
	57, 1, 271, 270, 320, 821, 467, 743, 469, 469,
	469, 469, 469, 469, 469, 469, 1100, 560, 953, 1106,
	1109, 962, 1391, 469, 469, 469, 469, 1347, 1029, 1218,
	1123, 913, 905, 435, 70, 1383, 912, 1353, 756, 602,
	605, 606, 607, 603, 1138, 604, 608, 1306, 920, 1054,
	1055, 1088, 759, 923, 1223, 1386, 1085, 650, 649, 647,
	648, 646, 517, 652, 651, 741, 1075, 208, 469, 328,
	207, 329, 1190, 609, 53, 1186, 1153, 1154, 635, 1193,
	321, 867, 1173, 948, 1172, 1191, 1159, 507, 1152, 867,
	1189, 72, 1204, 1205, 1206, 1180, 776, 1126, 1099, 1099,
	813, 815, 466, 1194, 1125, 1197, 83, 1195, 958, 196,
	1133, 728, 977, 1196, 1198, 479, 211, 547, 992, 856,
	1070, 337, 1192, 847, 847, 83, 752, 496, 1210, 847,
	1216, 1364, 1209, 1217, 1182, 1319, 1030, 577, 852, 261,
	767, 275, 1232, 1233, 272, 274, 847, 273, 259, 882,
	758, 1039, 1199, 1200, 520, 260, 1201, 250, 593, 1203,
	601, 599, 598, 320, 1056, 1052, 318, 1046, 83, 83,
	1148, 83, 1245, 1278, 469, 1372, 762, 28, 61, 245,
	321, 23, 22, 806, 21, 1247, 19, 18, 1250, 17,
	20, 16, 15, 469, 83, 14, 32, 196, 196, 13,
	12, 196, 1268, 11, 10, 9, 733, 1254, 8, 1255,
	1277, 196, 4, 236, 1256, 25, 2, 0, 778, 336,
	83, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 1253, 1283, 0,
	1281, 0, 1292, 1263, 0, 0, 0, 0, 1225, 469,
	0, 469, 1295, 1296, 1297, 1300, 0, 0, 0, 469,
	1298, 1291, 83, 320, 83, 0, 1301, 0, 196, 1260,
	1261, 1077, 1262, 467, 0, 1264, 0, 1266, 0, 981,
	0, 1309, 0, 1311, 0, 1280, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 83, 1252, 83, 83, 1316,
	469, 738, 1315, 0, 0, 0, 1321, 470, 471, 472,
	0, 0, 477, 0, 0, 1190, 0, 0, 1335, 0,
	482, 0, 196, 894, 1336, 1337, 0, 0, 1305, 1334,
	83, 900, 0, 1189, 1332, 0, 0, 1338, 0, 0,
	0, 0, 1345, 83, 196, 1012, 0, 0, 1339, 1363,
	83, 1352, 0, 0, 1014, 1015, 1346, 0, 0, 0,
	1358, 83, 1359, 0, 1190, 1362, 53, 0, 196, 0,
	0, 0, 0, 1376, 0, 0, 0, 1377, 0, 0,
	1018, 1019, 1189, 0, 0, 0, 1381, 0, 1028, 1302,
	0, 0, 0, 1034, 1379, 1035, 1036, 1037, 1038, 1310,
	0, 0, 0, 1395, 0, 0, 0, 0, 0, 775,
	1400, 0, 0, 0, 1402, 0, 867, 0, 0, 0,
	0, 83, 0, 83, 83, 83, 196, 83, 1405, 0,
	0, 0, 0, 0, 0, 83, 0, 1065, 0, 1412,
	1413, 1330, 0, 0, 0, 0, 0, 0, 0, 1420,
	322, 0, 0, 0, 0, 0, 469, 0, 0, 0,
	0, 83, 83, 83, 0, 0, 0, 1394, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1004, 1005, 1006, 1007, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	469, 0, 469, 0, 0, 0, 0, 83, 83, 0,
	0, 0, 0, 1385, 0, 336, 0, 0, 0, 0,
	0, 0, 0, 83, 439, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 908, 0, 83, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 1404,
	704, 469, 0, 495, 1158, 0, 0, 0, 0, 83,
	0, 715, 716, 717, 718, 719, 720, 721, 722, 0,
	0, 0, 0, 0, 0, 469, 723, 724, 725, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	847, 191, 0, 517, 222, 1065, 0, 83, 847, 1272,
	489, 0, 1207, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 249,
	0, 191, 191, 0, 0, 0, 469, 191, 469, 1220,
	0, 0, 447, 0, 448, 0, 0, 0, 0, 0,
	455, 775, 0, 0, 0, 0, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1246, 528, 527, 537, 538, 530, 531, 532, 533,
	534, 535, 536, 529, 1248, 0, 539, 0, 0, 0,
	0, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 469, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 489, 0, 1156, 0, 1157,
	1269, 1270, 1271, 0, 0, 1274, 1276, 0, 0, 0,
	0, 1174, 1175, 0, 1177, 1178, 0, 0, 1285, 1286,
	1287, 0, 1290, 0, 0, 191, 0, 191, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 191, 1294, 1294, 1294, 0, 1299, 0,
	0, 0, 0, 0, 0, 595, 469, 528, 527, 537,
	538, 530, 531, 532, 533, 534, 535, 536, 529, 0,
	0, 539, 0, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 469, 469, 469, 0, 0, 908, 0, 0,
	0, 0, 955, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 1329, 528, 527, 537,
	538, 530, 531, 532, 533, 534, 535, 536, 529, 0,
	0, 539, 0, 1342, 1343, 1344, 0, 0, 517, 517,
	0, 0, 0, 1108, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 1220, 0, 0, 0, 0, 0,
	0, 1367, 1368, 1369, 1370, 1371, 0, 1294, 191, 0,
	0, 0, 0, 0, 0, 191, 617, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 0, 1151, 0, 0, 0, 702, 703, 0, 0,
	706, 0, 0, 709, 0, 0, 0, 0, 0, 0,
	1396, 0, 0, 0, 0, 1401, 1176, 0, 0, 0,
	0, 0, 0, 0, 0, 847, 0, 0, 517, 1406,
	0, 0, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1408, 0, 528, 527, 537, 538, 530,
	531, 532, 533, 534, 535, 536, 529, 764, 0, 539,
	1424, 1425, 0, 0, 0, 0, 0, 908, 0, 908,
	1324, 1325, 0, 1326, 1327, 1328, 822, 823, 824, 825,
	826, 827, 828, 829, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 830, 0, 0, 0, 191,
	191, 0, 0, 191, 0, 0, 191, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 528, 527,
	537, 538, 530, 531, 532, 533, 534, 535, 536, 529,
	0, 0, 539, 1151, 0, 191, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 864, 26, 27, 54, 29,
	30, 0, 0, 1105, 0, 0, 0, 0, 1155, 0,
	191, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	31, 0, 713, 0, 0, 0, 0, 0, 1132, 528,
	527, 537, 538, 530, 531, 532, 533, 534, 535, 536,
	529, 0, 40, 539, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	249, 0, 0, 249, 249, 0, 0, 848, 848, 249,
	0, 0, 0, 848, 1108, 908, 0, 0, 0, 0,
	0, 0, 0, 249, 249, 249, 249, 950, 191, 0,
	848, 191, 191, 191, 191, 191, 974, 0, 0, 975,
	0, 0, 0, 881, 1011, 0, 191, 0, 0, 0,
	617, 0, 672, 0, 191, 191, 0, 0, 0, 0,
	33, 34, 36, 35, 38, 528, 527, 537, 538, 530,
	531, 532, 533, 534, 535, 536, 529, 0, 0, 539,
	0, 39, 46, 47, 0, 0, 48, 49, 37, 0,
	655, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 0, 43, 44, 50, 51, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 191, 682, 683, 684, 685, 686, 687, 688,
	0, 689, 690, 691, 692, 693, 669, 670, 671, 653,
	654, 681, 0, 656, 0, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 673, 674, 675, 676, 677,
	678, 679, 680, 0, 713, 0, 55, 0, 0, 522,
	0, 526, 0, 0, 0, 0, 249, 540, 541, 542,
	543, 544, 545, 546, 0, 523, 524, 525, 521, 528,
	527, 537, 538, 530, 531, 532, 533, 534, 535, 536,
	529, 0, 0, 539, 0, 1314, 528, 527, 537, 538,
	530, 531, 532, 533, 534, 535, 536, 529, 0, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1136, 1137, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 1242, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 1249, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 0, 848, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 414, 0,
	385, 426, 363, 377, 434, 378, 379, 407, 349, 394,
	133, 375, 0, 366, 344, 372, 345, 364, 387, 100,
	390, 362, 416, 397, 114, 0, 0, 191, 432, 116,
	402, 0, 150, 126, 0, 0, 389, 418, 391, 412,
	384, 408, 354, 401, 427, 376, 405, 428, 0, 191,
	0, 386, 82, 0, 0, 640, 639, 641, 910, 0,
	0, 0, 0, 93, 0, 0, 0, 404, 423, 374,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 343, 403, 0, 347, 350, 433, 421, 369, 370,
	1078, 0, 0, 0, 0, 0, 0, 388, 392, 393,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 400, 0, 0, 0, 351, 348, 0, 0,
	0, 617, 353, 0, 368, 410, 249, 342, 413, 419,
	383, 197, 422, 381, 380, 425, 139, 0, 0, 153,
	105, 104, 113, 417, 365, 373, 96, 371, 145, 135,
	165, 399, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 346, 0, 151, 167, 179, 361, 420, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 357,
	360, 355, 356, 395, 396, 429, 430, 431, 411, 352,
	0, 358, 359, 0, 415, 398, 84, 0, 115, 177,
	141, 102, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 424, 414, 0, 385, 426, 363,
	377, 434, 378, 379, 407, 349, 394, 133, 375, 848,
	366, 344, 372, 345, 364, 387, 100, 390, 362, 416,
	397, 114, 0, 0, 0, 432, 116, 402, 0, 150,
	126, 0, 0, 389, 418, 391, 412, 384, 408, 354,
	401, 427, 376, 405, 428, 0, 0, 0, 386, 82,
	0, 0, 640, 639, 641, 910, 0, 0, 0, 0,
	93, 0, 0, 0, 404, 423, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 343, 403,
	0, 347, 350, 433, 421, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 388, 392, 393, 409, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 0, 400,
	0, 0, 0, 351, 348, 0, 0, 0, 0, 353,
	0, 368, 410, 0, 342, 413, 419, 383, 197, 422,
	381, 380, 425, 139, 0, 0, 153, 105, 104, 113,
	417, 365, 373, 96, 371, 145, 135, 165, 399, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 346, 0,
	151, 167, 179, 361, 420, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 357, 360, 355, 356,
	395, 396, 429, 430, 431, 411, 352, 0, 358, 359,
	0, 415, 398, 84, 0, 115, 177, 141, 102, 168,
	424, 414, 0, 385, 426, 363, 377, 434, 378, 379,
	407, 349, 394, 133, 375, 0, 366, 344, 372, 345,
	364, 387, 100, 390, 362, 416, 397, 114, 0, 0,
	0, 432, 116, 402, 0, 150, 126, 0, 0, 389,
	418, 391, 412, 384, 408, 354, 401, 427, 376, 405,
	428, 0, 0, 0, 386, 256, 0, 0, 194, 777,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	404, 423, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 343, 403, 0, 347, 350, 433,
	421, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	388, 392, 393, 409, 382, 0, 0, 0, 0, 0,
	0, 773, 0, 367, 0, 400, 0, 0, 0, 351,
	348, 0, 0, 0, 0, 353, 0, 368, 410, 0,
	342, 413, 419, 383, 197, 422, 381, 380, 425, 139,
	0, 0, 153, 105, 104, 113, 417, 365, 373, 96,
	371, 145, 135, 165, 399, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 346, 0, 151, 167, 179, 361,
	420, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 357, 360, 355, 356, 395, 396, 429, 430,
	431, 411, 352, 0, 358, 359, 0, 415, 398, 84,
	0, 115, 177, 141, 102, 168, 424, 414, 0, 385,
	426, 363, 377, 434, 378, 379, 407, 349, 394, 133,
	375, 0, 366, 344, 372, 345, 364, 387, 100, 390,
	362, 416, 397, 114, 0, 0, 0, 432, 116, 402,
	0, 150, 126, 0, 0, 389, 418, 391, 412, 384,
	408, 354, 401, 427, 376, 405, 428, 0, 0, 0,
	386, 256, 0, 0, 194, 777, 193, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 404, 423, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 406,
	343, 403, 0, 347, 350, 433, 421, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 388, 392, 393, 409,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 400, 0, 0, 0, 351, 348, 0, 0, 0,
	0, 353, 0, 368, 410, 0, 342, 413, 419, 383,
	197, 422, 381, 380, 425, 139, 0, 0, 153, 105,
	104, 113, 417, 365, 373, 96, 371, 145, 135, 165,
	399, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	346, 0, 151, 167, 179, 361, 420, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 357, 360,
	355, 356, 395, 396, 429, 430, 431, 411, 352, 0,
	358, 359, 0, 415, 398, 84, 0, 115, 177, 141,
	102, 168, 424, 414, 0, 385, 426, 363, 377, 434,
	378, 379, 407, 349, 394, 133, 375, 0, 366, 344,
	372, 345, 364, 387, 100, 390, 362, 416, 397, 114,
	0, 0, 0, 432, 116, 402, 0, 150, 126, 0,
	0, 389, 418, 391, 412, 384, 408, 354, 401, 427,
	376, 405, 428, 0, 0, 0, 386, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 404, 423, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 343, 403, 0, 347,
	350, 433, 421, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 388, 392, 393, 409, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 400, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	410, 0, 342, 413, 419, 383, 197, 422, 381, 380,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 365,
	373, 96, 371, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 420, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 395, 396,
	429, 430, 431, 411, 352, 0, 358, 359, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 424, 414,
	0, 385, 426, 363, 377, 434, 378, 379, 407, 349,
	394, 133, 375, 0, 366, 344, 372, 345, 364, 387,
	100, 390, 362, 416, 397, 114, 0, 0, 0, 432,
	116, 402, 0, 150, 126, 0, 0, 389, 418, 391,
	412, 384, 408, 354, 401, 427, 376, 405, 428, 56,
	0, 0, 386, 82, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 404, 423,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 343, 403, 0, 347, 350, 433, 421, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	393, 409, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 0, 400, 0, 0, 0, 351, 348, 0,
	0, 0, 0, 353, 0, 368, 410, 0, 342, 413,
	419, 383, 197, 422, 381, 380, 425, 139, 0, 0,
	153, 105, 104, 113, 417, 365, 373, 96, 371, 145,
	135, 165, 399, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 346, 0, 151, 167, 179, 361, 420, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	357, 360, 355, 356, 395, 396, 429, 430, 431, 411,
	352, 0, 358, 359, 0, 415, 398, 84, 0, 115,
	177, 141, 102, 168, 424, 414, 0, 385, 426, 363,
	377, 434, 378, 379, 407, 349, 394, 133, 375, 0,
	366, 344, 372, 345, 364, 387, 100, 390, 362, 416,
	397, 114, 0, 0, 0, 432, 116, 402, 0, 150,
	126, 0, 0, 389, 418, 391, 412, 384, 408, 354,
	401, 427, 376, 405, 428, 0, 0, 0, 386, 82,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 404, 423, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 343, 403,
	0, 347, 350, 433, 421, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 388, 392, 393, 409, 382, 0,
	0, 0, 0, 0, 0, 1150, 0, 367, 0, 400,
	0, 0, 0, 351, 348, 0, 0, 0, 0, 353,
	0, 368, 410, 0, 342, 413, 419, 383, 197, 422,
	381, 380, 425, 139, 0, 0, 153, 105, 104, 113,
	417, 365, 373, 96, 371, 145, 135, 165, 399, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 346, 0,
	151, 167, 179, 361, 420, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 357, 360, 355, 356,
	395, 396, 429, 430, 431, 411, 352, 0, 358, 359,
	0, 415, 398, 84, 0, 115, 177, 141, 102, 168,
	424, 414, 0, 385, 426, 363, 377, 434, 378, 379,
	407, 349, 394, 133, 375, 0, 366, 344, 372, 345,
	364, 387, 100, 390, 362, 416, 397, 114, 0, 0,
	0, 432, 116, 402, 0, 150, 126, 0, 0, 389,
	418, 391, 412, 384, 408, 354, 401, 427, 376, 405,
	428, 0, 0, 0, 386, 82, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	404, 423, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 343, 403, 0, 347, 350, 433,
	421, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	388, 392, 393, 409, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 400, 0, 0, 0, 351,
	348, 0, 0, 0, 0, 353, 0, 368, 410, 0,
	342, 413, 419, 383, 197, 422, 381, 380, 425, 139,
	0, 0, 153, 105, 104, 113, 417, 365, 373, 96,
	371, 145, 135, 165, 399, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 346, 0, 151, 167, 179, 361,
	420, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 357, 360, 355, 356, 395, 396, 429, 430,
	431, 411, 352, 0, 358, 359, 0, 415, 398, 84,
	0, 115, 177, 141, 102, 168, 424, 414, 0, 385,
	426, 363, 377, 434, 378, 379, 407, 349, 394, 133,
	375, 0, 366, 344, 372, 345, 364, 387, 100, 390,
	362, 416, 397, 114, 0, 0, 0, 432, 116, 402,
	0, 150, 126, 0, 0, 389, 418, 391, 412, 384,
	408, 354, 401, 427, 376, 405, 428, 0, 0, 0,
	386, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 404, 423, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 406,
	343, 403, 0, 347, 350, 433, 421, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 388, 392, 393, 409,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 400, 0, 0, 0, 351, 348, 0, 0, 0,
	0, 353, 0, 368, 410, 0, 342, 413, 419, 383,
	197, 422, 381, 380, 425, 139, 0, 0, 153, 105,
	104, 113, 417, 365, 373, 96, 371, 145, 135, 165,
	399, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 340, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	346, 0, 151, 167, 179, 361, 420, 173, 174, 175,
	176, 0, 0, 0, 341, 339, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 357, 360,
	355, 356, 395, 396, 429, 430, 431, 411, 352, 0,
	358, 359, 0, 415, 398, 84, 0, 115, 177, 141,
	102, 168, 424, 414, 0, 385, 426, 363, 377, 434,
	378, 379, 407, 349, 394, 133, 375, 0, 366, 344,
	372, 345, 364, 387, 100, 390, 362, 416, 397, 114,
	0, 0, 0, 432, 116, 402, 0, 150, 126, 0,
	0, 389, 418, 391, 412, 384, 408, 354, 401, 427,
	376, 405, 428, 0, 0, 0, 386, 82, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 404, 423, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 343, 403, 0, 347,
	350, 433, 421, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 388, 392, 393, 409, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 400, 0, 0,
	0, 351, 348, 0, 0, 0, 0, 353, 0, 368,
	410, 0, 342, 413, 419, 383, 197, 422, 381, 380,
	425, 139, 0, 0, 153, 105, 104, 113, 417, 365,
	373, 96, 371, 145, 135, 165, 399, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 330,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 340, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 346, 0, 151, 167,
	179, 361, 420, 173, 174, 175, 176, 0, 0, 0,
	341, 339, 335, 334, 333, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 357, 360, 355, 356, 395, 396,
	429, 430, 431, 411, 352, 0, 358, 359, 0, 415,
	398, 84, 0, 115, 177, 141, 102, 168, 133, 0,
	0, 818, 0, 258, 0, 0, 0, 100, 0, 253,
	0, 0, 114, 0, 0, 0, 292, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 282,
	256, 312, 305, 255, 254, 193, 307, 308, 309, 310,
	0, 93, 306, 313, 0, 311, 277, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 269, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 247, 0, 0, 0,
	303, 0, 268, 0, 0, 264, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 301, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 293, 302, 299,
	300, 297, 298, 296, 295, 294, 304, 285, 286, 287,
	288, 290, 0, 289, 84, 0, 115, 177, 141, 102,
	168, 133, 0, 0, 0, 0, 258, 0, 0, 0,
	100, 0, 253, 0, 0, 114, 0, 0, 0, 292,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 282, 256, 312, 305, 255, 254, 193, 307,
	308, 309, 310, 0, 93, 306, 313, 0, 311, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 269, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 247,
	0, 0, 0, 303, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 301, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	293, 302, 299, 300, 297, 298, 296, 295, 294, 304,
	285, 286, 287, 288, 290, 0, 289, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 0, 258,
	0, 0, 0, 100, 0, 253, 0, 0, 114, 0,
	0, 0, 292, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 489, 282, 256, 312, 305, 255,
	254, 193, 307, 308, 309, 310, 0, 93, 306, 313,
	0, 311, 277, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 269, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 303, 0, 268, 0,
	0, 264, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 301, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 293, 302, 299, 300, 297, 298, 296,
	295, 294, 304, 285, 286, 287, 288, 290, 0, 289,
	84, 0, 115, 177, 141, 102, 168, 133, 0, 0,
	0, 0, 258, 0, 0, 0, 100, 0, 253, 0,
	0, 114, 0, 0, 0, 292, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 0, 0, 901, 0, 56, 0, 0, 282, 256,
	312, 305, 255, 254, 193, 307, 308, 309, 310, 0,
	93, 306, 313, 0, 311, 277, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	269, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 0, 0, 0, 0, 303,
	0, 268, 0, 0, 264, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 301, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 293, 302, 299, 300,
	297, 298, 296, 295, 294, 304, 285, 286, 287, 288,
	290, 26, 289, 84, 0, 115, 177, 141, 102, 168,
	0, 0, 0, 133, 0, 0, 0, 0, 258, 0,
	0, 0, 100, 0, 253, 0, 0, 114, 0, 0,
	0, 292, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 282, 256, 312, 305, 255, 254,
	193, 307, 308, 309, 310, 0, 93, 306, 313, 0,
	311, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 269, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 303, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 301, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 293, 302, 299, 300, 297, 298, 296, 295,
	294, 304, 285, 286, 287, 288, 290, 0, 289, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 494, 0,
	0, 258, 0, 0, 0, 100, 0, 253, 0, 0,
	114, 0, 0, 0, 292, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 282, 256, 312,
	305, 255, 254, 193, 307, 308, 309, 310, 0, 93,
	306, 313, 0, 311, 277, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 269,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 267, 0, 0, 0, 0, 303, 0,
	268, 0, 0, 264, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	301, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 293, 302, 299, 300, 297,
	298, 296, 295, 294, 304, 285, 286, 287, 288, 290,
	0, 289, 84, 0, 115, 177, 141, 102, 168, 133,
	0, 0, 0, 0, 258, 0, 0, 0, 100, 0,
	253, 0, 0, 114, 0, 0, 0, 292, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	282, 256, 312, 305, 255, 254, 193, 307, 308, 309,
	310, 0, 93, 306, 313, 0, 311, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 269, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 0, 0, 0,
	0, 303, 0, 268, 0, 0, 264, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 301, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 293, 302,
	299, 300, 297, 298, 296, 295, 294, 304, 285, 286,
	287, 288, 290, 133, 289, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 554, 0, 0, 114, 0, 0,
	0, 292, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 282, 256, 312, 305, 255, 254,
	193, 307, 308, 309, 310, 0, 93, 306, 313, 0,
	311, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 303, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 301, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 1423, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 293, 302, 299, 300, 297, 298, 296, 295,
	294, 304, 285, 286, 287, 288, 290, 133, 289, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 554, 0,
	0, 114, 0, 0, 0, 292, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 282, 256,
	312, 305, 255, 254, 193, 307, 308, 309, 310, 0,
	93, 306, 313, 0, 311, 277, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 0, 0, 0, 0, 303,
	0, 268, 0, 0, 264, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 301, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 293, 302, 299, 300,
	297, 298, 296, 295, 294, 304, 285, 286, 287, 288,
	290, 133, 289, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 554, 0, 0, 114, 0, 0, 0, 292,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 282, 256, 312, 305, 567, 254, 193, 307,
	308, 309, 310, 0, 93, 306, 313, 0, 311, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 0,
	0, 0, 0, 303, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 301, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	293, 302, 299, 300, 297, 298, 296, 295, 294, 304,
	285, 286, 287, 288, 290, 0, 289, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 512, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 514,
	515, 516, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 73,
	0, 0, 0, 79, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 75, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 76, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 82, 0, 0, 514, 515, 516,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 84, 0,
	115, 177, 141, 102, 168, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 195, 0,
	0, 194, 192, 193, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 115, 177, 141, 102, 168, 133,
	0, 0, 0, 616, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 638, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 640, 639, 641, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 177, 141, 102, 168,
	133, 0, 0, 0, 616, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 614, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 84, 0, 115, 177,
	141, 102, 168, 594, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 514, 515, 516, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 194, 777, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 81, 0, 760, 0, 0,
	761, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 115, 177, 141, 102, 168,
}

var yyPact = [...]int16{
	2010, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 914, 948, -1000, -1000, -1000, -1000,
	-1000, -1000, 665, 8210, 46, 68, -38, 10515, 66, 309,
	11277, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-43, 11277, 442, 604, -1000, -1000, -1000, -1000, -1000, 907,
	912, 655, 898, 765, -1000, 5613, 19, 9235, 10261, 5087,
	-1000, 440, 54, 11277, -170, 11785, 11, 11, 11, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	65, 11277, -1000, 11277, 9, 439, 9, 9, 9, 11277,
	-1000, 98, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11277,
	438, 840, 62, 3983, 3983, 3983, 3983, -23, -25, 3983,
	-123, -109, 721, -1000, -1000, -1000, -1000, 3983, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11277,
	724, 675, 448, 873, 6668, 6931, 914, -1000, 604, -1000,
	-1000, -1000, 807, -1000, -1000, 270, 934, -1000, 7956, 97,
	-1000, 6931, 2179, 643, -1000, -1000, -1000, -1000, 643, -1000,
	-1000, -1000, -1000, 78, 7439, 7439, 7439, 7439, 7439, 7439,
	-1000, -1000, -1000, -1000, -1000, -1000, 241, -1000, -1000, -1000,
	6405, 643, 7693, 643, 643, 643, 643, 643, 643, 643,
	643, 6931, 643, 643, 643, 643, 643, 643, 643, 643,
	643, 643, 643, 643, 643, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10007, 574, 749, -1000, -1000, -1000,
	895, 8718, 9752, 11277, 551, -1000, 636, 631, 4811, -35,
	-120, -1000, 24, -1000, -1000, -1000, 169, 9489, -1000, -1000,
	836, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 534, -1000, 2045, 432, 3983,
	43, 672, 428, 180, 418, 11277, 11277, 3983, 21, 11277,
	890, 720, 11277, 408, 376, -1000, 3707, -1000, 3983, 3983,
	3983, 3983, 3983, 3983, 3983, 3983, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3983, 3983, 3983, 3983, -1000, -125, -106,
	-1000, 11277, -1000, -1000, 85, 85, 2045, 11277, -1000, -1000,
	-1000, 940, 124, 386, 905, 95, 640, -1000, 372, 907,
	448, 765, 11531, 736, -1000, -1000, 11277, -1000, 6931, 6931,
	314, -1000, 10769, -1000, -1000, -1000, -1000, -1000, 3155, 140,
	7439, 258, 151, 7439, 7439, 7439, 7439, 7439, 7439, 7439,
	7439, 7439, 7439, 7439, 7439, 7439, 7439, 7439, 7439, 382,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 359, -1000,
	604, 839, 839, 108, -1000, 108, 108, 108, 108, 108,
	247, -1000, 448, 530, 266, 6405, 5350, -1000, 1868, 5613,
	5613, 6931, 6931, 11023, 11023, 5613, 900, 175, 266, 11023,
	-1000, 448, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5613,
	5613, 5613, 5613, 143, 11277, -1000, 11023, 9235, 9235, 9235,
	9235, 9235, -1000, 760, 748, -1000, 735, 733, 768, 11277,
	-1000, 525, 8718, 141, 643, -1000, 11277, -1000, -10, 487,
	9235, 11277, -1000, -1000, 4811, 7439, 636, 631, -120, 612,
	-1000, -148, -131, 7439, 6139, 69, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2879, 205, 235, -97, -1000, -1000, -1000,
	-1000, 651, -1000, 651, 651, 651, 651, -68, -68, -68,
	-68, -1000, -1000, -1000, -1000, -1000, 664, 663, -1000, 651,
	651, 651, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 662,
	662, 662, 653, 653, 673, -1000, 11277, -191, 355, 3983,
	887, 3983, -1000, 104, -1000, 11277, -1000, -1000, 11277, 3983,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 518, -1000, 620, -1000, -1000, 778, 6931, 6931, 6931,
	3431, 6931, -1000, 830, 828, 873, -1000, 900, 927, -1000,
	822, 810, 5613, -1000, -1000, 140, 145, -1000, -1000, 310,
	-1000, -1000, -1000, -1000, 91, 643, -1000, -1000, 2196, -1000,
	-1000, -1000, -1000, 258, 7439, 7439, 7439, 7439, 56, 56,
	2196, 2035, 635, 753, 108, 324, 324, 107, 107, 107,
	107, 107, 725, 725, -1000, -1000, -1000, 448, 241, -1000,
	-1000, 241, -1000, -1000, 6931, -1000, 448, 448, 5613, 565,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 514, 514, 318, 239, 609, -1000, 90, 601,
	514, 5613, 220, -1000, 6931, 448, -1000, 514, 448, 514,
	514, 567, 794, 643, -1000, 582, -1000, 165, 749, 660,
	718, 965, -1000, -1000, -1000, -1000, 741, -1000, 734, -1000,
	-1000, -1000, -1000, -1000, 53, 52, 48, 11785, -1000, 932,
	9235, 615, -1000, -1000, 2196, 612, -120, -153, -1000, -1000,
	2196, -1000, 266, -1000, 430, 602, 2592, -1000, -1000, -1000,
	-1000, -1000, -1000, 657, 865, 171, 170, 343, -1000, -1000,
	842, -1000, 208, -99, -1000, -1000, 313, -68, -68, -1000,
	-1000, 69, 835, 69, 69, 69, 417, 417, -1000, -1000,
	-1000, -1000, 302, -1000, -1000, -1000, 300, -1000, 688, 11785,
	3983, -1000, 4535, -1000, -1000, -1000, -1000, -1000, -1000, 597,
	191, 186, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -11, -1000, 3983, -1000, 264, 11277, 11277,
	2045, 894, 11277, 776, 266, 266, 266, 88, -1000, 792,
	790, -1000, 11277, -1000, -1000, -1000, -1000, 585, -1000, -1000,
	-1000, 4259, 5613, -1000, 56, 56, 2196, 1929, -1000, 7439,
	-1000, 7439, -1000, 266, -1000, -1000, 514, 5613, -1000, -1000,
	332, 382, 332, 7439, 7439, 3431, 7439, 7439, -185, 641,
	164, -1000, 6931, 374, -1000, -1000, -1000, -1000, -1000, 686,
	11023, 643, -1000, 8464, -1000, 11785, 932, 914, 11023, 9235,
	6931, 6931, -1000, -1000, 6931, 656, -1000, 6931, -1000, -1000,
	-1000, 643, 643, 643, 481, -1000, 914, 615, -212, -1000,
	-1000, -137, -149, -1000, -1000, -1000, 2879, -1000, 2879, 11785,
	-1000, 340, 323, -1000, -1000, 576, 51, -1000, -1000, -1000,
	474, 69, 69, -1000, 192, -1000, -1000, -1000, 512, -1000,
	510, 583, 503, 11277, -1000, -1000, 575, -1000, 158, -1000,
	-1000, 11785, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11785, 11277, -1000, -1000, -1000, -1000,
	-1000, 11785, -1000, -1000, 417, 6931, -1000, -1000, -1000, 85,
	-1000, -1000, 4535, -1000, -1000, -1000, -1000, -1000, 932, 9235,
	-1000, -1000, 448, -1000, -1000, 7439, 2196, 2196, -1000, -1000,
	448, 651, 651, -1000, 651, 653, -1000, 651, -52, 651,
	-53, 643, 448, 448, 1512, 1795, -1000, 713, 1667, 643,
	-180, -1000, 266, 6931, -212, 868, 557, 495, -1000, -1000,
	5876, 448, 500, 87, 481, 914, 907, -1000, 569, 266,
	266, 266, 11785, 266, 11785, 11785, 11785, 8981, 11785, 907,
	-212, -1000, 5613, -1000, -1000, -1000, 2592, -1000, 472, -1000,
	651, -1000, -1000, -91, 939, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -68, 417, -68, 291,
	-1000, 289, 3983, 4535, 2879, -1000, 647, -1000, -1000, -1000,
	-1000, 870, -1000, 266, -1000, 928, 569, -1000, 2196, -1000,
	-1000, 102, -1000, -1000, -1000, -1000, -1000, -1000, 277, -1000,
	-1000, -1000, 7439, 7439, -1000, 7439, 7439, 7439, 448, 417,
	266, -1000, 861, -1000, 643, -1000, -1000, 573, 10769, 10769,
	-1000, 907, -212, 470, -1000, 456, 456, 456, 141, -1000,
	-212, -1000, 565, 118, 11785, -1000, 163, -1000, -158, 69,
	-1000, 69, 467, 460, -1000, -1000, -1000, 11785, 643, 926,
	911, -1000, -1000, 448, 1617, 1617, 1617, 1617, 301, -1000,
	-1000, 938, -1000, 643, -1000, 604, 86, -1000, -212, -1000,
	11785, -1000, -1000, -1000, -1000, -1000, -1000, 118, -1000, 316,
	155, 417, -1000, 254, 844, -1000, 841, -1000, -1000, -1000,
	-1000, -1000, 451, -12, -1000, 6931, 6931, -1000, -1000, -1000,
	-1000, -1000, 448, 37, -194, 11023, 495, 448, 10769, -1000,
	-1000, -1000, -1000, 262, -1000, -1000, -1000, 417, -1000, -1000,
	672, 447, -1000, 11785, 266, 477, -1000, 775, -189, -203,
	377, -1000, -1000, -1000, -1000, -191, -1000, -12, 786, -1000,
	770, -1000, -1000, -1000, -15, -192, -29, -196, 643, -205,
	7185, -1000, 1617, 448, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1186, 11, 36, 1185, 1183, 1182, 968, 962, 957,
	1178, 1175, 1174, 1173, 1170, 1169, 1166, 1165, 1162, 1161,
	1160, 1159, 1157, 1156, 1154, 1152, 1151, 137, 1149, 1148,
	1147, 56, 1146, 63, 1145, 1143, 41, 146, 55, 38,
	71, 1140, 1137, 34, 75, 107, 90, 1136, 43, 1135,
	1134, 1132, 59, 1131, 1130, 1420, 1128, 58, 13, 30,
	1127, 1125, 1124, 1121, 66, 667, 1120, 1118, 1117, 1115,
	1114, 1111, 1110, 45, 6, 9, 18, 19, 1109, 83,
	10, 1108, 46, 1107, 1106, 1105, 1101, 35, 1097, 51,
	1096, 15, 50, 1092, 17, 60, 27, 21, 4, 73,
	57, 72, 1091, 26, 53, 42, 1090, 1088, 374, 1087,
	1086, 1085, 1082, 1081, 1080, 142, 360, 1078, 1074, 1067,
	1061, 40, 188, 519, 860, 61, 1057, 1053, 5, 1048,
	1523, 67, 70, 22, 1043, 31, 1072, 32, 1041, 1040,
	1039, 1037, 29, 1035, 33, 1034, 1033, 1031, 1030, 1029,
	1028, 1027, 77, 1026, 1025, 1024, 14, 20, 1023, 1021,
	52, 47, 1018, 1017, 1007, 48, 49, 1006, 44, 1005,
	1004, 1003, 1002, 23, 24, 1001, 16, 999, 8, 997,
	992, 2, 991, 28, 989, 3, 988, 7, 39, 987,
	25, 37, 977, 975, 131, 973, 972, 971, 970, 0,
	507, 966, 964, 112,
}

var yyR1 = [...]uint8{
	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	8, 9, 9, 9, 201, 201, 44, 44, 95, 95,
	10, 10, 10, 10, 10, 10, 100, 100, 105, 105,
	105, 106, 106, 106, 106, 140, 140, 138, 138, 11,
	11, 11, 11, 11, 11, 11, 187, 187, 186, 185,
	185, 184, 184, 183, 16, 170, 171, 171, 171, 166,
	143, 143, 144, 144, 144, 144, 144, 151, 147, 147,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 148, 148, 148, 148, 148, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 150, 150, 150, 150, 150, 150, 150, 150,
	165, 165, 152, 152, 160, 160, 161, 161, 161, 158,
	158, 159, 159, 162, 162, 162, 153, 153, 153, 153,
	153, 153, 153, 155, 155, 163, 163, 156, 156, 156,
	157, 157, 157, 164, 164, 164, 164, 164, 154, 154,
	167, 167, 179, 179, 178, 178, 178, 169, 169, 175,
	175, 175, 175, 175, 168, 168, 177, 177, 176, 172,
	172, 172, 173, 173, 173, 174, 174, 174, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 182, 180,
	180, 181, 181, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 113, 113,
	110, 110, 111, 111, 112, 112, 112, 114, 114, 114,
	141, 141, 139, 139, 139, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 24, 25, 25, 25,
	191, 191, 191, 191, 191, 191, 26, 26, 192, 192,
	202, 27, 28, 28, 29, 29, 29, 33, 33, 33,
	31, 31, 32, 32, 38, 38, 37, 37, 39, 39,
	39, 39, 126, 126, 126, 128, 128, 128, 128, 125,
	41, 41, 42, 43, 43, 45, 45, 46, 46, 46,
	57, 57, 94, 94, 96, 96, 47, 47, 47, 47,
	48, 48, 49, 49, 50, 50, 134, 134, 133, 133,
	133, 132, 51, 51, 51, 53, 52, 52, 52, 52,
	54, 54, 56, 56, 55, 55, 58, 58, 58, 58,
	59, 59, 40, 40, 40, 40, 40, 40, 40, 109,
	109, 61, 61, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 72, 72, 72, 72, 72,
	72, 62, 62, 62, 62, 62, 62, 62, 36, 36,
	73, 73, 73, 79, 74, 74, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 196, 195, 70,
	70, 70, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 203, 203, 71, 71, 71,
	71, 34, 34, 34, 34, 34, 137, 137, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 83, 83, 35, 35, 81, 81, 82, 84,
	84, 67, 67, 67, 80, 80, 80, 123, 123, 123,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 189, 189, 66, 66, 66, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 90, 90, 90,
	90, 90, 90, 90, 91, 91, 91, 91, 91, 91,
	92, 92, 92, 63, 63, 63, 63, 63, 63, 93,
	93, 93, 93, 97, 97, 75, 75, 77, 77, 76,
	78, 190, 190, 98, 98, 103, 99, 99, 101, 101,
	104, 104, 104, 102, 102, 102, 129, 129, 129, 107,
	107, 115, 115, 116, 116, 108, 108, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 118, 118, 118,
	119, 119, 120, 120, 120, 127, 127, 124, 124, 130,
	130, 130, 130, 130, 131, 131, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 194, 194, 194,
	199, 200, 135, 136, 136, 136,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 10,
	9, 9, 8, 7, 1, 1, 1, 3, 0, 4,
	3, 3, 4, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	1, 3, 3, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 3, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 4, 6, 4,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	1, 1, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 4, 4, 7,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 1, 1, 1,
	0, 2, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 4, 5, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 2, 3, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 4, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	3, 3, 3, 3, 0, 2, 2, 4, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 0, 2, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 140, 141, 143, 142, 168, 144, 161,
	52, 180, 181, 183, 184, 25, 162, 163, 166, 167,
	185, 186, 187, -199, 8, 266, 56, -198, 282, -87,
	15, -29, 5, -27, -202, -27, -27, -27, -27, -27,
	-170, 56, -120, 149, 98, 176, 258, 146, 147, 153,
	-123, 64, 60, -122, 274, 180, 194, 188, 214, 206,
	204, 207, 244, 71, 183, 254, 164, 203, 199, 197,
	27, 219, 279, 198, 159, 158, 220, 224, 245, 192,
	193, 248, 218, 160, 32, 276, 37, 172, 249, 222,
	247, 217, 213, 216, 191, 212, 41, 226, 225, 227,
	243, 209, 200, 18, 252, 167, 170, 221, 223, 154,
	174, 278, 250, 196, 171, 166, 253, 184, 246, 256,
	40, 231, 190, 157, 181, 178, 210, 173, 201, 202,
	215, 189, 211, 182, 175, 168, 255, 232, 280, 208,
	205, 179, 177, 236, 237, 238, 239, 277, 251, 233,
	-108, 149, 151, 147, 147, 148, 149, 258, 146, 147,
	-55, -130, 64, 65, 63, 60, -122, 149, 176, 147,
	135, 207, 140, 234, 148, 32, 174, -139, -141, 147,
	182, -110, 177, 236, 237, 238, 239, 60, 246, 245,
	247, 240, -130, 182, -135, -135, -135, -135, -135, 186,
	-130, 60, -2, -91, 17, 16, -5, -3, -199, 6,
	20, 21, -33, 42, 43, -28, -39, 126, -40, -130,
	-60, 100, -65, 29, 64, 63, 60, -122, 23, -67,
	-61, -78, -79, -80, 135, 136, 124, 125, 132, 101,
	-195, -196, -70, -68, -69, -71, -64, 76, 77, -76,
	-199, -123, 59, 46, 47, 267, 268, 269, 270, 273,
	271, 103, 36, 257, 265, 264, 263, 261, 262, 259,
	260, 152, 258, 130, 266, 62, 72, 66, 67, 68,
	69, 75, 61, 73, -108, -43, -45, -46, -47, -57,
	-79, -199, -55, 11, -44, -57, -99, -101, -140, -138,
	182, -104, -123, 247, 246, 245, -124, -102, -121, 244,
	207, 243, 145, 99, 22, 24, 229, 102, 135, 16,
	103, 134, 267, 140, 50, 259, 260, 257, 269, 270,
	258, 234, 29, 10, 25, 162, 21, 128, 142, 106,
	107, 165, 23, 163, 77, 19, 53, 11, 13, 14,
	152, 151, 119, 148, 48, 8, 59, 26, 115, 44,
	28, 46, 116, 117, 17, 261, 262, 31, 273, 169,
	130, 51, 38, 100, 75, 54, 98, 15, 49, 118,
	143, 266, 47, 146, 6, 272, 30, 161, 45, 147,
	235, 105, 150, 76, 5, 153, 9, 52, 55, 263,
	264, 265, 36, 104, 12, -171, -166, 60, 148, -55,
	266, -123, -116, 152, -116, -116, 147, -55, -55, -115,
	152, 60, -115, -115, -115, -55, 137, -55, 60, 30,
	258, 60, 174, 147, 175, 149, -136, -199, -124, -123,
	-136, -136, -136, 178, 179, 178, 179, -136, 248, -111,
	241, 54, -136, -130, 11, 22, -199, 55, -200, 58,
	-92, 19, 31, -40, 20, -130, -88, -89, -40, -87,
	-2, -27, 38, -31, 21, 70, 11, -126, 99, 98,
	115, -125, 22, -128, 63, 64, 65, -123, 137, -40,
	-62, 119, 100, 116, 117, 118, 102, 121, 120, 131,
	124, 125, 126, 127, 128, 129, 130, 122, 123, 134,
	108, 109, 110, 111, 112, 113, 114, -109, -199, -79,
	-199, 138, 139, -65, 29, -65, -65, -65, -65, -65,
	-189, 74, -2, -74, -40, -199, -199, 63, -65, -199,
	-199, -199, -199, -199, -199, -199, -199, -83, -40, -199,
	-203, -199, -203, -203, -203, -203, -203, -203, -203, -199,
	-199, -199, -199, -56, 26, -55, 30, 57, -51, -53,
	-52, -54, 44, 48, 50, 45, 46, 47, 51, -134,
	22, -43, -199, -133, 170, -132, 22, -130, -57, -44,
	-201, 57, 11, 55, 57, 57, -99, -101, 182, -100,
	-105, 248, 250, 150, 108, -129, -123, -194, 29, 64,
	63, 65, 30, 58, 57, -144, -147, -149, -148, -150,
	-151, -145, -146, 204, 205, 135, 208, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 30, 164, 201,
	202, 203, 97, 220, 221, 222, 223, 224, 225, 226,
	227, 206, 188, 189, 190, 191, 192, 193, 194, 196,
	197, 198, 199, 200, 60, -136, 149, -187, 55, 60,
	100, 60, -55, -55, -136, 150, -55, 23, 54, -55,
	60, 60, -131, -130, -121, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, 249, -113, 235,
	242, -55, -191, -3, -7, -9, -8, 60, -194, 64,
	-191, -143, -144, -192, -130, 9, 119, 57, 18, 18,
	137, 57, -90, 24, 25, -91, -200, -33, -66, -123,
	66, 69, -32, 45, -55, -40, -40, -72, 75, 100,
	76, 77, -125, 126, -131, -124, -121, 64, -65, -73,
	-76, -79, 74, 119, 116, 117, 118, 102, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -137, 60, -194, 60, -64, 63,
	64, -64, 74, -200, 57, -200, -2, -38, 21, -37,
	-39, -193, 78, 79, 80, 81, 82, 83, 84, 85,
	97, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, -37, -37, -40, -40, -80, -123, -130, -80,
	-37, -31, -81, -82, 104, -80, -200, -37, -38, -37,
	-37, -95, 29, 170, -55, -98, -103, -80, -45, -46,
	-46, -45, -46, 44, 44, 44, 49, 44, 49, 44,
	-52, -130, -200, -58, 52, 151, 53, -199, -132, -95,
	55, -43, -57, -104, -65, -100, 57, 249, 251, 252,
	-65, 54, -40, -157, 134, -172, -173, -174, -124, -194,
	66, -166, -167, -175, 154, 157, 153, -168, 148, 28,
	-162, 75, 100, -158, 232, -152, 56, -152, -152, -152,
	-152, -156, 207, -156, -156, -156, 56, 56, -152, -152,
	-152, -160, 56, -160, -160, -161, 56, -161, -127, 55,
	-55, -185, 277, -186, 60, -136, 23, -136, -117, 145,
	142, 143, -182, 141, 229, 207, 71, 29, 15, 267,
	170, 280, 60, 171, -55, -55, -136, -112, 11, 119,
	57, -200, 57, 40, -40, -40, -40, -131, -89, 33,
	33, -92, -107, 19, 11, 36, 36, -37, 75, 76,
	77, 137, -199, -73, -65, -65, -65, -65, -36, 165,
	-36, 99, -200, -40, -200, -200, -37, 57, -200, -200,
	57, 55, 22, 57, 11, 137, 57, 11, -200, -37,
	-84, -82, 106, -40, -200, -200, -200, -200, -200, -63,
	30, 36, -2, -199, 36, -199, -42, -59, 57, 11,
	12, 108, -49, -48, 54, 55, -50, 54, -48, 44,
	44, 148, 148, 148, -96, -123, -59, -43, -59, -105,
	-106, 253, 250, 256, 60, -194, 57, -174, 108, 56,
	28, -168, -168, 60, 60, -153, 29, 75, -159, 233,
	66, -156, -156, -157, 30, -157, -157, -157, -165, -194,
	-165, 66, 66, 54, -123, -136, -184, -183, -124, -135,
	-188, 176, 155, 156, 159, 158, 60, 148, 28, 154,
	157, 170, 153, -188, 176, -118, -119, 150, 22, 148,
	28, 170, -136, -114, 116, 12, -130, -130, -144, 22,
	-130, 41, 137, 34, 35, 34, 35, -55, -41, 11,
	126, -124, -38, -36, -36, 99, -65, -65, -200, -39,
	-142, 135, 204, 164, 203, 199, 218, 209, 231, 201,
	232, 205, -137, -142, -65, -65, -124, -65, -65, 274,
	-87, 107, -40, 105, -97, 54, -98, -75, -77, -76,
	-199, -2, -93, -128, -96, -59, -87, -103, -43, -40,
	-40, -40, 56, -40, -199, -199, -199, -200, 57, -87,
	-59, -190, 281, 250, 254, 255, -173, -174, -177, -176,
	-123, 60, 60, -155, 54, -194, 66, 67, 75, 257,
	72, 58, -157, -157, 60, 135, 58, 57, 58, 57,
	58, 57, -55, 57, 108, -135, -123, -135, -123, -55,
	-135, -123, -194, -40, -191, -59, -43, -200, -65, -200,
	-152, -152, -152, -161, -152, 193, -152, 193, -199, -200,
	-200, -200, 57, 19, -200, 57, 19, -199, -35, 272,
	-40, -190, 27, -97, 57, -200, -200, -200, 57, 137,
	-200, -87, -91, -94, -123, -94, -94, -94, -133, -123,
	-91, -190, -37, 58, 57, -152, -163, 229, 9, -156,
	-194, -156, 66, 66, -136, -183, -174, 56, 26, -85,
	13, -156, 60, 66, -65, -65, -65, -65, -65, -200,
	-194, 28, -77, 36, -2, -199, -128, -128, -91, -190,
	57, 58, -200, -200, -200, -58, -190, -179, -178, 55,
	160, 71, -176, -164, 154, 28, 153, 257, -157, -157,
	58, 58, -94, -199, -86, 14, 16, -200, -200, -200,
	-200, -200, -34, 119, 277, 9, -75, -2, 137, -190,
	-123, -178, 60, -169, 108, -194, -154, 71, 28, 28,
	58, -180, -181, 170, -40, -74, -200, 275, 51, 278,
	-98, -200, -128, 66, -194, -187, -200, 57, -123, 41,
	276, 279, -185, -181, 36, 41, 172, 277, 173, 278,
	-199, 279, -65, 169, -200, -200,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 562, 0, 310, 310, 310, 310,
	310, 310, 0, 642, 625, 0, 0, 0, 0, -2,
	286, 287, 0, 289, 290, 872, 872, 872, 872, 872,
	0, 0, 0, 0, 37, 38, 870, 1, 3, 574,
	0, 0, 314, 317, 312, 0, 625, 0, 0, 0,
	69, 0, 0, 857, 0, 858, 623, 623, 623, 643,
	644, 537, 538, 539, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 859, 860, 861, 862, 863, 864, 865, 866,
	0, 0, 626, 0, 621, 0, 621, 621, 621, 0,
	240, 384, 649, 650, 651, 652, 653, 857, 858, 0,
	0, 0, 0, 873, 873, 873, 873, 0, 0, 873,
	0, 272, 261, 263, 264, 265, 266, 873, 283, 284,
	281, 271, 285, 288, 291, 292, 293, 294, 295, 0,
	0, 306, 30, 580, 0, 0, 562, 32, 0, 310,
	315, 316, 320, 318, 319, 311, 0, 328, 332, 0,
	392, 0, 397, -2, -2, -2, -2, -2, 0, 436,
	437, 438, 439, 532, 0, 0, 0, 0, 0, 0,
	461, 462, 463, 464, 465, 466, 533, 401, 402, 600,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 0, 495, 495, 495, 495, 495, 495, 495,
	495, 0, 0, 0, 0, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 0, 0, 343, 345, 346, 347,
	366, 0, 368, 0, 0, 46, 50, 51, 0, 65,
	848, 606, 647, -2, -2, -2, 0, 0, 648, -2,
	776, -2, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 0, 86, 0, 0, 873,
	0, 76, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 239, 0, 241, 873, 873,
	873, 873, 873, 873, 873, 873, 250, 874, 875, 647,
	251, 252, 253, 873, 873, 873, 873, 256, 0, 0,
	273, 0, 267, 296, 0, 0, 0, 0, 31, 871,
	25, 0, 0, 575, 576, 0, 563, 564, 567, 574,
	30, 317, 0, 322, 321, 313, 0, 329, 0, 0,
	0, 333, 0, 339, 335, 336, 337, 338, 0, 395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 422, 423, 424, 425, 426, 427, 398, 0, 414,
	0, 0, 0, 455, 552, 456, 457, 458, 459, 460,
	551, 553, 30, 0, 434, 0, 324, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 523, 0,
	487, 0, 488, 489, 490, 491, 492, 493, 494, 0,
	324, 0, 0, 48, 0, 383, 0, 0, 0, 0,
	0, 0, 372, 0, 0, 375, 0, 0, 0, 0,
	367, 0, 0, 386, 821, 369, 0, 371, -2, 0,
	0, 0, 44, 45, 0, 0, 52, 53, 0, 55,
	56, 0, 0, 0, 0, 170, 616, 617, 618, 537,
	867, 869, 614, 199, 0, 153, 149, 93, 94, 95,
	96, 142, 99, 142, 142, 142, 142, 167, 167, 167,
	167, 125, 126, 127, 128, 129, 0, 0, 112, 142,
	142, 142, 116, 132, 133, 134, 135, 136, 137, 138,
	139, 97, 100, 101, 102, 103, 104, 105, 106, 144,
	144, 144, 146, 146, 645, 71, 0, 79, 0, 873,
	0, 873, 84, 0, 215, 0, 234, 622, 0, 873,
	237, 238, 385, 654, 655, 242, 243, 244, 245, 246,
	247, 248, 249, 254, 259, 255, 260, 257, 274, 268,
	269, 262, 297, 300, 301, 302, 303, 304, 305, 868,
	298, 0, 90, 307, 308, 581, 0, 0, 0, 0,
	0, 0, 566, 568, 569, 580, 33, 320, 0, 555,
	0, 0, 0, 323, 28, 393, 394, 396, 415, 0,
	417, 419, 334, 330, 0, 535, -2, -2, 403, 404,
	430, 431, 432, 0, 0, 0, 0, 0, 428, 428,
	410, 0, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 454, 506, 507, 0, 452, 540,
	541, 453, 554, 433, 0, 599, 30, 0, 0, 325,
	326, 468, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 0, 0, 0, 0, 0, 534, 0, 0,
	0, 0, 529, 526, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 382, 390, 603, 0, 344, 362,
	364, 0, 359, 373, 374, 376, 0, 378, 0, 380,
	381, 348, 349, 350, 0, 0, 0, 0, 370, 390,
	0, 390, 47, 607, 609, 54, 0, 0, 59, 60,
	608, 610, 611, 612, 0, 85, 200, 202, 205, 206,
	207, 87, 88, 0, 0, 0, 0, 0, 194, 195,
	156, 154, 0, 151, 150, 98, 0, 167, 167, 119,
	120, 170, 0, 170, 170, 170, 0, 0, 113, 114,
	115, 107, 0, 108, 109, 110, 0, 111, 0, 0,
	873, 73, 0, 77, 78, 74, 624, 75, 872, 0,
	0, 637, 216, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 0, 233, 873, 236, 277, 0, 0,
	0, 0, 0, 0, 577, 578, 579, 0, 565, 0,
	0, 26, 0, 619, 620, 556, 557, 340, 416, 418,
	420, 0, 324, 405, 428, 428, 411, 0, 406, 0,
	407, 0, 400, 435, -2, 469, 0, 0, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	0, 527, 0, 0, 486, 497, 498, 499, 500, 593,
	0, 0, -2, 0, 36, 0, 390, 562, 0, 0,
	0, 0, 356, 363, 0, 0, 357, 0, 358, 377,
	379, 0, 0, 0, 0, 354, 562, 390, 601, 57,
	58, 0, 0, 64, 171, 172, 0, 203, 0, 0,
	189, 0, 0, 192, 193, 163, 0, 155, 92, 152,
	0, 170, 170, 121, 0, 122, 123, 124, 0, 140,
	0, 0, 0, 0, 646, 72, 80, 81, 0, 208,
	872, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 872, 0, 0, 872, 638, 639, 640,
	641, 0, 235, 258, 0, 0, 275, 276, 91, 0,
	309, 582, 0, 572, 573, 570, 571, 27, 390, 0,
	331, 536, 0, 408, 409, 0, 429, 412, 470, 327,
	0, 142, 142, 511, 142, 146, 514, 142, 516, 142,
	519, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	524, 485, 530, 0, 601, 0, 593, 583, 595, 597,
	0, 30, 0, 589, 0, 562, 574, 604, 342, 391,
	605, 360, 0, 365, 0, 0, 0, 368, 0, 574,
	601, 43, 0, 61, 62, 63, 201, 204, 0, 196,
	142, 190, 191, 165, 0, 157, 158, 159, 160, 161,
	162, 143, 117, 118, 168, 169, 167, 0, 167, 0,
	147, 0, 873, 0, 0, 209, 0, 210, 212, 213,
	214, 0, 278, 279, 299, 558, 341, 471, 413, 474,
	508, 167, 512, 513, 515, 517, 518, 520, 0, 476,
	475, 477, 0, 0, 480, 0, 0, 0, 0, 0,
	528, 34, 0, 35, 0, 598, -2, 0, 0, 0,
	49, 574, 601, 0, 352, 0, 0, 0, 386, 355,
	601, 42, 602, 181, 0, 198, 173, 166, 0, 170,
	141, 170, 0, 0, 70, 82, 83, 0, 0, 560,
	0, 509, 510, 0, 0, 0, 0, 0, 501, 484,
	525, 0, 596, 0, -2, 0, 591, 590, 601, 40,
	0, 361, 387, 388, 389, 351, 41, 180, 182, 0,
	187, 0, 197, 178, 0, 175, 177, 164, 130, 131,
	145, 148, 0, 0, 29, 0, 0, 521, 478, 479,
	481, 482, 0, 0, 0, 0, 586, 30, 0, 39,
	353, 183, 184, 0, 188, 186, 89, 0, 174, 176,
	76, 0, 229, 0, 561, 559, 483, 0, 0, 0,
	594, -2, 592, 185, 179, 79, 228, 0, 0, 502,
	0, 505, 211, 230, 0, 503, 0, 0, 0, 0,
	0, 504, 0, 0, 231, 232,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 129, 121, 3,
	56, 58, 126, 124, 57, 125, 137, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 282,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:374
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:465
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support FROM TableExpr with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit, Returning: yyDollar[10].returning}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:474
		{
			if yylex.(*Tokenizer).IsMySQL() && len(yyDollar[9].returning) != 0 {
				yylex.Error("MySQL/MariaDB dialect doesn't support returning with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{yyDollar[4].aliasedTableName}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableExprs, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), Returning: yyDollar[8].returning}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableExprs, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), Returning: yyDollar[7].returning}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].aliasedTableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].aliasedTableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = LocalStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:615
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:645
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:660
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:688
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:717
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.optVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:973
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:991
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1060
		{
			yyVAL.optVal = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1064
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1069
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1099
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.colKeyOpt = colKey
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1125
		{
			yyVAL.optVal = nil
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1159
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1280
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1284
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1307
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1346
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1350
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1356
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 232:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1360
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1372
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1380
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1385
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1483
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = "extended "
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1557
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.str = "full "
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1581
		{
			yyVAL.showFilter = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1589
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = LocalStr
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = SessionStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = GlobalStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &Begin{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Commit{}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Rollback{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &OtherRead{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1744
		{
			setAllowComments(yylex, true)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.bytes2 = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = UnionStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = UnionAllStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.str = UnionDistinctStr
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.str = SQLCacheStr
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.str = DistinctStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.str = StraightJoinHint
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1808
		{
			yyVAL.selectExprs = nil
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1845
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1853
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1927
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1964
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1980
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1984
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1990
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1995
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = JoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = JoinStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = StraightJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = LeftJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = LeftJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = RightJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = RightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = NaturalJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2089
		{
			yyVAL.indexHints = nil
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2093
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2097
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2101
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = nil
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2194
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.str = IsNullStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			yyVAL.str = IsNotNullStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = IsTrueStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = IsNotTrueStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = IsFalseStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = IsNotFalseStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.str = EqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.str = LessThanStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = GreaterThanStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.str = LessEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.str = GreaterEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = NotEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = nil
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2458
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2626
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.str = BooleanModeStr
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.str = QueryExpansionStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = string("")
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2746
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2788
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &NullVal{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &Default{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2878
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2904
		{
			yyVAL.exprs = nil
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2908
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2922
		{
			yyVAL.orderBy = nil
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2936
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = AscScr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = DescScr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.str = DescNullsLastScr
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.str = AscNullsLastScr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.limit = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2984
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow 'LIMIT offset, limit' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3000
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3004
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = ""
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = ForUpdateStr
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3021
		{
			yyVAL.str = ShareModeStr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3034
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3047
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3051
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3055
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3079
		{
			yyVAL.updateExprs = nil
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3083
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3093
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3103
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3126
		{
			yyVAL.returning = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3142
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3148
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3182
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3189
		{
			yyVAL.bytes = []byte("charset")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			yyVAL.expr = &Default{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3213
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3215
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3223
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.str = IgnoreStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3270
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3272
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			decNesting(yylex)
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3576
		{
			forceEOF(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3581
		{
			forceEOF(yylex)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			forceEOF(yylex)
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
