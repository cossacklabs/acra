// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

// setErrorVerbose configures format of ErrorMessages from parser. If false then only "syntax error" will be shown.
// Default is false
func SetSQLParserErrorVerboseLevel(verbose bool) {
	yyErrorVerbose = verbose
}

// setDebugLevel configures debug level of log messages from parser. Default is 0
func setDebugLevel(level int) {
	if level < 0 {
		panic("unsupported debug level for sqlparser")
	}
	yyDebug = level
}

//line sql.y:68
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const ILIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const JSON_EXTRACT_OP = 57463
const JSON_UNQUOTE_EXTRACT_OP = 57464
const CREATE = 57465
const ALTER = 57466
const DROP = 57467
const RENAME = 57468
const ANALYZE = 57469
const ADD = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const CONSTRAINT = 57481
const SPATIAL = 57482
const FULLTEXT = 57483
const FOREIGN = 57484
const KEY_BLOCK_SIZE = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const MAXVALUE = 57494
const PARTITION = 57495
const REORGANIZE = 57496
const LESS = 57497
const THAN = 57498
const PROCEDURE = 57499
const TRIGGER = 57500
const VINDEX = 57501
const VINDEXES = 57502
const STATUS = 57503
const VARIABLES = 57504
const BEGIN = 57505
const START = 57506
const TRANSACTION = 57507
const COMMIT = 57508
const ROLLBACK = 57509
const DEALLOCATE = 57510
const PREPARE = 57511
const EXECUTE = 57512
const BIT = 57513
const TINYINT = 57514
const SMALLINT = 57515
const MEDIUMINT = 57516
const INT = 57517
const INTEGER = 57518
const BIGINT = 57519
const INTNUM = 57520
const REAL = 57521
const DOUBLE = 57522
const FLOAT_TYPE = 57523
const DECIMAL = 57524
const NUMERIC = 57525
const TIME = 57526
const TIMESTAMP = 57527
const DATETIME = 57528
const CHAR = 57529
const VARCHAR = 57530
const BOOL = 57531
const CHARACTER = 57532
const VARBINARY = 57533
const NCHAR = 57534
const BYTEA = 57535
const INT4 = 57536
const INT8 = 57537
const TEXT = 57538
const TINYTEXT = 57539
const MEDIUMTEXT = 57540
const LONGTEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const DATABASES = 57562
const TABLES = 57563
const VITESS_KEYSPACES = 57564
const VITESS_SHARDS = 57565
const VITESS_TABLETS = 57566
const VSCHEMA_TABLES = 57567
const EXTENDED = 57568
const FULL = 57569
const PROCESSLIST = 57570
const NAMES = 57571
const CHARSET = 57572
const GLOBAL = 57573
const SESSION = 57574
const LOCAL = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const MATCH = 57601
const AGAINST = 57602
const BOOLEAN = 57603
const LANGUAGE = 57604
const WITH = 57605
const QUERY = 57606
const EXPANSION = 57607
const UNUSED = 57608
const RETURNING = 57609

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"ILIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"BYTEA",
	"INT4",
	"INT8",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	178, 289,
	179, 289,
	-2, 277,
	-1, 258,
	74, 562,
	100, 562,
	102, 562,
	108, 562,
	109, 562,
	110, 562,
	111, 562,
	112, 562,
	113, 562,
	114, 562,
	116, 562,
	117, 562,
	118, 562,
	119, 562,
	120, 562,
	121, 562,
	122, 562,
	123, 562,
	124, 562,
	125, 562,
	126, 562,
	127, 562,
	128, 562,
	129, 562,
	130, 562,
	131, 562,
	134, 562,
	-2, 408,
	-1, 259,
	56, 547,
	74, 551,
	137, 659,
	138, 547,
	139, 547,
	-2, 541,
	-1, 260,
	137, 661,
	-2, 550,
	-1, 261,
	137, 662,
	-2, 548,
	-1, 262,
	137, 663,
	-2, 549,
	-1, 339,
	108, 815,
	-2, 66,
	-1, 340,
	108, 843,
	-2, 67,
	-1, 341,
	108, 803,
	-2, 68,
	-1, 345,
	108, 787,
	150, 787,
	-2, 623,
	-1, 347,
	108, 825,
	150, 825,
	-2, 625,
	-1, 574,
	74, 550,
	137, 661,
	-2, 476,
	-1, 626,
	55, 46,
	57, 46,
	-2, 48,
	-1, 789,
	137, 665,
	-2, 658,
	-1, 790,
	137, 659,
	-2, 547,
	-1, 1028,
	5, 31,
	-2, 442,
	-1, 1057,
	5, 30,
	-2, 594,
	-1, 1301,
	5, 31,
	-2, 595,
	-1, 1349,
	5, 30,
	-2, 597,
	-1, 1416,
	5, 31,
	-2, 598,
}

const yyPrivate = 57344

const yyLast = 12405

var yyAct = [...]int16{
	285, 53, 1407, 965, 708, 879, 570, 1363, 1202, 1226,
	268, 520, 897, 1234, 945, 921, 1199, 569, 3, 1308,
	238, 1203, 1122, 621, 959, 920, 1175, 24, 743, 880,
	1079, 59, 817, 344, 917, 833, 1022, 228, 284, 753,
	1125, 1113, 619, 1068, 866, 792, 497, 638, 504, 1062,
	955, 441, 337, 637, 53, 931, 608, 325, 518, 875,
	322, 247, 243, 830, 510, 281, 623, 832, 327, 323,
	923, 237, 333, 1001, 332, 330, 58, 1227, 1436, 1426,
	1434, 1414, 1432, 966, 229, 230, 231, 232, 1425, 242,
	587, 1413, 1194, 1294, 445, 244, 1372, 54, 29, 30,
	1228, 251, 1229, 1230, 495, 192, 188, 189, 190, 1087,
	321, 911, 1086, 466, 483, 1088, 912, 913, 639, 485,
	640, 982, 738, 740, 1104, 938, 331, 1322, 946, 328,
	741, 1337, 1282, 454, 1280, 981, 1388, 535, 534, 544,
	545, 537, 538, 539, 540, 541, 542, 543, 536, 748,
	636, 546, 648, 750, 649, 63, 227, 234, 1433, 648,
	750, 649, 1241, 1242, 480, 481, 986, 194, 1245, 478,
	479, 1243, 1431, 1408, 1146, 876, 877, 980, 455, 1364,
	898, 900, 448, 65, 66, 67, 68, 69, 185, 186,
	186, 716, 641, 707, 1370, 1366, 1078, 1077, 1076, 443,
	468, 933, 470, 444, 451, 203, 187, 1393, 472, 472,
	472, 472, 558, 559, 472, 933, 1304, 1157, 1039, 1143,
	191, 1015, 472, 933, 209, 1145, 992, 467, 469, 763,
	525, 461, 536, 1098, 918, 546, 491, 494, 539, 540,
	541, 542, 543, 536, 53, 546, 546, 977, 974, 975,
	759, 973, 221, 800, 1249, 442, 1150, 516, 515, 555,
	517, 507, 1399, 1259, 557, 516, 515, 797, 798, 799,
	796, 1066, 1198, 506, 517, 493, 984, 987, 946, 899,
	766, 767, 517, 233, 1365, 642, 572, 573, 1196, 576,
	577, 578, 579, 580, 581, 582, 583, 1389, 586, 588,
	588, 588, 588, 588, 588, 588, 588, 596, 597, 598,
	599, 600, 262, 979, 465, 452, 877, 453, 1412, 1371,
	1369, 932, 867, 460, 457, 458, 459, 204, 620, 1250,
	711, 761, 206, 462, 993, 932, 1102, 935, 978, 213,
	208, 515, 568, 932, 1036, 1144, 83, 1142, 930, 928,
	200, 825, 929, 200, 516, 515, 1244, 517, 55, 1035,
	1149, 1034, 936, 867, 200, 1046, 210, 56, 447, 216,
	760, 517, 1402, 512, 214, 1418, 983, 1012, 1013, 1014,
	200, 200, 83, 1133, 184, 795, 200, 626, 83, 985,
	589, 590, 591, 592, 593, 594, 595, 1338, 1328, 205,
	508, 1327, 516, 515, 1117, 627, 1116, 635, 1105, 634,
	1397, 516, 515, 818, 645, 1131, 648, 750, 649, 517,
	516, 515, 1237, 1133, 781, 783, 784, 1236, 517, 207,
	1099, 217, 218, 219, 220, 225, 968, 517, 820, 722,
	223, 222, 224, 721, 712, 472, 449, 450, 710, 782,
	603, 320, 705, 472, 1089, 1131, 463, 648, 750, 649,
	648, 750, 649, 257, 472, 472, 472, 472, 472, 472,
	472, 472, 456, 442, 236, 1422, 496, 1355, 1405, 472,
	472, 472, 472, 1355, 496, 1355, 1356, 939, 1319, 1318,
	1223, 496, 1303, 496, 496, 725, 1256, 1255, 200, 1376,
	200, 1252, 1253, 1132, 1252, 1251, 200, 1375, 1137, 1134,
	1127, 1128, 1135, 1130, 1129, 1246, 200, 744, 744, 751,
	83, 83, 83, 83, 1063, 1136, 83, 768, 1031, 496,
	630, 1139, 994, 496, 83, 723, 1064, 1065, 26, 605,
	496, 827, 496, 1132, 652, 651, 200, 1164, 1137, 1134,
	1127, 1128, 1135, 1130, 1129, 26, 1065, 1041, 53, 789,
	749, 749, 1055, 827, 1299, 1136, 83, 793, 1056, 1200,
	770, 1126, 1063, 572, 631, 904, 629, 629, 785, 1031,
	713, 714, 1063, 267, 717, 1348, 1038, 720, 56, 60,
	829, 859, 862, 1031, 605, 604, 1258, 868, 1254, 787,
	1091, 605, 26, 1040, 910, 56, 327, 327, 327, 327,
	327, 996, 769, 633, 632, 881, 742, 819, 764, 286,
	244, 620, 605, 901, 821, 824, 492, 56, 1176, 327,
	1239, 1031, 1037, 200, 56, 489, 1332, 940, 829, 960,
	200, 200, 200, 777, 855, 856, 490, 83, 864, 1217,
	863, 326, 56, 80, 1094, 956, 83, 1178, 1069, 1070,
	709, 871, 872, 951, 870, 950, 882, 873, 874, 885,
	56, 905, 71, 894, 826, 828, 883, 884, 963, 886,
	56, 947, 948, 949, 1200, 907, 903, 906, 1118, 338,
	909, 902, 1180, 869, 1184, 446, 1179, 1177, 1186, 1072,
	719, 486, 1182, 891, 925, 889, 997, 776, 892, 1075,
	890, 472, 1074, 472, 1181, 888, 893, 473, 614, 615,
	887, 472, 248, 249, 896, 1430, 1424, 1183, 1185, 961,
	1156, 511, 878, 560, 562, 563, 564, 565, 566, 537,
	538, 539, 540, 541, 542, 543, 536, 1429, 509, 546,
	1059, 575, 957, 958, 1160, 1161, 1004, 83, 1158, 1159,
	1003, 1010, 1009, 200, 200, 83, 1109, 200, 1404, 650,
	200, 464, 498, 1101, 200, 1403, 83, 83, 83, 83,
	83, 83, 83, 83, 499, 1346, 1095, 342, 1297, 1016,
	1333, 83, 83, 83, 83, 970, 718, 789, 1154, 200,
	618, 245, 246, 511, 755, 200, 1008, 762, 239, 1381,
	240, 60, 1380, 1002, 1007, 1005, 1335, 1290, 496, 1065,
	513, 1390, 83, 1323, 758, 62, 200, 474, 474, 474,
	474, 64, 83, 474, 628, 793, 57, 964, 1, 1024,
	276, 474, 1017, 1011, 746, 7, 988, 556, 275, 989,
	747, 6, 745, 5, 834, 756, 567, 995, 535, 534,
	544, 545, 537, 538, 539, 540, 541, 542, 543, 536,
	967, 1121, 546, 524, 976, 1406, 1058, 1362, 1060, 1233,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 927, 1057, 546, 919, 440, 70, 1398, 1030,
	926, 1368, 1321, 1023, 934, 327, 1103, 937, 1238, 1401,
	1045, 326, 1100, 658, 657, 200, 655, 656, 200, 200,
	200, 200, 200, 654, 660, 1026, 659, 653, 752, 1073,
	200, 212, 1043, 200, 1028, 1029, 1092, 200, 334, 211,
	335, 200, 200, 617, 643, 83, 962, 1082, 514, 72,
	1141, 1140, 972, 1081, 338, 1083, 1106, 1107, 1084, 1148,
	1032, 1033, 739, 644, 83, 472, 991, 484, 1042, 215,
	554, 1006, 1085, 1048, 496, 1049, 1050, 1051, 1052, 1053,
	1108, 343, 1110, 1111, 1112, 1096, 1097, 1207, 765, 1090,
	472, 791, 503, 1115, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	1124, 1379, 1334, 1044, 584, 1138, 865, 266, 780, 280,
	200, 1114, 1114, 83, 277, 83, 279, 278, 264, 200,
	771, 1054, 200, 83, 1153, 527, 535, 534, 544, 545,
	537, 538, 539, 540, 541, 542, 543, 536, 265, 255,
	546, 601, 342, 609, 607, 1168, 1169, 1205, 606, 53,
	1071, 1201, 1067, 1188, 474, 327, 881, 1174, 1187, 324,
	1208, 1061, 474, 789, 881, 1195, 1206, 1219, 1220, 1221,
	1167, 1163, 1293, 474, 474, 474, 474, 474, 474, 474,
	474, 1209, 1387, 1212, 1211, 1204, 775, 908, 474, 474,
	474, 474, 28, 61, 250, 914, 819, 1213, 23, 1232,
	22, 1210, 794, 1224, 21, 19, 18, 1231, 534, 544,
	545, 537, 538, 539, 540, 541, 542, 543, 536, 772,
	17, 546, 1225, 20, 16, 1173, 1162, 15, 14, 524,
	32, 1247, 1248, 13, 12, 474, 11, 10, 9, 941,
	942, 943, 944, 610, 613, 614, 615, 611, 8, 612,
	616, 4, 241, 1260, 25, 327, 952, 953, 954, 2,
	0, 0, 1240, 0, 0, 0, 1262, 0, 0, 1265,
	0, 0, 744, 1269, 1222, 0, 0, 1283, 0, 326,
	326, 326, 326, 326, 0, 1292, 0, 0, 0, 0,
	860, 860, 0, 0, 326, 1278, 860, 1271, 0, 1296,
	0, 0, 326, 1270, 83, 0, 0, 200, 1298, 0,
	1267, 253, 0, 0, 860, 749, 0, 0, 0, 0,
	0, 0, 1307, 83, 0, 1316, 0, 0, 0, 1310,
	1311, 1312, 1306, 788, 0, 1315, 1313, 1092, 1257, 0,
	0, 0, 474, 0, 0, 0, 0, 0, 472, 0,
	0, 1018, 1019, 1020, 1021, 0, 1324, 0, 1326, 0,
	1264, 474, 1272, 0, 0, 1331, 83, 83, 0, 83,
	1274, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 1284, 1285, 1286, 1317, 0, 1289, 0, 0,
	1205, 0, 83, 1350, 0, 200, 200, 755, 0, 200,
	1300, 1301, 1302, 0, 1305, 1351, 1352, 1354, 0, 200,
	1349, 1347, 0, 1325, 0, 1361, 1360, 1353, 83, 0,
	474, 0, 474, 1367, 1378, 0, 0, 0, 1204, 0,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 1205,
	342, 53, 1377, 0, 0, 0, 0, 1391, 0, 1373,
	0, 1374, 0, 1394, 0, 1345, 0, 0, 1392, 922,
	1396, 83, 0, 83, 0, 0, 0, 200, 0, 0,
	794, 0, 0, 474, 0, 0, 0, 1204, 1410, 0,
	0, 471, 0, 0, 0, 0, 1415, 0, 1344, 0,
	0, 881, 0, 0, 83, 1417, 83, 83, 0, 0,
	1420, 0, 0, 0, 0, 1357, 1358, 1359, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 200, 0, 0, 1435, 0, 0, 1400, 0, 83,
	0, 0, 0, 1382, 1383, 1384, 1385, 1386, 0, 0,
	0, 0, 83, 200, 0, 0, 0, 0, 0, 83,
	0, 500, 505, 0, 0, 610, 613, 614, 615, 611,
	83, 612, 616, 1419, 0, 1069, 1070, 200, 526, 0,
	0, 788, 0, 0, 0, 502, 0, 1171, 326, 1172,
	0, 0, 1411, 0, 0, 0, 0, 1416, 0, 0,
	0, 1189, 1190, 0, 1192, 1193, 0, 571, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 585, 0,
	0, 1080, 0, 195, 0, 0, 226, 0, 0, 0,
	83, 0, 83, 83, 83, 200, 83, 235, 0, 0,
	474, 0, 1439, 1440, 83, 0, 0, 0, 0, 0,
	0, 254, 0, 195, 195, 0, 1287, 496, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 83, 83, 544, 545, 537, 538, 539, 540, 541,
	542, 543, 536, 1119, 474, 546, 474, 0, 0, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 476, 477, 0, 0, 482, 0, 0, 0, 474,
	0, 0, 0, 487, 0, 0, 83, 83, 0, 535,
	534, 544, 545, 537, 538, 539, 540, 541, 542, 543,
	536, 0, 83, 546, 1273, 474, 0, 0, 922, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 0, 0, 0, 1275, 1276, 0, 1277, 83, 0,
	1279, 195, 1281, 195, 0, 860, 0, 0, 524, 195,
	1080, 0, 0, 860, 1123, 0, 0, 0, 0, 195,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 0, 0, 546, 0, 83, 0, 0, 0,
	0, 474, 0, 474, 1235, 1288, 571, 0, 0, 488,
	0, 83, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1166, 0, 0, 0, 778, 779, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 326, 0,
	0, 1339, 1340, 0, 1341, 1342, 1343, 1191, 0, 1263,
	0, 0, 529, 0, 533, 0, 1266, 0, 0, 0,
	547, 548, 549, 550, 551, 552, 553, 474, 530, 531,
	532, 528, 535, 534, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 571, 0, 546, 0, 0, 0,
	857, 858, 0, 0, 0, 0, 195, 0, 0, 922,
	0, 922, 0, 195, 625, 195, 535, 534, 544, 545,
	537, 538, 539, 540, 541, 542, 543, 536, 0, 0,
	546, 0, 0, 0, 0, 0, 706, 1309, 0, 1309,
	1309, 1309, 0, 1314, 715, 0, 0, 0, 0, 0,
	0, 474, 0, 0, 0, 726, 727, 728, 729, 730,
	731, 732, 733, 1170, 916, 0, 0, 0, 0, 0,
	734, 735, 736, 737, 0, 1166, 0, 474, 474, 474,
	1025, 0, 0, 0, 535, 534, 544, 545, 537, 538,
	539, 540, 541, 542, 543, 536, 0, 0, 546, 1437,
	0, 535, 534, 544, 545, 537, 538, 539, 540, 541,
	542, 543, 536, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 524, 524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 195, 0, 1235,
	195, 0, 0, 195, 0, 0, 0, 724, 0, 922,
	0, 0, 1309, 535, 534, 544, 545, 537, 538, 539,
	540, 541, 542, 543, 536, 0, 0, 546, 0, 0,
	0, 0, 195, 0, 0, 1395, 1123, 922, 757, 0,
	0, 0, 998, 999, 1000, 0, 505, 561, 26, 27,
	54, 29, 30, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	860, 724, 31, 524, 0, 0, 0, 0, 0, 318,
	311, 822, 823, 0, 313, 314, 315, 316, 1423, 0,
	312, 319, 0, 317, 40, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 254, 254, 0, 0, 861, 861, 254, 0,
	0, 0, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 254, 254, 254, 254, 0, 195, 1047,
	861, 195, 195, 195, 195, 195, 0, 0, 0, 0,
	0, 0, 969, 895, 971, 0, 195, 0, 0, 0,
	625, 0, 990, 0, 195, 195, 0, 0, 0, 0,
	0, 0, 33, 34, 36, 35, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 39, 46, 47, 0, 0, 48, 49,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 0, 43, 44, 50, 51, 52,
	835, 836, 837, 838, 839, 840, 841, 842, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 843,
	0, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 195, 0, 681, 0, 0,
	0, 0, 535, 534, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 724,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 1215, 0,
	0, 1216, 0, 0, 1218, 0, 0, 0, 691, 692,
	693, 694, 695, 696, 697, 0, 700, 701, 702, 703,
	704, 678, 679, 680, 661, 662, 690, 254, 664, 0,
	673, 698, 699, 665, 666, 667, 668, 669, 670, 671,
	672, 674, 675, 682, 683, 684, 685, 686, 687, 688,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1151, 1152,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 0, 0, 861,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 429, 419, 0, 390, 431, 368,
	382, 439, 383, 384, 412, 354, 399, 134, 380, 0,
	371, 350, 377, 351, 369, 392, 101, 395, 367, 421,
	402, 115, 1409, 571, 195, 437, 117, 407, 0, 151,
	127, 0, 0, 394, 423, 396, 417, 389, 413, 359,
	406, 432, 381, 410, 433, 0, 195, 0, 391, 82,
	0, 0, 648, 647, 649, 924, 0, 0, 0, 0,
	94, 0, 0, 0, 409, 428, 379, 0, 0, 1329,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 349, 408,
	0, 352, 355, 438, 426, 374, 375, 1093, 0, 0,
	0, 0, 0, 0, 393, 397, 398, 414, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 372, 0, 405,
	0, 0, 0, 356, 353, 0, 0, 0, 625, 358,
	0, 373, 415, 254, 348, 418, 424, 388, 201, 427,
	386, 385, 430, 140, 0, 0, 154, 106, 105, 114,
	422, 370, 378, 97, 376, 146, 136, 166, 404, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 92, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 366, 425, 177, 178,
	179, 180, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 362,
	365, 360, 361, 400, 401, 434, 435, 436, 416, 357,
	0, 363, 364, 0, 420, 403, 84, 0, 116, 181,
	142, 103, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 419, 0, 390, 431, 368, 382, 439, 383,
	384, 412, 354, 399, 134, 380, 861, 371, 350, 377,
	351, 369, 392, 101, 395, 367, 421, 402, 115, 0,
	0, 0, 437, 117, 407, 0, 151, 127, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 406, 432, 381,
	410, 433, 0, 0, 0, 391, 82, 0, 0, 648,
	647, 649, 924, 0, 0, 0, 0, 94, 0, 0,
	0, 409, 428, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 349, 408, 0, 352, 355,
	438, 426, 374, 375, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 398, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 405, 0, 0, 0,
	356, 353, 0, 0, 0, 0, 358, 0, 373, 415,
	0, 348, 418, 424, 388, 201, 427, 386, 385, 430,
	140, 0, 0, 154, 106, 105, 114, 422, 370, 378,
	97, 376, 146, 136, 166, 404, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 92, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 366, 425, 177, 178, 179, 180, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 362, 365, 360, 361,
	400, 401, 434, 435, 436, 416, 357, 0, 363, 364,
	0, 420, 403, 84, 0, 116, 181, 142, 103, 169,
	429, 419, 0, 390, 431, 368, 382, 439, 383, 384,
	412, 354, 399, 134, 380, 0, 371, 350, 377, 351,
	369, 392, 101, 395, 367, 421, 402, 115, 0, 0,
	0, 437, 117, 407, 0, 151, 127, 0, 0, 394,
	423, 396, 417, 389, 413, 359, 406, 432, 381, 410,
	433, 0, 0, 0, 391, 261, 0, 0, 198, 790,
	197, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	409, 428, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 349, 408, 0, 352, 355, 438,
	426, 374, 375, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 398, 414, 387, 0, 0, 0, 0, 0,
	0, 786, 0, 372, 0, 405, 0, 0, 0, 356,
	353, 0, 0, 0, 0, 358, 0, 373, 415, 0,
	348, 418, 424, 388, 201, 427, 386, 385, 430, 140,
	0, 0, 154, 106, 105, 114, 422, 370, 378, 97,
	376, 146, 136, 166, 404, 137, 145, 118, 158, 141,
	165, 202, 176, 156, 175, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	174, 90, 92, 170, 132, 171, 172, 173, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 183, 366, 425, 177, 178, 179, 180, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 182,
	135, 147, 96, 167, 150, 362, 365, 360, 361, 400,
	401, 434, 435, 436, 416, 357, 0, 363, 364, 0,
	420, 403, 84, 0, 116, 181, 142, 103, 169, 429,
	419, 0, 390, 431, 368, 382, 439, 383, 384, 412,
	354, 399, 134, 380, 0, 371, 350, 377, 351, 369,
	392, 101, 395, 367, 421, 402, 115, 0, 0, 0,
	437, 117, 407, 0, 151, 127, 0, 0, 394, 423,
	396, 417, 389, 413, 359, 406, 432, 381, 410, 433,
	0, 0, 0, 391, 261, 0, 0, 198, 790, 197,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 409,
	428, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 411, 349, 408, 0, 352, 355, 438, 426,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 398, 414, 387, 0, 0, 0, 0, 0, 0,
	0, 0, 372, 0, 405, 0, 0, 0, 356, 353,
	0, 0, 0, 0, 358, 0, 373, 415, 0, 348,
	418, 424, 388, 201, 427, 386, 385, 430, 140, 0,
	0, 154, 106, 105, 114, 422, 370, 378, 97, 376,
	146, 136, 166, 404, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 366, 425, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 362, 365, 360, 361, 400, 401,
	434, 435, 436, 416, 357, 0, 363, 364, 0, 420,
	403, 84, 0, 116, 181, 142, 103, 169, 429, 419,
	0, 390, 431, 368, 382, 439, 383, 384, 412, 354,
	399, 134, 380, 0, 371, 350, 377, 351, 369, 392,
	101, 395, 367, 421, 402, 115, 0, 0, 0, 437,
	117, 407, 0, 151, 127, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 406, 432, 381, 410, 433, 0,
	0, 0, 391, 199, 0, 0, 198, 196, 197, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 409, 428,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 349, 408, 0, 352, 355, 438, 426, 374,
	375, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	398, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 405, 0, 0, 0, 356, 353, 0,
	0, 0, 0, 358, 0, 373, 415, 0, 348, 418,
	424, 388, 201, 427, 386, 385, 430, 140, 0, 0,
	154, 106, 105, 114, 422, 370, 378, 97, 376, 146,
	136, 166, 404, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	366, 425, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 362, 365, 360, 361, 400, 401, 434,
	435, 436, 416, 357, 0, 363, 364, 0, 420, 403,
	84, 0, 116, 181, 142, 103, 169, 429, 419, 0,
	390, 431, 368, 382, 439, 383, 384, 412, 354, 399,
	134, 380, 0, 371, 350, 377, 351, 369, 392, 101,
	395, 367, 421, 402, 115, 0, 0, 0, 437, 117,
	407, 0, 151, 127, 0, 0, 394, 423, 396, 417,
	389, 413, 359, 406, 432, 381, 410, 433, 56, 0,
	0, 391, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 409, 428, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 349, 408, 0, 352, 355, 438, 426, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 398,
	414, 387, 0, 0, 0, 0, 0, 0, 0, 0,
	372, 0, 405, 0, 0, 0, 356, 353, 0, 0,
	0, 0, 358, 0, 373, 415, 0, 348, 418, 424,
	388, 201, 427, 386, 385, 430, 140, 0, 0, 154,
	106, 105, 114, 422, 370, 378, 97, 376, 146, 136,
	166, 404, 137, 145, 118, 158, 141, 165, 202, 176,
	156, 175, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 174, 90, 92,
	170, 132, 171, 172, 173, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 183, 366,
	425, 177, 178, 179, 180, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 182, 135, 147, 96,
	167, 150, 362, 365, 360, 361, 400, 401, 434, 435,
	436, 416, 357, 0, 363, 364, 0, 420, 403, 84,
	0, 116, 181, 142, 103, 169, 429, 419, 0, 390,
	431, 368, 382, 439, 383, 384, 412, 354, 399, 134,
	380, 0, 371, 350, 377, 351, 369, 392, 101, 395,
	367, 421, 402, 115, 0, 0, 0, 437, 117, 407,
	0, 151, 127, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 406, 432, 381, 410, 433, 0, 0, 0,
	391, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 409, 428, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	349, 408, 0, 352, 355, 438, 426, 374, 375, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 398, 414,
	387, 0, 0, 0, 0, 0, 0, 1165, 0, 372,
	0, 405, 0, 0, 0, 356, 353, 0, 0, 0,
	0, 358, 0, 373, 415, 0, 348, 418, 424, 388,
	201, 427, 386, 385, 430, 140, 0, 0, 154, 106,
	105, 114, 422, 370, 378, 97, 376, 146, 136, 166,
	404, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 366, 425,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 362, 365, 360, 361, 400, 401, 434, 435, 436,
	416, 357, 0, 363, 364, 0, 420, 403, 84, 0,
	116, 181, 142, 103, 169, 429, 419, 0, 390, 431,
	368, 382, 439, 383, 384, 412, 354, 399, 134, 380,
	0, 371, 350, 377, 351, 369, 392, 101, 395, 367,
	421, 402, 115, 0, 0, 0, 437, 117, 407, 0,
	151, 127, 0, 0, 394, 423, 396, 417, 389, 413,
	359, 406, 432, 381, 410, 433, 0, 0, 0, 391,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 409, 428, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 349,
	408, 0, 352, 355, 438, 426, 374, 375, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 398, 414, 387,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	405, 0, 0, 0, 356, 353, 0, 0, 0, 0,
	358, 0, 373, 415, 0, 348, 418, 424, 388, 201,
	427, 386, 385, 430, 140, 0, 0, 154, 106, 105,
	114, 422, 370, 378, 97, 376, 146, 136, 166, 404,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 366, 425, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	362, 365, 360, 361, 400, 401, 434, 435, 436, 416,
	357, 0, 363, 364, 0, 420, 403, 84, 0, 116,
	181, 142, 103, 169, 429, 419, 0, 390, 431, 368,
	382, 439, 383, 384, 412, 354, 399, 134, 380, 0,
	371, 350, 377, 351, 369, 392, 101, 395, 367, 421,
	402, 115, 0, 0, 0, 437, 117, 407, 0, 151,
	127, 0, 0, 394, 423, 396, 417, 389, 413, 359,
	406, 432, 381, 410, 433, 0, 0, 0, 391, 82,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 409, 428, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 349, 408,
	0, 352, 355, 438, 426, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 398, 414, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 372, 0, 405,
	0, 0, 0, 356, 353, 0, 0, 0, 0, 358,
	0, 373, 415, 0, 348, 418, 424, 388, 201, 427,
	386, 385, 430, 140, 0, 0, 154, 106, 105, 114,
	422, 370, 378, 97, 376, 146, 136, 166, 404, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 346, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 366, 425, 177, 178,
	179, 180, 0, 0, 0, 347, 345, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 362,
	365, 360, 361, 400, 401, 434, 435, 436, 416, 357,
	0, 363, 364, 0, 420, 403, 84, 0, 116, 181,
	142, 103, 169, 429, 419, 0, 390, 431, 368, 382,
	439, 383, 384, 412, 354, 399, 134, 380, 0, 371,
	350, 377, 351, 369, 392, 101, 395, 367, 421, 402,
	115, 0, 0, 0, 437, 117, 407, 0, 151, 127,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 406,
	432, 381, 410, 433, 0, 0, 0, 391, 82, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 409, 428, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 349, 408, 0,
	352, 355, 438, 426, 374, 375, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 398, 414, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 405, 0,
	0, 0, 356, 353, 0, 0, 0, 0, 358, 0,
	373, 415, 0, 348, 418, 424, 388, 201, 427, 386,
	385, 430, 140, 0, 0, 154, 106, 105, 114, 422,
	370, 378, 97, 376, 146, 136, 166, 404, 137, 145,
	118, 158, 141, 165, 202, 176, 156, 175, 85, 155,
	336, 95, 148, 0, 0, 0, 88, 162, 153, 125,
	110, 111, 86, 0, 144, 100, 104, 99, 133, 159,
	160, 98, 91, 174, 90, 346, 170, 132, 171, 172,
	173, 157, 163, 126, 123, 89, 161, 124, 122, 113,
	102, 107, 138, 120, 139, 108, 129, 128, 130, 0,
	87, 0, 152, 168, 183, 366, 425, 177, 178, 179,
	180, 0, 0, 0, 347, 345, 341, 340, 339, 112,
	119, 143, 182, 135, 147, 96, 167, 150, 362, 365,
	360, 361, 400, 401, 434, 435, 436, 416, 357, 0,
	363, 364, 0, 420, 403, 84, 0, 116, 181, 142,
	103, 169, 134, 0, 0, 831, 0, 263, 0, 0,
	0, 101, 0, 258, 0, 0, 115, 0, 0, 0,
	297, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 287, 261, 318, 311, 260, 259, 197,
	313, 314, 315, 316, 0, 94, 312, 319, 0, 317,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 274, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	252, 0, 0, 0, 309, 0, 273, 0, 0, 269,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	308, 0, 0, 201, 0, 0, 306, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 310, 290, 291, 292, 293, 295, 0,
	294, 84, 0, 116, 181, 142, 103, 169, 134, 0,
	0, 0, 0, 263, 0, 0, 0, 101, 0, 258,
	0, 0, 115, 0, 0, 0, 297, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 287,
	261, 318, 311, 260, 259, 197, 313, 314, 315, 316,
	0, 94, 312, 319, 0, 317, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 274, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 252, 0, 0, 0,
	309, 0, 273, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 201,
	0, 0, 306, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	298, 307, 304, 305, 302, 303, 301, 300, 299, 310,
	290, 291, 292, 293, 295, 0, 294, 84, 0, 116,
	181, 142, 103, 169, 134, 0, 0, 0, 0, 263,
	0, 0, 0, 101, 0, 258, 0, 0, 115, 0,
	0, 0, 297, 117, 0, 0, 151, 127, 0, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 496, 287, 261, 318, 311, 260,
	259, 197, 313, 314, 315, 316, 0, 94, 312, 319,
	0, 317, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 274, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 272, 0, 0, 0, 0, 309, 0, 273, 0,
	0, 269, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 308, 0, 0, 201, 0, 0, 306, 0,
	140, 0, 0, 154, 106, 105, 114, 0, 0, 0,
	97, 0, 146, 136, 166, 0, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 92, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 0, 0, 177, 178, 179, 180, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 298, 307, 304, 305,
	302, 303, 301, 300, 299, 310, 290, 291, 292, 293,
	295, 0, 294, 84, 0, 116, 181, 142, 103, 169,
	134, 0, 0, 0, 0, 263, 0, 0, 0, 101,
	0, 258, 0, 0, 115, 0, 0, 0, 297, 117,
	0, 0, 151, 127, 0, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 915, 0, 56, 0,
	0, 287, 261, 318, 311, 260, 259, 197, 313, 314,
	315, 316, 0, 94, 312, 319, 0, 317, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 274, 0, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 272, 0, 0,
	0, 0, 309, 0, 273, 0, 0, 269, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 308, 0,
	0, 201, 0, 0, 306, 0, 140, 0, 0, 154,
	106, 105, 114, 0, 0, 0, 97, 0, 146, 136,
	166, 0, 137, 145, 118, 158, 141, 165, 202, 176,
	156, 175, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 174, 90, 92,
	170, 132, 171, 172, 173, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 183, 0,
	0, 177, 178, 179, 180, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 182, 135, 147, 96,
	167, 150, 298, 307, 304, 305, 302, 303, 301, 300,
	299, 310, 290, 291, 292, 293, 295, 26, 294, 84,
	0, 116, 181, 142, 103, 169, 0, 0, 0, 134,
	0, 0, 0, 0, 263, 0, 0, 0, 101, 0,
	258, 0, 0, 115, 0, 0, 0, 297, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	287, 261, 318, 311, 260, 259, 197, 313, 314, 315,
	316, 0, 94, 312, 319, 0, 317, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 274, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 272, 0, 0, 0,
	0, 309, 0, 273, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	201, 0, 0, 306, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 298, 307, 304, 305, 302, 303, 301, 300, 299,
	310, 290, 291, 292, 293, 295, 0, 294, 84, 0,
	116, 181, 142, 103, 169, 134, 0, 501, 0, 0,
	263, 0, 0, 0, 101, 0, 258, 0, 0, 115,
	0, 0, 0, 297, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 287, 261, 318, 311,
	260, 259, 197, 313, 314, 315, 316, 0, 94, 312,
	319, 0, 317, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 274, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 309, 0, 273,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 0, 0, 201, 0, 0, 306,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 310, 290, 291, 292,
	293, 295, 0, 294, 84, 0, 116, 181, 142, 103,
	169, 134, 0, 0, 0, 0, 263, 0, 0, 0,
	101, 0, 258, 0, 0, 115, 0, 0, 0, 297,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 287, 261, 318, 311, 260, 259, 197, 313,
	314, 315, 316, 0, 94, 312, 319, 0, 317, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 274, 0, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 272, 0,
	0, 0, 0, 309, 0, 273, 0, 0, 269, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 308,
	0, 0, 201, 0, 0, 306, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	0, 0, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 298, 307, 304, 305, 302, 303, 301,
	300, 299, 310, 290, 291, 292, 293, 295, 134, 294,
	84, 0, 116, 181, 142, 103, 169, 101, 0, 561,
	0, 0, 115, 0, 0, 0, 297, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 287,
	261, 318, 311, 260, 259, 197, 313, 314, 315, 316,
	0, 94, 312, 319, 0, 317, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 0, 0, 0, 0,
	309, 0, 273, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 201,
	0, 0, 306, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 1438,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	298, 307, 304, 305, 302, 303, 301, 300, 299, 310,
	290, 291, 292, 293, 295, 134, 294, 84, 0, 116,
	181, 142, 103, 169, 101, 0, 561, 0, 0, 115,
	0, 0, 0, 297, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 287, 261, 318, 311,
	260, 259, 197, 313, 314, 315, 316, 0, 94, 312,
	319, 0, 317, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 309, 0, 273,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 0, 0, 201, 0, 0, 306,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 310, 290, 291, 292,
	293, 295, 134, 294, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 561, 0, 0, 115, 0, 0, 0,
	297, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 287, 261, 318, 311, 574, 259, 197,
	313, 314, 315, 316, 0, 94, 312, 319, 0, 317,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 309, 0, 273, 0, 0, 269,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	308, 0, 0, 201, 0, 0, 306, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 310, 290, 291, 292, 293, 295, 0,
	294, 84, 0, 116, 181, 142, 103, 169, 134, 0,
	0, 0, 519, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 521, 522, 523, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 84, 0, 116,
	181, 142, 103, 169, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 73, 0, 0, 0,
	79, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 75, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 76, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 82, 0, 0, 521, 522, 523,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 199, 0, 0, 198, 196, 197, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	116, 181, 142, 103, 169, 134, 0, 0, 0, 624,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	198, 196, 197, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 199, 0, 0, 198, 196, 197,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	646, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 648, 647, 649, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	116, 181, 142, 103, 169, 134, 0, 0, 0, 624,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	198, 196, 197, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 622, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 84, 0, 116, 181, 142, 103,
	169, 602, 101, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 117, 0, 0, 151, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 198, 196,
	197, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 140,
	0, 0, 154, 106, 105, 114, 0, 0, 0, 97,
	0, 146, 136, 166, 0, 137, 145, 118, 158, 141,
	165, 202, 176, 156, 175, 85, 155, 164, 95, 148,
	0, 0, 0, 88, 162, 153, 125, 110, 111, 86,
	0, 144, 100, 104, 99, 133, 159, 160, 98, 91,
	174, 90, 92, 170, 132, 171, 172, 173, 157, 163,
	126, 123, 89, 161, 124, 122, 113, 102, 107, 138,
	120, 139, 108, 129, 128, 130, 0, 87, 0, 152,
	168, 183, 0, 0, 177, 178, 179, 180, 0, 0,
	0, 131, 93, 109, 149, 121, 112, 119, 143, 182,
	135, 147, 96, 167, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 0, 0,
	134, 0, 84, 0, 116, 181, 142, 103, 169, 101,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 117,
	0, 0, 151, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 198, 196, 197, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 140, 0, 0, 154,
	106, 105, 114, 0, 0, 0, 97, 0, 146, 136,
	166, 0, 137, 145, 118, 158, 141, 165, 202, 176,
	156, 175, 85, 155, 164, 95, 148, 0, 0, 0,
	88, 162, 153, 125, 110, 111, 86, 0, 144, 100,
	104, 99, 133, 159, 160, 98, 91, 174, 90, 92,
	170, 132, 171, 172, 173, 157, 163, 126, 123, 89,
	161, 124, 122, 113, 102, 107, 138, 120, 139, 108,
	129, 128, 130, 0, 87, 0, 152, 168, 183, 0,
	0, 177, 178, 179, 180, 0, 0, 0, 131, 93,
	109, 149, 121, 112, 119, 143, 182, 135, 147, 96,
	167, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 84,
	0, 116, 181, 142, 103, 169, 101, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 117, 0, 0, 151,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 198, 196, 197, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 201, 0,
	0, 0, 0, 140, 0, 0, 154, 106, 105, 114,
	0, 0, 0, 97, 0, 146, 136, 166, 0, 137,
	145, 118, 158, 141, 165, 202, 176, 156, 175, 85,
	155, 164, 95, 148, 0, 0, 0, 88, 162, 153,
	125, 110, 111, 86, 0, 144, 100, 104, 99, 133,
	159, 160, 98, 91, 174, 90, 92, 170, 132, 171,
	172, 173, 157, 163, 126, 123, 89, 161, 124, 122,
	113, 102, 107, 138, 120, 139, 108, 129, 128, 130,
	0, 87, 0, 152, 168, 183, 0, 0, 177, 178,
	179, 180, 0, 0, 0, 131, 93, 109, 149, 121,
	112, 119, 143, 182, 135, 147, 96, 167, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 84, 0, 116, 181,
	142, 103, 169, 101, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 117, 0, 0, 151, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 521,
	522, 523, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	140, 0, 0, 154, 106, 105, 114, 0, 0, 0,
	97, 0, 146, 136, 166, 0, 137, 145, 118, 158,
	141, 165, 202, 176, 156, 175, 85, 155, 164, 95,
	148, 0, 0, 0, 88, 162, 153, 125, 110, 111,
	86, 0, 144, 100, 104, 99, 133, 159, 160, 98,
	91, 174, 90, 92, 170, 132, 171, 172, 173, 157,
	163, 126, 123, 89, 161, 124, 122, 113, 102, 107,
	138, 120, 139, 108, 129, 128, 130, 0, 87, 0,
	152, 168, 183, 0, 0, 177, 178, 179, 180, 0,
	0, 0, 131, 93, 109, 149, 121, 112, 119, 143,
	182, 135, 147, 96, 167, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 84, 0, 116, 181, 142, 103, 169,
	101, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	117, 0, 0, 151, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 198, 790, 197, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 140, 0, 0,
	154, 106, 105, 114, 0, 0, 0, 97, 0, 146,
	136, 166, 0, 137, 145, 118, 158, 141, 165, 202,
	176, 156, 175, 85, 155, 164, 95, 148, 0, 0,
	0, 88, 162, 153, 125, 110, 111, 86, 0, 144,
	100, 104, 99, 133, 159, 160, 98, 91, 174, 90,
	92, 170, 132, 171, 172, 173, 157, 163, 126, 123,
	89, 161, 124, 122, 113, 102, 107, 138, 120, 139,
	108, 129, 128, 130, 0, 87, 0, 152, 168, 183,
	0, 0, 177, 178, 179, 180, 0, 0, 0, 131,
	93, 109, 149, 121, 112, 119, 143, 182, 135, 147,
	96, 167, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	84, 0, 116, 181, 142, 103, 169, 101, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 117, 0, 0,
	151, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 198, 196, 197, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 140, 0, 0, 154, 106, 105,
	114, 0, 0, 0, 97, 0, 146, 136, 166, 0,
	137, 145, 118, 158, 141, 165, 202, 176, 156, 175,
	85, 155, 164, 95, 148, 0, 0, 0, 88, 162,
	153, 125, 110, 111, 86, 0, 144, 100, 104, 99,
	133, 159, 160, 98, 91, 174, 90, 92, 170, 132,
	171, 172, 173, 157, 163, 126, 123, 89, 161, 124,
	122, 113, 102, 107, 138, 120, 139, 108, 129, 128,
	130, 0, 87, 0, 152, 168, 183, 0, 0, 177,
	178, 179, 180, 0, 0, 0, 131, 93, 109, 149,
	121, 112, 119, 143, 182, 135, 147, 96, 167, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 84, 0, 116,
	181, 142, 103, 169, 101, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 117, 0, 0, 151, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 81, 0, 773, 0, 0, 774, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 140, 0, 0, 154, 106, 105, 114, 0, 0,
	0, 97, 0, 146, 136, 166, 0, 137, 145, 118,
	158, 141, 165, 202, 176, 156, 175, 85, 155, 164,
	95, 148, 0, 0, 0, 88, 162, 153, 125, 110,
	111, 86, 0, 144, 100, 104, 99, 133, 159, 160,
	98, 91, 174, 90, 92, 170, 132, 171, 172, 173,
	157, 163, 126, 123, 89, 161, 124, 122, 113, 102,
	107, 138, 120, 139, 108, 129, 128, 130, 0, 87,
	0, 152, 168, 183, 0, 0, 177, 178, 179, 180,
	0, 0, 0, 131, 93, 109, 149, 121, 112, 119,
	143, 182, 135, 147, 96, 167, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 84, 0, 116, 181, 142, 103,
	169, 101, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 117, 0, 0, 151, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 140, 0,
	0, 154, 106, 105, 114, 0, 0, 0, 97, 0,
	146, 136, 166, 0, 137, 145, 118, 158, 141, 165,
	202, 176, 156, 175, 85, 155, 164, 95, 148, 0,
	0, 0, 88, 162, 153, 125, 110, 111, 86, 0,
	144, 100, 104, 99, 133, 159, 160, 98, 91, 174,
	90, 92, 170, 132, 171, 172, 173, 157, 163, 126,
	123, 89, 161, 124, 122, 113, 102, 107, 138, 120,
	139, 108, 129, 128, 130, 0, 87, 0, 152, 168,
	183, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	131, 93, 109, 149, 121, 112, 119, 143, 182, 135,
	147, 96, 167, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 84, 0, 116, 181, 142, 103, 169, 101, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 117, 0,
	0, 151, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 140, 0, 0, 154, 106,
	105, 114, 0, 0, 0, 97, 0, 146, 136, 166,
	0, 137, 145, 118, 158, 141, 165, 202, 176, 156,
	175, 85, 155, 164, 95, 148, 0, 0, 0, 88,
	162, 153, 125, 110, 111, 86, 0, 144, 100, 104,
	99, 133, 159, 160, 98, 91, 174, 90, 92, 170,
	132, 171, 172, 173, 157, 163, 126, 123, 89, 161,
	124, 122, 113, 102, 107, 138, 120, 139, 108, 129,
	128, 130, 0, 87, 0, 152, 168, 183, 0, 0,
	177, 178, 179, 180, 0, 0, 0, 131, 93, 109,
	149, 121, 112, 119, 143, 182, 135, 147, 96, 167,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	116, 181, 142, 103, 169,
}

var yyPact = [...]int16{
	1982, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 796, 820, -1000, -1000, -1000, -1000,
	-1000, -1000, 616, 8247, 39, 59, -41, 10579, 58, 192,
	11350, -1000, -26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	97, 11350, 414, 596, -1000, -1000, -1000, -1000, -1000, 791,
	794, 614, 781, 680, -1000, 5620, 38, 9284, 10322, 5088,
	-1000, 413, 51, 11350, -175, 11864, 30, 30, 30, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 57, 11350, -1000, 11350, 26, 412,
	26, 26, 26, 11350, -1000, 94, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11350, 396, 741, 53, 3972, 3972, 3972,
	3972, -9, -14, 3972, -137, -125, 647, -1000, -1000, -1000,
	-1000, 3972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11350, -1000, 624, 571, 436, 753, 6687,
	6953, 796, -1000, 596, -1000, -1000, -1000, 710, -1000, -1000,
	303, 809, -1000, 7990, 93, -1000, 6953, 1662, 578, -1000,
	-1000, -1000, -1000, 578, -1000, -1000, -1000, -1000, 74, 7467,
	7467, 7467, 7467, 7467, 7467, -1000, -1000, -1000, -1000, -1000,
	-1000, 268, -1000, -1000, -1000, 6421, 578, 7724, 578, 578,
	578, 578, 578, 578, 578, 578, 6953, 578, 578, 578,
	578, 578, 578, 578, 578, 578, 578, 578, 578, 578,
	578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10065, 565, 1109, -1000, -1000, -1000, 778, 8761, 9807, 11350,
	519, -1000, 557, 556, 4809, -32, -133, -1000, 42, -1000,
	-1000, -1000, 177, 9541, -1000, -1000, 739, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	487, -1000, 2110, 392, 3972, 44, 605, 388, 230, 384,
	11350, 11350, 3972, 41, 11350, 773, 646, 11350, 383, 379,
	-1000, 3693, -1000, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
	3972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3972, 3972,
	3972, 3972, -1000, -130, -115, -1000, 11350, -1000, -1000, 89,
	89, 12121, 11350, -1000, 6953, -1000, -1000, -1000, 815, 131,
	313, 789, 92, 561, -1000, 256, 791, 436, 680, 11607,
	662, -1000, -1000, 11350, -1000, 6953, 6953, 349, -1000, 10836,
	-1000, -1000, -1000, -1000, -1000, 3135, 145, 7467, 311, 151,
	7467, 7467, 7467, 7467, 7467, 7467, 7467, 7467, 7467, 7467,
	7467, 7467, 7467, 7467, 7467, 7467, 353, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, -1000, 596, 1958, 1958,
	111, -1000, 111, 111, 111, 111, 111, 277, -1000, 436,
	484, 159, 6421, 5354, -1000, 2092, 5620, 5620, 6953, 6953,
	11093, 11093, 5620, 782, 218, 159, 11093, -1000, 436, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5620, 5620, 5620, 5620,
	5620, 146, 11350, -1000, 11093, 9284, 9284, 9284, 9284, 9284,
	-1000, 676, 671, -1000, 661, 659, 672, 11350, -1000, 482,
	8761, 128, 578, -1000, 11350, -1000, 6, 520, 9284, 11350,
	-1000, -1000, 4809, 7467, 557, 556, -133, 547, -1000, -141,
	-138, 7467, 6152, 100, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2856, 195, 262, -110, -1000, -1000, -1000, -1000, 581,
	-1000, 581, 581, 581, 581, -79, -79, -79, -79, -1000,
	-1000, -1000, -1000, -1000, -1000, 609, 607, -1000, 581, 581,
	581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	599, 599, 599, 583, 583, 623, -1000, 11350, -197, 376,
	3972, 772, 3972, -1000, 106, -1000, 11350, -1000, -1000, 11350,
	3972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 215,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 475, -1000, -1000, -1000, 554, -1000, -1000, 666,
	6953, 6953, 6953, 3414, 6953, -1000, 727, 723, 753, -1000,
	782, 795, -1000, 726, 725, 5620, -1000, -1000, 145, 242,
	-1000, -1000, 302, -1000, -1000, -1000, -1000, 84, 578, -1000,
	-1000, 1833, -1000, -1000, -1000, -1000, 311, 7467, 7467, 7467,
	7467, 738, 738, 1833, 1781, 1451, 997, 111, 112, 112,
	101, 101, 101, 101, 101, 615, 615, -1000, -1000, -1000,
	436, 268, -1000, -1000, 268, -1000, -1000, 6953, -1000, 436,
	436, 5620, 522, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 471, 471, 304, 322, 575,
	-1000, 81, 546, 471, 5620, 259, -1000, 6953, 436, -1000,
	471, 436, 436, 471, 471, 532, 714, 578, -1000, 525,
	-1000, 163, 1109, 604, 645, 1421, -1000, -1000, -1000, -1000,
	668, -1000, 665, -1000, -1000, -1000, -1000, -1000, 50, 49,
	48, 11864, -1000, 807, 9284, 544, -1000, -1000, 1833, 547,
	-133, -144, -1000, -1000, 1833, -1000, 159, -1000, 394, 543,
	2569, -1000, -1000, -1000, -1000, -1000, -1000, 598, 758, 187,
	173, 370, -1000, -1000, 744, -1000, 261, -112, -1000, -1000,
	342, -79, -79, -1000, -1000, 100, 736, 100, 100, 100,
	397, 397, -1000, -1000, -1000, -1000, 340, -1000, -1000, -1000,
	338, -1000, 634, 11864, 3972, -1000, 4530, -1000, -1000, -1000,
	-1000, -1000, -1000, 395, 355, 197, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4, -1000, 3972,
	-1000, 244, 11350, 11350, 12121, 776, 11350, 689, 159, 159,
	159, 80, -1000, 724, 720, -1000, 11350, -1000, -1000, -1000,
	-1000, 536, -1000, -1000, -1000, 4251, 5620, -1000, 738, 738,
	1833, 1764, -1000, 7467, -1000, 7467, -1000, 159, -1000, -1000,
	471, 5620, -1000, -1000, 493, 353, 493, 7467, 7467, 3414,
	7467, 7467, -185, 574, 181, -1000, 6953, 167, -1000, -1000,
	-1000, -1000, -1000, -1000, 630, 11093, 578, -1000, 8504, -1000,
	11864, 807, 796, 11093, 9284, 6953, 6953, -1000, -1000, 6953,
	593, -1000, 6953, -1000, -1000, -1000, 578, 578, 578, 433,
	-1000, 796, 544, -207, -1000, -1000, -153, -155, -1000, -1000,
	-1000, 2856, -1000, 2856, 11864, -1000, 367, 362, -1000, -1000,
	576, 96, -1000, -1000, -1000, 457, 100, 100, -1000, 194,
	-1000, -1000, -1000, 447, -1000, 444, 541, 439, 11350, -1000,
	-1000, 539, -1000, 155, -1000, -1000, 11864, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11864,
	11350, -1000, -1000, -1000, -1000, -1000, 11864, -1000, -1000, 397,
	6953, -1000, -1000, -1000, 89, -1000, -1000, 4530, -1000, -1000,
	-1000, -1000, -1000, 807, 9284, -1000, -1000, 436, -1000, -1000,
	7467, 1833, 1833, -1000, -1000, 436, 581, 581, -1000, 581,
	583, -1000, 581, -59, 581, -61, 578, 436, 436, 1499,
	1696, -1000, 760, 1570, 578, -182, -1000, 159, 6953, -207,
	761, 515, 507, -1000, -1000, 5886, 436, 435, 79, 433,
	796, 791, -1000, 537, 159, 159, 159, 11864, 159, 11864,
	11864, 11864, 9027, 11864, 791, -207, -1000, 5620, -1000, -1000,
	-1000, 2569, -1000, 431, -1000, 581, -1000, -1000, -105, 814,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -79, 397, -79, 335, -1000, 332, 3972, 4530, 2856,
	-1000, 580, -1000, -1000, -1000, -1000, 764, -1000, 159, -1000,
	803, 537, -1000, 1833, -1000, -1000, 71, -1000, -1000, -1000,
	-1000, -1000, -1000, 331, -1000, -1000, -1000, 7467, 7467, -1000,
	7467, 7467, 7467, 436, 397, 159, -1000, 757, -1000, 578,
	-1000, -1000, 549, 10836, 10836, -1000, 791, -207, 428, -1000,
	426, 426, 426, 128, -1000, -207, -1000, 522, 124, 11864,
	-1000, 166, -1000, -164, 100, -1000, 100, 449, 441, -1000,
	-1000, -1000, 11864, 578, 798, 793, -1000, -1000, 436, 916,
	916, 916, 916, 17, -1000, -1000, 812, -1000, 578, -1000,
	596, 70, -1000, -207, -1000, 11864, -1000, -1000, -1000, -1000,
	-1000, -1000, 124, -1000, 350, 154, 397, -1000, 301, 747,
	-1000, 740, -1000, -1000, -1000, -1000, -1000, 420, 3, -1000,
	6953, 6953, -1000, -1000, -1000, -1000, -1000, 436, 40, -200,
	11093, 507, 436, 10836, -1000, -1000, -1000, -1000, 309, -1000,
	-1000, -1000, 397, -1000, -1000, 605, 418, -1000, 11864, 159,
	506, -1000, 685, -191, -203, 467, -1000, -1000, -1000, -1000,
	-197, -1000, 3, 711, -1000, 684, -1000, -1000, -1000, 0,
	-198, -15, -201, 578, -204, 7210, -1000, 916, 436, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1169, 17, 27, 1164, 1162, 1161, 852, 850, 844,
	1158, 1148, 1147, 1146, 1144, 1143, 1140, 1138, 1137, 1134,
	1133, 1130, 1116, 1115, 1114, 1110, 1108, 155, 1104, 1103,
	1102, 64, 1096, 61, 1092, 1082, 36, 67, 63, 35,
	1221, 1081, 1071, 42, 75, 60, 69, 1069, 43, 1062,
	1060, 1058, 56, 1054, 1053, 129, 1051, 57, 12, 49,
	1049, 1048, 1035, 1031, 65, 463, 1030, 1028, 1027, 1026,
	1024, 1019, 1018, 45, 6, 8, 38, 21, 1017, 583,
	10, 1016, 44, 1014, 1013, 1012, 1011, 31, 992, 48,
	988, 20, 46, 987, 19, 59, 30, 16, 5, 74,
	53, 72, 981, 29, 52, 47, 972, 971, 384, 970,
	969, 967, 966, 962, 959, 133, 368, 952, 951, 950,
	949, 33, 312, 619, 717, 58, 948, 946, 11, 944,
	1485, 73, 66, 23, 943, 37, 1391, 32, 940, 939,
	938, 931, 26, 931, 928, 927, 39, 926, 924, 923,
	917, 916, 914, 913, 487, 912, 909, 908, 14, 34,
	907, 906, 50, 24, 904, 902, 901, 41, 51, 900,
	55, 898, 897, 896, 895, 25, 15, 892, 13, 879,
	7, 877, 875, 2, 874, 22, 871, 3, 870, 4,
	40, 856, 9, 28, 855, 854, 70, 848, 840, 838,
	836, 0, 104, 834, 831, 90,
}

var yyR1 = [...]uint8{
	0, 199, 200, 200, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	8, 9, 9, 9, 203, 203, 44, 44, 95, 95,
	10, 10, 10, 10, 10, 10, 100, 100, 105, 105,
	105, 106, 106, 106, 106, 140, 140, 138, 138, 11,
	11, 11, 11, 11, 11, 11, 189, 189, 188, 187,
	187, 186, 186, 185, 16, 172, 173, 173, 173, 168,
	143, 143, 144, 144, 146, 146, 145, 145, 145, 145,
	145, 153, 149, 149, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 148, 148, 148, 148, 148, 150, 150,
	150, 150, 150, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 152,
	152, 152, 152, 152, 152, 152, 152, 167, 167, 154,
	154, 162, 162, 163, 163, 163, 160, 160, 161, 161,
	164, 164, 164, 155, 155, 155, 155, 155, 155, 155,
	157, 157, 165, 165, 158, 158, 158, 159, 159, 159,
	166, 166, 166, 166, 166, 156, 156, 169, 169, 181,
	181, 180, 180, 180, 171, 171, 177, 177, 177, 177,
	177, 170, 170, 179, 179, 178, 174, 174, 174, 175,
	175, 175, 176, 176, 176, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 184, 182, 182, 183, 183,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 113, 113, 110, 110, 111,
	111, 112, 112, 112, 114, 114, 114, 141, 141, 139,
	139, 139, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 24, 24, 25, 25, 25, 193, 193,
	193, 193, 193, 193, 26, 26, 26, 194, 194, 204,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 126, 126, 126, 128, 128, 128, 128, 125, 41,
	41, 42, 43, 43, 45, 45, 46, 46, 46, 57,
	57, 94, 94, 96, 96, 47, 47, 47, 47, 48,
	48, 49, 49, 50, 50, 134, 134, 133, 133, 133,
	132, 51, 51, 51, 53, 52, 52, 52, 52, 54,
	54, 56, 56, 55, 55, 58, 58, 58, 58, 59,
	59, 40, 40, 40, 40, 40, 40, 40, 109, 109,
	61, 61, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 72, 72, 72, 72, 72, 72,
	62, 62, 62, 62, 62, 62, 62, 36, 36, 73,
	73, 73, 79, 74, 74, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 198, 197, 70, 70,
	70, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 69, 69, 69, 205, 205, 71, 71, 71, 71,
	71, 34, 34, 34, 34, 34, 137, 137, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 83, 83, 35, 35, 81, 81, 82, 84,
	84, 67, 67, 67, 80, 80, 80, 123, 123, 123,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 191, 191, 66, 66, 66, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 90, 90, 90,
	90, 90, 90, 90, 91, 91, 91, 91, 91, 91,
	92, 92, 92, 63, 63, 63, 63, 63, 63, 93,
	93, 93, 93, 97, 97, 75, 75, 77, 77, 76,
	78, 192, 192, 98, 98, 103, 99, 99, 101, 101,
	104, 104, 104, 102, 102, 102, 129, 129, 129, 107,
	107, 115, 115, 116, 116, 108, 108, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 118, 118, 118,
	119, 119, 120, 120, 120, 127, 127, 124, 124, 130,
	130, 130, 130, 130, 131, 131, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	196, 196, 196, 201, 202, 135, 136, 136, 136,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 10,
	9, 9, 8, 7, 1, 1, 1, 3, 0, 4,
	3, 3, 4, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 4, 6, 4, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 1, 1, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 2, 4, 4, 7, 1, 1,
	1, 1, 1, 1, 2, 4, 3, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 4, 5, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 4, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	3, 3, 3, 3, 0, 2, 2, 4, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 0, 2, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -199, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 140, 141, 143, 142, 168, 144, 161,
	52, 180, 181, 183, 184, 25, 162, 163, 166, 167,
	185, 186, 187, -201, 8, 269, 56, -200, 285, -87,
	15, -29, 5, -27, -204, -27, -27, -27, -27, -27,
	-172, 56, -120, 149, 98, 176, 261, 146, 147, 153,
	-123, 64, 60, -122, 277, 180, 194, 232, 188, 217,
	206, 204, 207, 247, 71, 183, 257, 164, 203, 199,
	197, 27, 222, 282, 198, 159, 158, 223, 227, 248,
	192, 193, 251, 221, 160, 32, 279, 37, 172, 252,
	225, 250, 220, 216, 219, 191, 215, 41, 229, 228,
	230, 246, 209, 200, 18, 255, 167, 170, 224, 226,
	154, 174, 281, 253, 196, 171, 166, 256, 184, 249,
	259, 40, 234, 190, 157, 181, 178, 213, 173, 201,
	202, 218, 189, 214, 182, 175, 168, 258, 235, 283,
	208, 210, 211, 212, 205, 179, 177, 239, 240, 241,
	242, 280, 254, 236, -108, 149, 151, 147, 147, 148,
	149, 261, 146, 147, -55, -130, 64, 65, 63, 60,
	-122, 149, 176, 147, 135, 207, 140, 237, 148, 32,
	174, -139, -141, 147, 182, -110, 177, 239, 240, 241,
	242, 60, 249, 248, 250, 243, -130, 182, -135, -135,
	-135, -135, -135, 186, 60, -130, 60, -2, -91, 17,
	16, -5, -3, -201, 6, 20, 21, -33, 42, 43,
	-28, -39, 126, -40, -130, -60, 100, -65, 29, 64,
	63, 60, -122, 23, -67, -61, -78, -79, -80, 135,
	136, 124, 125, 132, 101, -197, -198, -70, -68, -69,
	-71, -64, 76, 77, -76, -201, -123, 59, 46, 47,
	270, 271, 272, 273, 276, 274, 103, 36, 260, 268,
	267, 266, 264, 265, 262, 263, 152, 261, 146, 130,
	269, 62, 72, 66, 67, 68, 69, 75, 61, 73,
	-108, -43, -45, -46, -47, -57, -79, -201, -55, 11,
	-44, -57, -99, -101, -140, -138, 182, -104, -123, 250,
	249, 248, -124, -102, -121, 247, 207, 246, 145, 99,
	22, 24, 102, 135, 16, 103, 134, 270, 140, 50,
	262, 263, 260, 272, 273, 261, 237, 29, 10, 25,
	162, 21, 128, 142, 106, 107, 165, 23, 163, 77,
	19, 53, 11, 13, 14, 152, 151, 119, 148, 48,
	8, 59, 26, 115, 44, 28, 46, 116, 117, 17,
	264, 265, 31, 276, 169, 130, 51, 38, 100, 75,
	54, 98, 15, 49, 118, 143, 269, 47, 146, 6,
	275, 30, 161, 45, 147, 238, 105, 150, 76, 5,
	153, 9, 52, 55, 266, 267, 268, 36, 104, 12,
	-173, -168, 60, 148, -55, 269, -123, -116, 152, -116,
	-116, 147, -55, -55, -115, 152, 60, -115, -115, -115,
	-55, 137, -55, 60, 30, 261, 60, 174, 147, 175,
	149, -136, -201, -124, -123, -136, -136, -136, 178, 179,
	178, 179, -136, 251, -111, 244, 54, -136, -130, 11,
	22, -201, 55, -76, -201, -202, 58, -92, 19, 31,
	-40, 20, -130, -88, -89, -40, -87, -2, -27, 38,
	-31, 21, 70, 11, -126, 99, 98, 115, -125, 22,
	-128, 63, 64, 65, -123, 137, -40, -62, 119, 100,
	116, 117, 118, 102, 121, 120, 131, 124, 125, 126,
	127, 128, 129, 130, 122, 123, 134, 108, 109, 110,
	111, 112, 113, 114, -109, -201, -79, -201, 138, 139,
	-65, 29, -65, -65, -65, -65, -65, -191, 74, -2,
	-74, -40, -201, -201, 63, -65, -201, -201, -201, -201,
	-201, -201, -201, -201, -83, -40, -201, -205, -201, -205,
	-205, -205, -205, -205, -205, -205, -201, -201, -201, -201,
	-201, -56, 26, -55, 30, 57, -51, -53, -52, -54,
	44, 48, 50, 45, 46, 47, 51, -134, 22, -43,
	-201, -133, 170, -132, 22, -130, -57, -44, -203, 57,
	11, 55, 57, 57, -99, -101, 182, -100, -105, 251,
	253, 150, 108, -129, -123, -196, 29, 64, 63, 65,
	30, 58, 57, -145, -149, -151, -150, -152, -153, -147,
	-148, 204, 205, 135, 208, 213, 214, 215, 216, 217,
	218, 219, 220, 210, 221, 222, 30, 164, 201, 202,
	203, 97, 223, 224, 225, 226, 227, 228, 229, 230,
	206, 188, 189, 190, 191, 192, 193, 194, 211, 212,
	196, 197, 198, 199, 200, 60, -136, 149, -189, 55,
	60, 100, 60, -55, -55, -136, 150, -55, 23, 54,
	-55, 60, 60, -131, -130, -121, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, 252, -113,
	238, 245, -55, -193, -3, -7, -9, -8, 60, -196,
	64, -193, -144, -146, 60, -122, -194, -130, 9, 119,
	57, 18, 18, 137, 57, -90, 24, 25, -91, -202,
	-33, -66, -123, 66, 69, -32, 45, -55, -40, -40,
	-72, 75, 100, 76, 77, -125, 126, -131, -124, -121,
	64, -65, -73, -76, -79, 74, 119, 116, 117, 118,
	102, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -137, 60, -196,
	60, -64, 63, 64, -64, 74, -202, 57, -202, -2,
	-38, 21, -37, -39, -195, 78, 79, 80, 81, 82,
	83, 84, 85, 97, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, -37, -37, -40, -40, -80,
	-123, -130, -80, -37, -31, -81, -82, 104, -80, -202,
	-37, -38, -38, -37, -37, -95, 29, 170, -55, -98,
	-103, -80, -45, -46, -46, -45, -46, 44, 44, 44,
	49, 44, 49, 44, -52, -130, -202, -58, 52, 151,
	53, -201, -132, -95, 55, -43, -57, -104, -65, -100,
	57, 252, 254, 255, -65, 54, -40, -159, 134, -174,
	-175, -176, -124, -196, 66, -168, -169, -177, 154, 157,
	153, -170, 148, 28, -164, 75, 100, -160, 235, -154,
	56, -154, -154, -154, -154, -158, 207, -158, -158, -158,
	56, 56, -154, -154, -154, -162, 56, -162, -162, -163,
	56, -163, -127, 55, -55, -187, 280, -188, 60, -136,
	23, -136, -117, 145, 142, 143, -184, 141, 232, 207,
	71, 29, 15, 270, 170, 283, 60, 171, -55, -55,
	-136, -112, 11, 119, 57, -202, 57, 40, -40, -40,
	-40, -131, -89, 33, 33, -92, -107, 19, 11, 36,
	36, -37, 75, 76, 77, 137, -201, -73, -65, -65,
	-65, -65, -36, 165, -36, 99, -202, -40, -202, -202,
	-37, 57, -202, -202, 57, 55, 22, 57, 11, 137,
	57, 11, -202, -37, -84, -82, 106, -40, -202, -202,
	-202, -202, -202, -202, -63, 30, 36, -2, -201, 36,
	-201, -42, -59, 57, 11, 12, 108, -49, -48, 54,
	55, -50, 54, -48, 44, 44, 148, 148, 148, -96,
	-123, -59, -43, -59, -105, -106, 256, 253, 259, 60,
	-196, 57, -176, 108, 56, 28, -170, -170, 60, 60,
	-155, 29, 75, -161, 236, 66, -158, -158, -159, 30,
	-159, -159, -159, -167, -196, -167, 66, 66, 54, -123,
	-136, -186, -185, -124, -135, -190, 176, 155, 156, 159,
	158, 60, 148, 28, 154, 157, 170, 153, -190, 176,
	-118, -119, 150, 22, 148, 28, 170, -136, -114, 116,
	12, -130, -130, -146, 22, -130, 41, 137, 34, 35,
	34, 35, -55, -41, 11, 126, -124, -38, -36, -36,
	99, -65, -65, -202, -39, -142, 135, 204, 164, 203,
	199, 221, 209, 234, 201, 235, 205, -137, -142, -65,
	-65, -124, -65, -65, 277, -87, 107, -40, 105, -97,
	54, -98, -75, -77, -76, -201, -2, -93, -128, -96,
	-59, -87, -103, -43, -40, -40, -40, 56, -40, -201,
	-201, -201, -202, 57, -87, -59, -192, 284, 253, 257,
	258, -175, -176, -179, -178, -123, 60, 60, -157, 54,
	-196, 66, 67, 75, 260, 72, 58, -159, -159, 60,
	135, 58, 57, 58, 57, 58, 57, -55, 57, 108,
	-135, -123, -135, -123, -55, -135, -123, -196, -40, -193,
	-59, -43, -202, -65, -202, -154, -154, -154, -163, -154,
	193, -154, 193, -201, -202, -202, -202, 57, 19, -202,
	57, 19, -201, -35, 275, -40, -192, 27, -97, 57,
	-202, -202, -202, 57, 137, -202, -87, -91, -94, -123,
	-94, -94, -94, -133, -123, -91, -192, -37, 58, 57,
	-154, -165, 232, 9, -158, -196, -158, 66, 66, -136,
	-185, -176, 56, 26, -85, 13, -158, 60, 66, -65,
	-65, -65, -65, -65, -202, -196, 28, -77, 36, -2,
	-201, -128, -128, -91, -192, 57, 58, -202, -202, -202,
	-58, -192, -181, -180, 55, 160, 71, -178, -166, 154,
	28, 153, 260, -159, -159, 58, 58, -94, -201, -86,
	14, 16, -202, -202, -202, -202, -202, -34, 119, 280,
	9, -75, -2, 137, -192, -123, -180, 60, -171, 108,
	-196, -156, 71, 28, 28, 58, -182, -183, 170, -40,
	-74, -202, 278, 51, 281, -98, -202, -128, 66, -196,
	-189, -202, 57, -123, 41, 279, 282, -187, -183, 36,
	41, 172, 280, 173, 281, -201, 282, -65, 169, -202,
	-202,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 572, 0, 319, 319, 319, 319,
	319, 319, 0, 652, 635, 0, 0, 0, 0, -2,
	293, 294, 0, 296, 297, 885, 885, 885, 885, 885,
	0, 0, 0, 0, 37, 38, 883, 1, 3, 584,
	0, 0, 323, 326, 321, 0, 635, 0, 0, 0,
	69, 0, 0, 870, 0, 871, 633, 633, 633, 653,
	654, 547, 548, 549, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 872, 873, 874, 875,
	876, 877, 878, 879, 0, 0, 636, 0, 631, 0,
	631, 631, 631, 0, 247, 393, 659, 660, 661, 662,
	663, 870, 871, 0, 0, 0, 0, 886, 886, 886,
	886, 0, 0, 886, 0, 279, 268, 270, 271, 272,
	273, 886, 290, 291, 288, 278, 292, 295, 298, 299,
	300, 301, 302, 0, 304, 0, 314, 30, 590, 0,
	0, 572, 32, 0, 319, 324, 325, 329, 327, 328,
	320, 0, 337, 341, 0, 401, 0, 406, -2, -2,
	-2, -2, -2, 0, 445, 446, 447, 448, 542, 0,
	0, 0, 0, 0, 0, 470, 471, 472, 473, 474,
	475, 543, 410, 411, 610, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 532, 0, 504, 504,
	504, 504, 504, 504, 504, 504, 0, 0, 0, 0,
	0, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	0, 0, 352, 354, 355, 356, 375, 0, 377, 0,
	0, 46, 50, 51, 0, 65, 858, 616, 657, -2,
	-2, -2, 0, 0, 658, -2, 786, -2, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	0, 86, 0, 0, 886, 0, 76, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 248, 886, 886, 886, 886, 886, 886, 886,
	886, 257, 887, 888, 657, 258, 259, 260, 886, 886,
	886, 886, 263, 0, 0, 280, 0, 274, 303, 0,
	0, 0, 0, 316, 0, 31, 884, 25, 0, 0,
	585, 586, 0, 573, 574, 577, 584, 30, 326, 0,
	331, 330, 322, 0, 338, 0, 0, 0, 342, 0,
	348, 344, 345, 346, 347, 0, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 431, 432,
	433, 434, 435, 436, 407, 0, 423, 0, 0, 0,
	464, 562, 465, 466, 467, 468, 469, 561, 563, 30,
	0, 443, 0, 333, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 533, 0, 496, 0, 497,
	498, 499, 500, 501, 502, 503, 0, 333, 333, 0,
	0, 48, 0, 392, 0, 0, 0, 0, 0, 0,
	381, 0, 0, 384, 0, 0, 0, 0, 376, 0,
	0, 395, 831, 378, 0, 380, -2, 0, 0, 0,
	44, 45, 0, 0, 52, 53, 0, 55, 56, 0,
	0, 0, 0, 177, 626, 627, 628, 547, 880, 882,
	624, 206, 0, 160, 156, 97, 98, 99, 100, 149,
	103, 149, 149, 149, 149, 174, 174, 174, 174, 131,
	132, 133, 134, 135, 136, 0, 0, 118, 149, 149,
	149, 122, 139, 140, 141, 142, 143, 144, 145, 146,
	101, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	151, 151, 151, 153, 153, 655, 71, 0, 79, 0,
	886, 0, 886, 84, 0, 222, 0, 241, 632, 0,
	886, 244, 245, 394, 664, 665, 249, 250, 251, 252,
	253, 254, 255, 256, 261, 266, 262, 267, 264, 281,
	275, 276, 269, 305, 308, 309, 310, 311, 312, 313,
	881, 306, 0, 92, 94, 95, 315, 317, 591, 0,
	0, 0, 0, 0, 0, 576, 578, 579, 590, 33,
	329, 0, 565, 0, 0, 0, 332, 28, 402, 403,
	405, 424, 0, 426, 428, 343, 339, 0, 545, -2,
	-2, 412, 413, 439, 440, 441, 0, 0, 0, 0,
	0, 437, 437, 419, 0, 449, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 459, 460, 463, 516, 517,
	0, 461, 550, 551, 462, 564, 442, 0, 609, 30,
	0, 0, 334, 335, 477, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 0, 0, 0, 0, 0,
	544, 0, 0, 0, 0, 539, 536, 0, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 399,
	613, 0, 353, 371, 373, 0, 368, 382, 383, 385,
	0, 387, 0, 389, 390, 357, 358, 359, 0, 0,
	0, 0, 379, 399, 0, 399, 47, 617, 619, 54,
	0, 0, 59, 60, 618, 620, 621, 622, 0, 85,
	207, 209, 212, 213, 214, 87, 88, 0, 0, 0,
	0, 0, 201, 202, 163, 161, 0, 158, 157, 102,
	0, 174, 174, 125, 126, 177, 0, 177, 177, 177,
	0, 0, 119, 120, 121, 113, 0, 114, 115, 116,
	0, 117, 0, 0, 886, 73, 0, 77, 78, 74,
	634, 75, 885, 0, 0, 647, 223, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 0, 240, 886,
	243, 284, 0, 0, 0, 0, 0, 0, 587, 588,
	589, 0, 575, 0, 0, 26, 0, 629, 630, 566,
	567, 349, 425, 427, 429, 0, 333, 414, 437, 437,
	420, 0, 415, 0, 416, 0, 409, 444, -2, 478,
	0, 0, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 572, 0, 537, 0, 0, 495, 506,
	507, 508, 509, 510, 603, 0, 0, -2, 0, 36,
	0, 399, 572, 0, 0, 0, 0, 365, 372, 0,
	0, 366, 0, 367, 386, 388, 0, 0, 0, 0,
	363, 572, 399, 611, 57, 58, 0, 0, 64, 178,
	179, 0, 210, 0, 0, 196, 0, 0, 199, 200,
	170, 0, 162, 96, 159, 0, 177, 177, 127, 0,
	128, 129, 130, 0, 147, 0, 0, 0, 0, 656,
	72, 80, 81, 0, 215, 885, 0, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 885, 0,
	0, 885, 648, 649, 650, 651, 0, 242, 265, 0,
	0, 282, 283, 93, 0, 318, 592, 0, 582, 583,
	580, 581, 27, 399, 0, 340, 546, 0, 417, 418,
	0, 438, 421, 479, 336, 0, 149, 149, 521, 149,
	153, 524, 149, 526, 149, 529, 0, 0, 0, 0,
	0, 545, 0, 0, 0, 534, 494, 540, 0, 611,
	0, 603, 593, 605, 607, 0, 30, 0, 599, 0,
	572, 584, 614, 351, 400, 615, 369, 0, 374, 0,
	0, 0, 377, 0, 584, 611, 43, 0, 61, 62,
	63, 208, 211, 0, 203, 149, 197, 198, 172, 0,
	164, 165, 166, 167, 168, 169, 150, 123, 124, 175,
	176, 174, 0, 174, 0, 154, 0, 886, 0, 0,
	216, 0, 217, 219, 220, 221, 0, 285, 286, 307,
	568, 350, 480, 422, 483, 518, 174, 522, 523, 525,
	527, 528, 530, 0, 485, 484, 486, 0, 0, 489,
	0, 0, 0, 0, 0, 538, 34, 0, 35, 0,
	608, -2, 0, 0, 0, 49, 584, 611, 0, 361,
	0, 0, 0, 395, 364, 611, 42, 612, 188, 0,
	205, 180, 173, 0, 177, 148, 177, 0, 0, 70,
	82, 83, 0, 0, 570, 0, 519, 520, 0, 0,
	0, 0, 0, 511, 493, 535, 0, 606, 0, -2,
	0, 601, 600, 611, 40, 0, 370, 396, 397, 398,
	360, 41, 187, 189, 0, 194, 0, 204, 185, 0,
	182, 184, 171, 137, 138, 152, 155, 0, 0, 29,
	0, 0, 531, 487, 488, 490, 491, 0, 0, 0,
	0, 596, 30, 0, 39, 362, 190, 191, 0, 195,
	193, 89, 0, 181, 183, 76, 0, 236, 0, 571,
	569, 492, 0, 0, 0, 604, -2, 602, 192, 186,
	79, 235, 0, 0, 512, 0, 515, 218, 237, 0,
	513, 0, 0, 0, 0, 0, 514, 0, 0, 238,
	239,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 129, 121, 3,
	56, 58, 126, 124, 57, 125, 137, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 285,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:374
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:465
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support FROM TableExpr with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit, Returning: yyDollar[10].returning}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:474
		{
			if yylex.(*Tokenizer).IsMySQL() && len(yyDollar[9].returning) != 0 {
				yylex.Error("MySQL/MariaDB dialect doesn't support returning with update statement")
				return 1
			}

			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{yyDollar[4].aliasedTableName}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit, Returning: yyDollar[9].returning}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableExprs, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), Returning: yyDollar[8].returning}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableExprs, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), Returning: yyDollar[7].returning}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].aliasedTableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].aliasedTableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:512
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = LocalStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:615
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:645
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:660
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:688
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:717
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:985
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:990
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1008
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1020
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = nil
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.colKeyOpt = colKey
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.optVal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1342
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1375
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1391
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1395
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1415
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1420
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1518
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1582
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.str = "extended "
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = "full "
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1616
		{
			yyVAL.showFilter = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1624
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = LocalStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = SessionStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = GlobalStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &Begin{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Begin{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Commit{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Rollback{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &OtherRead{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &OtherRead{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &OtherRead{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1773
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `EXECUTE prepared_statement_name (parameter_values)` statement")
				return 1
			}
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Values: yyDollar[3].valTuple}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			setAllowComments(yylex, true)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.bytes2 = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = UnionStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = UnionAllStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = UnionDistinctStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = SQLCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = DistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = StraightJoinHint
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1856
		{
			yyVAL.selectExprs = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1888
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1893
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1927
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1937
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1971
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1975
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2016
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2020
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2028
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2032
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2038
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2040
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2043
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = JoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = StraightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = LeftJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = RightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = NaturalJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.indexHints = nil
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2141
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2145
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2149
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2230
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2242
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't support `ILIKE` statement")
				return 1
			}
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2351
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2357
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2506
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = BooleanModeStr
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2686
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2690
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.str = QueryExpansionStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2778
		{
			yyVAL.str = string("")
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2798
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yyVAL.expr = NewStrVal(yyDollar[1].bytes)
			} else {
				yyVAL.expr = &ColName{Name: NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')}
			}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2840
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &NullVal{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &Default{}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2930
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.exprs = nil
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = nil
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.orderBy = nil
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2994
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.str = AscScr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.str = DescScr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.str = DescNullsLastScr
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = AscNullsLastScr
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.limit = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr, Type: LimitTypeLimitOnly}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Type: LimitTypeLimitAll}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3044
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow 'LIMIT offset, limit' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr, Type: LimitTypeCommaSeparated}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3052
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr, Type: LimitTypeLimitAndOffset}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL dialect doesn't allow 'LIMIT ALL' syntax of LIMIT statements")
				return 1
			}
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Type: LimitTypeLimitAllAndOffset}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3065
		{
			yyVAL.str = ""
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = ForUpdateStr
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = ShareModeStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3094
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3099
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3103
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3107
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3118
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3122
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3126
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3131
		{
			yyVAL.updateExprs = nil
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3135
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3145
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3161
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3178
		{
			yyVAL.returning = nil
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3183
		{
			yyVAL.returning = Returning(yyDollar[2].selectExprs)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3194
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3200
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3216
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3220
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3230
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3234
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3241
		{
			yyVAL.bytes = []byte("charset")
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = &Default{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3265
		{
			yyVAL.byt = 0
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3267
		{
			yyVAL.byt = 1
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3275
		{
			yyVAL.str = ""
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.str = IgnoreStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3306
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3315
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3322
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3324
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3626
		{
			decNesting(yylex)
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3631
		{
			forceEOF(yylex)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3636
		{
			forceEOF(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3640
		{
			forceEOF(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3644
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
