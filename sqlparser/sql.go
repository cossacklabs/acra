// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "github.com/cossacklabs/acra/sqlparser/dialect/mysql"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:55
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const NULLS = 57375
const FIRST = 57376
const LAST = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const INTERVAL = 57398
const ID = 57399
const PG_ESCAPE_STRING = 57400
const HEX = 57401
const SINGLE_QUOTE_STRING = 57402
const DOUBLE_QUOTE_STRING = 57403
const BACK_QUOTE_STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const DOLLAR_SIGN = 57412
const LIST_ARG = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const MICROSECOND = 57417
const SECOND = 57418
const MINUTE = 57419
const HOUR = 57420
const DAY = 57421
const WEEK = 57422
const MONTH = 57423
const QUARTER = 57424
const SECOND_MICROSECOND = 57425
const MINUTE_MICROSECOND = 57426
const MINUTE_SECOND = 57427
const HOUR_MICROSECOND = 57428
const HOUR_SECOND = 57429
const HOUR_MINUTE = 57430
const DAY_MICROSECOND = 57431
const DAY_SECOND = 57432
const DAY_MINUTE = 57433
const DAY_HOUR = 57434
const YEAR_MONTH = 57435
const YEAR = 57436
const OR = 57437
const AND = 57438
const NOT = 57439
const BETWEEN = 57440
const CASE = 57441
const WHEN = 57442
const THEN = 57443
const ELSE = 57444
const END = 57445
const LE = 57446
const GE = 57447
const NE = 57448
const NULL_SAFE_EQUAL = 57449
const IS = 57450
const LIKE = 57451
const REGEXP = 57452
const IN = 57453
const SHIFT_LEFT = 57454
const SHIFT_RIGHT = 57455
const DIV = 57456
const MOD = 57457
const UNARY = 57458
const COLLATE = 57459
const BINARY = 57460
const UNDERSCORE_BINARY = 57461
const JSON_EXTRACT_OP = 57462
const JSON_UNQUOTE_EXTRACT_OP = 57463
const CREATE = 57464
const ALTER = 57465
const DROP = 57466
const RENAME = 57467
const ANALYZE = 57468
const ADD = 57469
const SCHEMA = 57470
const TABLE = 57471
const INDEX = 57472
const VIEW = 57473
const TO = 57474
const IGNORE = 57475
const IF = 57476
const UNIQUE = 57477
const PRIMARY = 57478
const COLUMN = 57479
const CONSTRAINT = 57480
const SPATIAL = 57481
const FULLTEXT = 57482
const FOREIGN = 57483
const KEY_BLOCK_SIZE = 57484
const SHOW = 57485
const DESCRIBE = 57486
const EXPLAIN = 57487
const DATE = 57488
const ESCAPE = 57489
const REPAIR = 57490
const OPTIMIZE = 57491
const TRUNCATE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const VINDEX = 57500
const VINDEXES = 57501
const STATUS = 57502
const VARIABLES = 57503
const BEGIN = 57504
const START = 57505
const TRANSACTION = 57506
const COMMIT = 57507
const ROLLBACK = 57508
const DEALLOCATE = 57509
const PREPARE = 57510
const EXECUTE = 57511
const BIT = 57512
const TINYINT = 57513
const SMALLINT = 57514
const MEDIUMINT = 57515
const INT = 57516
const INTEGER = 57517
const BIGINT = 57518
const INTNUM = 57519
const REAL = 57520
const DOUBLE = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const DATABASES = 57558
const TABLES = 57559
const VITESS_KEYSPACES = 57560
const VITESS_SHARDS = 57561
const VITESS_TABLETS = 57562
const VSCHEMA_TABLES = 57563
const EXTENDED = 57564
const FULL = 57565
const PROCESSLIST = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const LOCAL = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const RETURNING = 57605

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"LOCAL",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	177, 281,
	178, 281,
	-2, 269,
	-1, 253,
	74, 543,
	100, 543,
	102, 543,
	108, 543,
	109, 543,
	110, 543,
	111, 543,
	112, 543,
	113, 543,
	114, 543,
	116, 543,
	117, 543,
	118, 543,
	119, 543,
	120, 543,
	121, 543,
	122, 543,
	123, 543,
	124, 543,
	125, 543,
	126, 543,
	127, 543,
	128, 543,
	129, 543,
	130, 543,
	133, 543,
	-2, 397,
	-1, 254,
	56, 637,
	136, 642,
	137, 637,
	138, 637,
	-2, 532,
	-1, 255,
	136, 644,
	-2, 531,
	-1, 256,
	136, 645,
	-2, 638,
	-1, 257,
	136, 646,
	-2, 639,
	-1, 332,
	108, 797,
	-2, 65,
	-1, 333,
	108, 825,
	-2, 66,
	-1, 334,
	108, 785,
	-2, 67,
	-1, 338,
	108, 769,
	149, 769,
	-2, 603,
	-1, 340,
	108, 807,
	149, 807,
	-2, 605,
	-1, 563,
	74, 531,
	136, 644,
	-2, 464,
	-1, 614,
	55, 45,
	57, 45,
	-2, 47,
	-1, 771,
	136, 648,
	-2, 641,
	-1, 772,
	136, 642,
	-2, 637,
	-1, 1007,
	5, 31,
	-2, 429,
	-1, 1032,
	5, 30,
	-2, 573,
	-1, 1270,
	5, 31,
	-2, 574,
	-1, 1317,
	5, 30,
	-2, 576,
	-1, 1380,
	5, 31,
	-2, 577,
}

const yyPrivate = 57344

const yyLast = 11752

var yyAct = [...]int{
	289, 53, 1371, 944, 693, 560, 858, 510, 1328, 259,
	1174, 1202, 1276, 1175, 288, 609, 728, 876, 607, 1095,
	938, 24, 233, 559, 3, 899, 1171, 900, 59, 859,
	1052, 1147, 999, 1036, 1098, 806, 809, 337, 626, 1086,
	321, 1041, 797, 641, 910, 488, 224, 846, 896, 934,
	494, 257, 774, 625, 53, 854, 434, 596, 330, 315,
	611, 500, 238, 242, 260, 508, 979, 326, 320, 924,
	325, 323, 58, 1265, 1400, 1390, 1398, 232, 190, 316,
	1378, 1396, 945, 237, 1389, 83, 314, 1166, 1262, 196,
	438, 1337, 196, 225, 226, 227, 228, 1377, 576, 1197,
	1198, 1196, 246, 196, 188, 184, 185, 186, 890, 324,
	1060, 723, 476, 1059, 437, 627, 1061, 628, 263, 196,
	196, 83, 891, 892, 725, 196, 239, 83, 54, 29,
	30, 726, 478, 808, 636, 735, 637, 1209, 1210, 459,
	902, 1077, 917, 1213, 63, 1288, 1211, 925, 1250, 1248,
	229, 624, 223, 1397, 447, 1395, 1353, 524, 523, 533,
	534, 526, 527, 528, 529, 530, 531, 532, 525, 1303,
	1372, 535, 65, 66, 67, 68, 69, 473, 474, 855,
	733, 471, 472, 636, 735, 637, 319, 524, 523, 533,
	534, 526, 527, 528, 529, 530, 531, 532, 525, 1119,
	856, 535, 448, 441, 465, 465, 465, 465, 1335, 181,
	465, 182, 1329, 182, 701, 205, 187, 692, 465, 629,
	877, 879, 445, 1116, 446, 461, 912, 463, 1331, 1118,
	453, 484, 1000, 196, 912, 196, 1051, 1050, 1049, 53,
	455, 196, 436, 217, 444, 199, 183, 547, 548, 1358,
	1273, 196, 460, 462, 544, 83, 83, 83, 83, 546,
	1130, 83, 497, 1015, 993, 496, 1071, 745, 515, 83,
	528, 529, 530, 531, 532, 525, 454, 558, 535, 525,
	897, 196, 535, 1217, 535, 742, 971, 507, 1168, 744,
	562, 847, 565, 566, 567, 568, 569, 570, 571, 572,
	83, 575, 577, 577, 577, 577, 577, 577, 577, 577,
	585, 586, 587, 588, 1354, 925, 1330, 200, 878, 856,
	1376, 608, 202, 1363, 1227, 1039, 961, 1212, 743, 209,
	204, 1123, 1336, 1334, 630, 696, 458, 1012, 1075, 486,
	960, 450, 451, 452, 505, 911, 550, 847, 1117, 1022,
	1115, 506, 505, 911, 591, 914, 206, 1218, 1170, 212,
	507, 466, 805, 614, 210, 196, 276, 1366, 507, 506,
	505, 965, 196, 196, 196, 502, 781, 545, 1382, 83,
	915, 1011, 959, 1010, 498, 55, 507, 180, 83, 201,
	779, 780, 778, 972, 615, 623, 748, 749, 622, 1361,
	80, 578, 579, 580, 581, 582, 583, 584, 763, 765,
	766, 1304, 1294, 506, 505, 440, 203, 912, 213, 214,
	215, 216, 221, 1293, 506, 505, 1090, 219, 218, 220,
	507, 335, 1089, 764, 1205, 1122, 331, 1078, 465, 319,
	1204, 507, 439, 990, 991, 992, 465, 918, 1072, 435,
	248, 956, 953, 954, 313, 952, 947, 465, 465, 465,
	465, 465, 465, 465, 465, 506, 505, 800, 56, 707,
	506, 505, 465, 465, 465, 465, 706, 633, 697, 695,
	963, 966, 507, 690, 698, 699, 777, 507, 702, 83,
	456, 705, 710, 442, 443, 196, 196, 83, 449, 196,
	736, 435, 196, 231, 729, 729, 196, 487, 83, 83,
	83, 83, 83, 83, 83, 83, 1341, 958, 1340, 750,
	727, 708, 1214, 83, 83, 83, 83, 1037, 738, 1386,
	487, 196, 60, 775, 1321, 1369, 911, 196, 1038, 957,
	1172, 909, 907, 1037, 759, 908, 811, 53, 636, 735,
	637, 83, 1268, 771, 798, 196, 1038, 636, 735, 637,
	26, 83, 752, 562, 1062, 1321, 487, 636, 735, 637,
	467, 467, 467, 467, 1005, 767, 467, 962, 593, 839,
	842, 1226, 769, 593, 467, 848, 813, 1321, 1322, 1222,
	964, 1285, 1284, 1064, 320, 320, 320, 320, 320, 1193,
	487, 1037, 860, 1272, 487, 1224, 1223, 1220, 1221, 608,
	56, 880, 801, 804, 883, 514, 617, 320, 1220, 1219,
	1005, 487, 851, 734, 734, 973, 487, 593, 487, 811,
	487, 857, 813, 889, 844, 884, 618, 776, 640, 639,
	592, 1137, 196, 482, 1017, 196, 196, 196, 196, 196,
	1005, 1106, 975, 861, 483, 1014, 864, 196, 885, 621,
	196, 620, 873, 746, 196, 56, 694, 593, 196, 196,
	882, 1298, 83, 881, 862, 863, 799, 865, 888, 886,
	619, 26, 617, 1104, 919, 491, 495, 1005, 56, 335,
	1016, 83, 939, 239, 331, 1187, 465, 904, 465, 835,
	836, 1013, 516, 632, 26, 843, 465, 1067, 1042, 1043,
	940, 1316, 319, 319, 319, 319, 319, 1207, 935, 850,
	930, 852, 853, 1106, 926, 927, 928, 319, 1030, 929,
	71, 56, 942, 943, 1031, 319, 936, 937, 485, 1148,
	561, 758, 967, 56, 196, 968, 1172, 83, 1091, 83,
	574, 1045, 1048, 196, 56, 1104, 196, 83, 704, 479,
	870, 464, 868, 1047, 867, 871, 866, 869, 1150, 1394,
	1105, 994, 243, 244, 1388, 1110, 1107, 1100, 1101, 1108,
	1103, 1102, 1129, 771, 526, 527, 528, 529, 530, 531,
	532, 525, 1109, 775, 535, 1393, 983, 980, 1112, 872,
	976, 602, 603, 1152, 467, 1156, 982, 1151, 1149, 1158,
	1133, 1134, 467, 1154, 598, 601, 602, 603, 599, 1034,
	600, 604, 1153, 467, 467, 467, 467, 467, 467, 467,
	467, 995, 1131, 1132, 981, 1155, 1157, 751, 467, 467,
	467, 467, 1105, 501, 988, 987, 489, 1110, 1107, 1100,
	1101, 1108, 1103, 1102, 1082, 1033, 638, 1035, 490, 457,
	499, 1074, 1368, 1367, 1109, 1314, 754, 1068, 1266, 1299,
	1099, 949, 703, 1127, 606, 501, 514, 770, 1032, 240,
	241, 986, 467, 234, 320, 1346, 1345, 235, 60, 985,
	1301, 989, 1038, 1021, 503, 1355, 1289, 776, 741, 810,
	812, 62, 1055, 731, 7, 64, 1046, 732, 6, 730,
	5, 616, 57, 1, 271, 270, 1054, 849, 1056, 598,
	601, 602, 603, 599, 814, 600, 604, 1065, 1057, 1042,
	1043, 739, 83, 1264, 549, 196, 840, 840, 946, 1094,
	955, 1004, 840, 1370, 465, 1327, 1201, 875, 906, 898,
	433, 83, 70, 1069, 1070, 1362, 760, 761, 905, 840,
	1333, 1287, 913, 1076, 916, 1206, 468, 469, 470, 465,
	1088, 475, 1365, 1081, 1073, 1083, 1084, 1085, 1019, 480,
	646, 645, 335, 643, 644, 642, 648, 467, 1111, 647,
	1079, 1080, 737, 208, 83, 83, 327, 83, 1097, 207,
	328, 901, 319, 605, 631, 941, 467, 504, 72, 1114,
	1113, 951, 1121, 561, 724, 970, 477, 1126, 837, 838,
	83, 211, 543, 196, 196, 1135, 984, 196, 1058, 1141,
	1140, 336, 1177, 1179, 53, 747, 196, 1173, 1063, 493,
	860, 1180, 1146, 1344, 1160, 83, 1176, 860, 1167, 1300,
	1189, 1190, 1191, 771, 1159, 1020, 573, 1178, 845, 262,
	762, 275, 467, 272, 467, 1182, 1181, 1183, 274, 273,
	1087, 1087, 467, 753, 1029, 517, 261, 974, 250, 318,
	589, 895, 597, 1194, 595, 83, 594, 83, 1044, 1195,
	1199, 1040, 317, 1136, 1200, 1261, 1352, 920, 921, 922,
	923, 757, 28, 61, 245, 23, 22, 770, 21, 19,
	18, 17, 467, 931, 932, 933, 83, 20, 83, 83,
	16, 15, 14, 32, 13, 12, 11, 10, 1215, 1216,
	9, 8, 1225, 4, 236, 25, 2, 0, 320, 0,
	1002, 0, 0, 196, 1237, 1228, 1003, 0, 252, 729,
	0, 83, 799, 1007, 1232, 0, 1239, 0, 1230, 1251,
	0, 1233, 0, 0, 83, 196, 0, 1260, 0, 0,
	1238, 83, 0, 1246, 0, 1008, 1009, 0, 0, 0,
	0, 0, 83, 1018, 0, 0, 0, 0, 1024, 196,
	1025, 1026, 1027, 1028, 977, 978, 0, 495, 0, 691,
	1267, 0, 1278, 1279, 1280, 1275, 0, 700, 1281, 0,
	0, 0, 0, 0, 0, 1208, 0, 1283, 711, 712,
	713, 714, 715, 716, 717, 718, 465, 1065, 0, 0,
	0, 0, 0, 719, 720, 721, 722, 0, 0, 83,
	0, 83, 83, 83, 196, 83, 1296, 1053, 0, 0,
	0, 83, 0, 0, 0, 1297, 319, 0, 0, 0,
	0, 901, 1006, 1235, 492, 0, 467, 0, 734, 1177,
	0, 1313, 1318, 0, 0, 0, 0, 83, 83, 83,
	1319, 1320, 1315, 1176, 0, 0, 0, 0, 0, 1290,
	0, 1292, 0, 0, 0, 1317, 0, 1332, 1023, 1326,
	1343, 0, 191, 0, 0, 222, 0, 1096, 0, 1092,
	467, 1342, 467, 0, 1302, 0, 230, 1177, 0, 53,
	0, 0, 0, 0, 83, 83, 0, 1356, 0, 0,
	249, 1176, 191, 191, 0, 467, 1360, 83, 191, 1338,
	0, 1339, 1357, 0, 1145, 0, 0, 0, 0, 0,
	83, 0, 1374, 0, 0, 1139, 0, 0, 0, 0,
	467, 1291, 1379, 0, 0, 860, 1381, 0, 0, 0,
	0, 0, 0, 83, 1384, 0, 0, 1163, 0, 0,
	0, 0, 467, 0, 0, 0, 0, 0, 1391, 1392,
	0, 0, 1192, 0, 0, 0, 0, 840, 1399, 0,
	514, 0, 1053, 1311, 840, 0, 0, 0, 0, 0,
	83, 0, 0, 551, 553, 554, 555, 556, 557, 0,
	0, 0, 0, 0, 83, 0, 901, 0, 901, 0,
	0, 467, 0, 467, 1203, 0, 0, 0, 0, 564,
	0, 0, 0, 0, 0, 0, 191, 0, 191, 0,
	0, 0, 0, 0, 191, 0, 0, 948, 0, 950,
	0, 0, 0, 0, 191, 0, 1229, 969, 0, 0,
	0, 0, 1364, 1169, 0, 0, 0, 0, 0, 1231,
	1240, 0, 0, 0, 0, 0, 1234, 1242, 0, 1184,
	1185, 0, 1139, 1186, 481, 0, 1188, 467, 0, 1252,
	1253, 1254, 0, 0, 1257, 0, 0, 1383, 0, 0,
	0, 0, 0, 0, 519, 0, 522, 1269, 1270, 1271,
	0, 1274, 536, 537, 538, 539, 540, 541, 542, 0,
	520, 521, 518, 524, 523, 533, 534, 526, 527, 528,
	529, 530, 531, 532, 525, 0, 0, 535, 0, 0,
	0, 0, 0, 1259, 1277, 0, 1277, 1277, 1277, 0,
	1282, 901, 0, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 1236, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 191, 613, 191, 1096, 901,
	0, 0, 467, 467, 467, 0, 1243, 1244, 0, 1245,
	0, 1310, 1247, 0, 1249, 533, 534, 526, 527, 528,
	529, 530, 531, 532, 525, 0, 0, 535, 1323, 1324,
	1325, 1263, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	514, 0, 0, 0, 1347, 1348, 1349, 1350, 1351, 0,
	0, 1286, 1203, 524, 523, 533, 534, 526, 527, 528,
	529, 530, 531, 532, 525, 1277, 773, 535, 0, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 0, 0, 0, 0, 1359, 0,
	0, 0, 1375, 0, 0, 0, 0, 1380, 0, 0,
	0, 0, 0, 0, 0, 1093, 0, 0, 191, 191,
	1385, 0, 191, 0, 0, 191, 561, 0, 0, 709,
	0, 0, 840, 487, 0, 514, 0, 0, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 1387,
	0, 1403, 1404, 0, 191, 0, 0, 0, 1258, 487,
	740, 0, 0, 0, 0, 0, 0, 0, 26, 27,
	54, 29, 30, 0, 0, 0, 0, 0, 191, 0,
	887, 0, 0, 0, 0, 0, 0, 45, 893, 0,
	709, 0, 31, 0, 524, 523, 533, 534, 526, 527,
	528, 529, 530, 531, 532, 525, 1373, 561, 535, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 56, 0,
	524, 523, 533, 534, 526, 527, 528, 529, 530, 531,
	532, 525, 0, 249, 535, 0, 0, 0, 0, 0,
	249, 249, 0, 0, 841, 841, 249, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 249, 249, 249, 0, 191, 0, 841, 191, 191,
	191, 191, 191, 0, 0, 0, 663, 0, 0, 0,
	874, 1256, 0, 191, 0, 0, 1142, 613, 1255, 487,
	0, 191, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 33, 34, 36, 35, 38, 524, 523, 533, 534,
	526, 527, 528, 529, 530, 531, 532, 525, 0, 0,
	535, 0, 39, 46, 47, 0, 0, 48, 49, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 997,
	998, 41, 42, 668, 43, 44, 50, 51, 52, 0,
	524, 523, 533, 534, 526, 527, 528, 529, 530, 531,
	532, 525, 0, 0, 535, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 191,
	651, 524, 523, 533, 534, 526, 527, 528, 529, 530,
	531, 532, 525, 0, 0, 535, 0, 1295, 523, 533,
	534, 526, 527, 528, 529, 530, 531, 532, 525, 664,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 249, 678, 679, 680, 681, 682, 683, 684,
	0, 685, 686, 687, 688, 689, 665, 666, 667, 649,
	650, 677, 0, 652, 0, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 669, 670, 671, 672, 673,
	674, 675, 676, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 815, 816, 817, 818, 819, 820, 821,
	822, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 823, 524, 523, 533, 534, 526, 527, 528,
	529, 530, 531, 532, 525, 0, 0, 535, 0, 249,
	1001, 0, 0, 0, 524, 523, 533, 534, 526, 527,
	528, 529, 530, 531, 532, 525, 0, 0, 535, 0,
	524, 523, 533, 534, 526, 527, 528, 529, 530, 531,
	532, 525, 552, 0, 535, 0, 0, 0, 191, 1143,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 1162, 0, 1164, 1165, 0, 0, 0,
	0, 0, 0, 0, 284, 277, 802, 803, 0, 279,
	280, 281, 282, 0, 0, 278, 285, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 1125, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1241, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 422, 412, 0, 384,
	424, 362, 376, 432, 377, 378, 405, 348, 392, 133,
	374, 0, 365, 343, 371, 344, 363, 386, 100, 389,
	361, 414, 395, 114, 0, 0, 191, 430, 116, 400,
	0, 150, 126, 0, 0, 388, 416, 390, 410, 383,
	406, 353, 399, 425, 375, 403, 426, 0, 191, 0,
	385, 82, 0, 0, 636, 635, 637, 903, 0, 0,
	0, 0, 93, 0, 0, 0, 402, 421, 373, 0,
	0, 0, 191, 0, 1305, 1306, 0, 1307, 1308, 1309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	342, 401, 0, 346, 349, 431, 419, 368, 369, 1066,
	0, 0, 0, 0, 0, 0, 387, 391, 407, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 0,
	398, 0, 0, 0, 350, 347, 0, 613, 0, 0,
	352, 0, 367, 408, 0, 341, 411, 417, 382, 197,
	420, 380, 379, 423, 139, 0, 0, 153, 105, 104,
	113, 415, 364, 372, 96, 370, 145, 135, 165, 397,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 1401, 345,
	0, 151, 167, 179, 360, 418, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 356, 359, 354,
	355, 393, 394, 427, 428, 429, 409, 351, 0, 357,
	358, 0, 413, 396, 84, 0, 115, 177, 141, 102,
	168, 0, 0, 0, 0, 422, 412, 0, 384, 424,
	362, 376, 432, 377, 378, 405, 348, 392, 133, 374,
	841, 365, 343, 371, 344, 363, 386, 100, 389, 361,
	414, 395, 114, 0, 0, 0, 430, 116, 400, 0,
	150, 126, 0, 0, 388, 416, 390, 410, 383, 406,
	353, 399, 425, 375, 403, 426, 0, 0, 0, 385,
	82, 0, 0, 636, 635, 637, 903, 0, 0, 0,
	0, 93, 0, 0, 0, 402, 421, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 342,
	401, 0, 346, 349, 431, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 407, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 0, 0, 352,
	0, 367, 408, 0, 341, 411, 417, 382, 197, 420,
	380, 379, 423, 139, 0, 0, 153, 105, 104, 113,
	415, 364, 372, 96, 370, 145, 135, 165, 397, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 345, 0,
	151, 167, 179, 360, 418, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 356, 359, 354, 355,
	393, 394, 427, 428, 429, 409, 351, 0, 357, 358,
	0, 413, 396, 84, 0, 115, 177, 141, 102, 168,
	422, 412, 0, 384, 424, 362, 376, 432, 377, 378,
	405, 348, 392, 133, 374, 0, 365, 343, 371, 344,
	363, 386, 100, 389, 361, 414, 395, 114, 0, 0,
	0, 430, 116, 400, 0, 150, 126, 0, 0, 388,
	416, 390, 410, 383, 406, 353, 399, 425, 375, 403,
	426, 0, 0, 0, 385, 256, 0, 0, 194, 772,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	402, 421, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 342, 401, 0, 346, 349, 431,
	419, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	387, 391, 407, 381, 0, 0, 0, 0, 0, 0,
	768, 0, 366, 0, 398, 0, 0, 0, 350, 347,
	0, 0, 0, 0, 352, 0, 367, 408, 0, 341,
	411, 417, 382, 197, 420, 380, 379, 423, 139, 0,
	0, 153, 105, 104, 113, 415, 364, 372, 96, 370,
	145, 135, 165, 397, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 345, 0, 151, 167, 179, 360, 418,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 356, 359, 354, 355, 393, 394, 427, 428, 429,
	409, 351, 0, 357, 358, 0, 413, 396, 84, 0,
	115, 177, 141, 102, 168, 422, 412, 0, 384, 424,
	362, 376, 432, 377, 378, 405, 348, 392, 133, 374,
	0, 365, 343, 371, 344, 363, 386, 100, 389, 361,
	414, 395, 114, 0, 0, 0, 430, 116, 400, 0,
	150, 126, 0, 0, 388, 416, 390, 410, 383, 406,
	353, 399, 425, 375, 403, 426, 0, 0, 0, 385,
	256, 0, 0, 194, 772, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 402, 421, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 342,
	401, 0, 346, 349, 431, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 407, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 0, 0, 352,
	0, 367, 408, 0, 341, 411, 417, 382, 197, 420,
	380, 379, 423, 139, 0, 0, 153, 105, 104, 113,
	415, 364, 372, 96, 370, 145, 135, 165, 397, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 345, 0,
	151, 167, 179, 360, 418, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 356, 359, 354, 355,
	393, 394, 427, 428, 429, 409, 351, 0, 357, 358,
	0, 413, 396, 84, 0, 115, 177, 141, 102, 168,
	422, 412, 0, 384, 424, 362, 376, 432, 377, 378,
	405, 348, 392, 133, 374, 0, 365, 343, 371, 344,
	363, 386, 100, 389, 361, 414, 395, 114, 0, 0,
	0, 430, 116, 400, 0, 150, 126, 0, 0, 388,
	416, 390, 410, 383, 406, 353, 399, 425, 375, 403,
	426, 0, 0, 0, 385, 195, 0, 0, 194, 192,
	193, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	402, 421, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 342, 401, 0, 346, 349, 431,
	419, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	387, 391, 407, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 398, 0, 0, 0, 350, 347,
	0, 0, 0, 0, 352, 0, 367, 408, 0, 341,
	411, 417, 382, 197, 420, 380, 379, 423, 139, 0,
	0, 153, 105, 104, 113, 415, 364, 372, 96, 370,
	145, 135, 165, 397, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 345, 0, 151, 167, 179, 360, 418,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 356, 359, 354, 355, 393, 394, 427, 428, 429,
	409, 351, 0, 357, 358, 0, 413, 396, 84, 0,
	115, 177, 141, 102, 168, 422, 412, 0, 384, 424,
	362, 376, 432, 377, 378, 405, 348, 392, 133, 374,
	0, 365, 343, 371, 344, 363, 386, 100, 389, 361,
	414, 395, 114, 0, 0, 0, 430, 116, 400, 0,
	150, 126, 0, 0, 388, 416, 390, 410, 383, 406,
	353, 399, 425, 375, 403, 426, 56, 0, 0, 385,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 402, 421, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 342,
	401, 0, 346, 349, 431, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 407, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 0, 0, 352,
	0, 367, 408, 0, 341, 411, 417, 382, 197, 420,
	380, 379, 423, 139, 0, 0, 153, 105, 104, 113,
	415, 364, 372, 96, 370, 145, 135, 165, 397, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 345, 0,
	151, 167, 179, 360, 418, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 356, 359, 354, 355,
	393, 394, 427, 428, 429, 409, 351, 0, 357, 358,
	0, 413, 396, 84, 0, 115, 177, 141, 102, 168,
	422, 412, 0, 384, 424, 362, 376, 432, 377, 378,
	405, 348, 392, 133, 374, 0, 365, 343, 371, 344,
	363, 386, 100, 389, 361, 414, 395, 114, 0, 0,
	0, 430, 116, 400, 0, 150, 126, 0, 0, 388,
	416, 390, 410, 383, 406, 353, 399, 425, 375, 403,
	426, 0, 0, 0, 385, 82, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	402, 421, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 342, 401, 0, 346, 349, 431,
	419, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	387, 391, 407, 381, 0, 0, 0, 0, 0, 0,
	1138, 0, 366, 0, 398, 0, 0, 0, 350, 347,
	0, 0, 0, 0, 352, 0, 367, 408, 0, 341,
	411, 417, 382, 197, 420, 380, 379, 423, 139, 0,
	0, 153, 105, 104, 113, 415, 364, 372, 96, 370,
	145, 135, 165, 397, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 345, 0, 151, 167, 179, 360, 418,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 356, 359, 354, 355, 393, 394, 427, 428, 429,
	409, 351, 0, 357, 358, 0, 413, 396, 84, 0,
	115, 177, 141, 102, 168, 422, 412, 0, 384, 424,
	362, 376, 432, 377, 378, 405, 348, 392, 133, 374,
	0, 365, 343, 371, 344, 363, 386, 100, 389, 361,
	414, 395, 114, 0, 0, 0, 430, 116, 400, 0,
	150, 126, 0, 0, 388, 416, 390, 410, 383, 406,
	353, 399, 425, 375, 403, 426, 0, 0, 0, 385,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 402, 421, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 342,
	401, 0, 346, 349, 431, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 407, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 0, 0, 352,
	0, 367, 408, 0, 341, 411, 417, 382, 197, 420,
	380, 379, 423, 139, 0, 0, 153, 105, 104, 113,
	415, 364, 372, 96, 370, 145, 135, 165, 397, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 345, 0,
	151, 167, 179, 360, 418, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 356, 359, 354, 355,
	393, 394, 427, 428, 429, 409, 351, 0, 357, 358,
	0, 413, 396, 84, 0, 115, 177, 141, 102, 168,
	422, 412, 0, 384, 424, 362, 376, 432, 377, 378,
	405, 348, 392, 133, 374, 0, 365, 343, 371, 344,
	363, 386, 100, 389, 361, 414, 395, 114, 0, 0,
	0, 430, 116, 400, 0, 150, 126, 0, 0, 388,
	416, 390, 410, 383, 406, 353, 399, 425, 375, 403,
	426, 0, 0, 0, 385, 82, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	402, 421, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 342, 401, 0, 346, 349, 431,
	419, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	387, 391, 407, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 398, 0, 0, 0, 350, 347,
	0, 0, 0, 0, 352, 0, 367, 408, 0, 341,
	411, 417, 382, 197, 420, 380, 379, 423, 139, 0,
	0, 153, 105, 104, 113, 415, 364, 372, 96, 370,
	145, 135, 165, 397, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 339, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 345, 0, 151, 167, 179, 360, 418,
	173, 174, 175, 176, 0, 0, 0, 340, 338, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 356, 359, 354, 355, 393, 394, 427, 428, 429,
	409, 351, 0, 357, 358, 0, 413, 396, 84, 0,
	115, 177, 141, 102, 168, 422, 412, 0, 384, 424,
	362, 376, 432, 377, 378, 405, 348, 392, 133, 374,
	0, 365, 343, 371, 344, 363, 386, 100, 389, 361,
	414, 395, 114, 0, 0, 0, 430, 116, 400, 0,
	150, 126, 0, 0, 388, 416, 390, 410, 383, 406,
	353, 399, 425, 375, 403, 426, 0, 0, 0, 385,
	82, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 402, 421, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 342,
	401, 0, 346, 349, 431, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 407, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 0, 0, 352,
	0, 367, 408, 0, 341, 411, 417, 382, 197, 420,
	380, 379, 423, 139, 0, 0, 153, 105, 104, 113,
	415, 364, 372, 96, 370, 145, 135, 165, 397, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 329, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 339, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 345, 0,
	151, 167, 179, 360, 418, 173, 174, 175, 176, 0,
	0, 0, 340, 338, 334, 333, 332, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 356, 359, 354, 355,
	393, 394, 427, 428, 429, 409, 351, 0, 357, 358,
	0, 413, 396, 84, 0, 115, 177, 141, 102, 168,
	133, 0, 0, 807, 0, 258, 0, 0, 0, 100,
	0, 253, 0, 0, 114, 0, 0, 0, 300, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 290, 256, 284, 277, 255, 254, 193, 279, 280,
	281, 282, 0, 93, 278, 285, 0, 283, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 269, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 247, 0, 0,
	0, 311, 0, 268, 0, 0, 264, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 309, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 301, 310,
	307, 308, 305, 306, 304, 303, 302, 312, 293, 294,
	295, 296, 298, 0, 297, 84, 0, 115, 177, 141,
	102, 168, 133, 0, 0, 0, 0, 258, 0, 0,
	0, 100, 0, 253, 0, 0, 114, 0, 0, 0,
	300, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 290, 256, 284, 277, 255, 254, 193,
	279, 280, 281, 282, 0, 93, 278, 285, 0, 283,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 269, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 1312,
	0, 0, 0, 311, 0, 268, 0, 0, 264, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 309, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	301, 310, 307, 308, 305, 306, 304, 303, 302, 312,
	293, 294, 295, 296, 298, 0, 297, 84, 0, 115,
	177, 141, 102, 168, 133, 0, 0, 0, 0, 258,
	0, 0, 0, 100, 0, 253, 0, 0, 114, 0,
	0, 0, 300, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 487, 290, 256, 284, 277, 255,
	254, 193, 279, 280, 281, 282, 0, 93, 278, 285,
	0, 283, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 269, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 311, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 309, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 301, 310, 307, 308, 305, 306, 304, 303,
	302, 312, 293, 294, 295, 296, 298, 0, 297, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 0, 0,
	0, 258, 0, 0, 0, 100, 0, 253, 0, 0,
	114, 0, 0, 0, 300, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 290, 256, 284,
	277, 255, 254, 193, 279, 280, 281, 282, 0, 93,
	278, 285, 0, 283, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 269,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 267, 247, 0, 0, 0, 311, 0, 268,
	0, 0, 264, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 309,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 301, 310, 307, 308, 305, 306,
	304, 303, 302, 312, 293, 294, 295, 296, 298, 0,
	297, 84, 0, 115, 177, 141, 102, 168, 133, 0,
	0, 0, 0, 258, 0, 0, 0, 100, 0, 253,
	0, 0, 114, 0, 0, 0, 300, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 894, 0, 56, 0, 0, 290,
	256, 284, 277, 255, 254, 193, 279, 280, 281, 282,
	0, 93, 278, 285, 0, 283, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 269, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 0, 0, 0, 0, 311,
	0, 268, 0, 0, 264, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 309, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 301, 310, 307, 308,
	305, 306, 304, 303, 302, 312, 293, 294, 295, 296,
	298, 26, 297, 84, 0, 115, 177, 141, 102, 168,
	0, 0, 0, 133, 0, 0, 0, 0, 258, 0,
	0, 0, 100, 0, 253, 0, 0, 114, 0, 0,
	0, 300, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 290, 256, 284, 277, 255, 254,
	193, 279, 280, 281, 282, 0, 93, 278, 285, 0,
	283, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 269, 0, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 267,
	0, 0, 0, 0, 311, 0, 268, 0, 0, 264,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 309, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 301, 310, 307, 308, 305, 306, 304, 303, 302,
	312, 293, 294, 295, 296, 298, 0, 297, 84, 0,
	115, 177, 141, 102, 168, 133, 0, 0, 0, 0,
	258, 0, 0, 0, 100, 0, 253, 0, 0, 114,
	0, 0, 0, 300, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 290, 256, 284, 277,
	255, 254, 193, 279, 280, 281, 282, 0, 93, 278,
	285, 0, 283, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 269, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 267, 0, 0, 0, 0, 311, 0, 268, 0,
	0, 264, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 309, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 301, 310, 307, 308, 305, 306, 304,
	303, 302, 312, 293, 294, 295, 296, 298, 133, 297,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 552,
	0, 0, 114, 0, 0, 0, 300, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 290,
	256, 284, 277, 255, 254, 193, 279, 280, 281, 282,
	0, 93, 278, 285, 0, 283, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 0, 0, 0, 0, 311,
	0, 268, 0, 0, 264, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 309, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 1402, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 301, 310, 307, 308,
	305, 306, 304, 303, 302, 312, 293, 294, 295, 296,
	298, 133, 297, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 552, 0, 0, 114, 0, 0, 0, 300,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 290, 256, 284, 277, 255, 254, 193, 279,
	280, 281, 282, 0, 93, 278, 285, 0, 283, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 267, 0, 0,
	0, 0, 311, 0, 268, 0, 0, 264, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 309, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 301,
	310, 307, 308, 305, 306, 304, 303, 302, 312, 293,
	294, 295, 296, 298, 133, 297, 84, 0, 115, 177,
	141, 102, 168, 100, 0, 552, 0, 0, 114, 0,
	0, 0, 300, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 290, 256, 284, 277, 563,
	254, 193, 279, 280, 281, 282, 0, 93, 278, 285,
	0, 283, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 311, 0, 268, 0, 0,
	264, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 309, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 301, 310, 307, 308, 305, 306, 304, 303,
	302, 312, 293, 294, 295, 296, 298, 0, 297, 84,
	0, 115, 177, 141, 102, 168, 133, 0, 0, 0,
	509, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 116, 0, 0, 150, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 511, 512, 513, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 139, 0, 0, 153, 105, 104, 113, 0, 0,
	0, 96, 0, 145, 135, 165, 0, 136, 144, 117,
	157, 140, 164, 198, 172, 155, 171, 85, 154, 163,
	94, 147, 0, 0, 0, 87, 161, 152, 124, 109,
	110, 86, 0, 143, 99, 103, 98, 132, 158, 159,
	97, 90, 170, 89, 91, 169, 131, 156, 162, 125,
	122, 88, 160, 123, 121, 112, 101, 106, 137, 119,
	138, 107, 128, 127, 129, 0, 0, 0, 151, 167,
	179, 0, 0, 173, 174, 175, 176, 0, 0, 0,
	130, 92, 108, 148, 120, 111, 118, 142, 178, 134,
	146, 95, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 84, 0, 115, 177, 141, 102, 168, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 73,
	0, 0, 0, 79, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 75, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 76, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 82, 0, 0, 511, 512, 513,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 115, 177, 141, 102, 168, 133, 0, 0,
	0, 612, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 194, 192, 193, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 195, 0, 0, 194, 192, 193, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 84, 0, 115, 177, 141,
	102, 168, 100, 0, 634, 0, 0, 114, 0, 0,
	0, 0, 116, 0, 0, 150, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 636, 635,
	637, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 139, 0,
	0, 153, 105, 104, 113, 0, 0, 0, 96, 0,
	145, 135, 165, 0, 136, 144, 117, 157, 140, 164,
	198, 172, 155, 171, 85, 154, 163, 94, 147, 0,
	0, 0, 87, 161, 152, 124, 109, 110, 86, 0,
	143, 99, 103, 98, 132, 158, 159, 97, 90, 170,
	89, 91, 169, 131, 156, 162, 125, 122, 88, 160,
	123, 121, 112, 101, 106, 137, 119, 138, 107, 128,
	127, 129, 0, 0, 0, 151, 167, 179, 0, 0,
	173, 174, 175, 176, 0, 0, 0, 130, 92, 108,
	148, 120, 111, 118, 142, 178, 134, 146, 95, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 177, 141, 102, 168, 133, 0, 0, 0, 612,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 610, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	84, 0, 115, 177, 141, 102, 168, 590, 100, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 116, 0,
	0, 150, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 0, 0, 194, 192, 193, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 139, 0, 0, 153, 105, 104,
	113, 0, 0, 0, 96, 0, 145, 135, 165, 0,
	136, 144, 117, 157, 140, 164, 198, 172, 155, 171,
	85, 154, 163, 94, 147, 0, 0, 0, 87, 161,
	152, 124, 109, 110, 86, 0, 143, 99, 103, 98,
	132, 158, 159, 97, 90, 170, 89, 91, 169, 131,
	156, 162, 125, 122, 88, 160, 123, 121, 112, 101,
	106, 137, 119, 138, 107, 128, 127, 129, 0, 0,
	0, 151, 167, 179, 0, 0, 173, 174, 175, 176,
	0, 0, 0, 130, 92, 108, 148, 120, 111, 118,
	142, 178, 134, 146, 95, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 0,
	0, 0, 133, 0, 84, 0, 115, 177, 141, 102,
	168, 100, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 116, 0, 0, 150, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 194, 192, 193,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 139, 0, 0,
	153, 105, 104, 113, 0, 0, 0, 96, 0, 145,
	135, 165, 0, 136, 144, 117, 157, 140, 164, 198,
	172, 155, 171, 85, 154, 163, 94, 147, 0, 0,
	0, 87, 161, 152, 124, 109, 110, 86, 0, 143,
	99, 103, 98, 132, 158, 159, 97, 90, 170, 89,
	91, 169, 131, 156, 162, 125, 122, 88, 160, 123,
	121, 112, 101, 106, 137, 119, 138, 107, 128, 127,
	129, 0, 0, 0, 151, 167, 179, 0, 0, 173,
	174, 175, 176, 0, 0, 0, 130, 92, 108, 148,
	120, 111, 118, 142, 178, 134, 146, 95, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 84, 0, 115,
	177, 141, 102, 168, 100, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 116, 0, 0, 150, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	194, 192, 193, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 197, 0, 0, 0, 0,
	139, 0, 0, 153, 105, 104, 113, 0, 0, 0,
	96, 0, 145, 135, 165, 0, 136, 144, 117, 157,
	140, 164, 198, 172, 155, 171, 85, 154, 163, 94,
	147, 0, 0, 0, 87, 161, 152, 124, 109, 110,
	86, 0, 143, 99, 103, 98, 132, 158, 159, 97,
	90, 170, 89, 91, 169, 131, 156, 162, 125, 122,
	88, 160, 123, 121, 112, 101, 106, 137, 119, 138,
	107, 128, 127, 129, 0, 0, 0, 151, 167, 179,
	0, 0, 173, 174, 175, 176, 0, 0, 0, 130,
	92, 108, 148, 120, 111, 118, 142, 178, 134, 146,
	95, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	84, 0, 115, 177, 141, 102, 168, 100, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 116, 0, 0,
	150, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 511, 512, 513, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 139, 0, 0, 153, 105, 104, 113,
	0, 0, 0, 96, 0, 145, 135, 165, 0, 136,
	144, 117, 157, 140, 164, 198, 172, 155, 171, 85,
	154, 163, 94, 147, 0, 0, 0, 87, 161, 152,
	124, 109, 110, 86, 0, 143, 99, 103, 98, 132,
	158, 159, 97, 90, 170, 89, 91, 169, 131, 156,
	162, 125, 122, 88, 160, 123, 121, 112, 101, 106,
	137, 119, 138, 107, 128, 127, 129, 0, 0, 0,
	151, 167, 179, 0, 0, 173, 174, 175, 176, 0,
	0, 0, 130, 92, 108, 148, 120, 111, 118, 142,
	178, 134, 146, 95, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 84, 0, 115, 177, 141, 102, 168,
	100, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	116, 0, 0, 150, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 194, 772, 193, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 139, 0, 0, 153,
	105, 104, 113, 0, 0, 0, 96, 0, 145, 135,
	165, 0, 136, 144, 117, 157, 140, 164, 198, 172,
	155, 171, 85, 154, 163, 94, 147, 0, 0, 0,
	87, 161, 152, 124, 109, 110, 86, 0, 143, 99,
	103, 98, 132, 158, 159, 97, 90, 170, 89, 91,
	169, 131, 156, 162, 125, 122, 88, 160, 123, 121,
	112, 101, 106, 137, 119, 138, 107, 128, 127, 129,
	0, 0, 0, 151, 167, 179, 0, 0, 173, 174,
	175, 176, 0, 0, 0, 130, 92, 108, 148, 120,
	111, 118, 142, 178, 134, 146, 95, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 84, 0, 115, 177,
	141, 102, 168, 100, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 116, 0, 0, 150, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 194,
	192, 193, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 139,
	0, 0, 153, 105, 104, 113, 0, 0, 0, 96,
	0, 145, 135, 165, 0, 136, 144, 117, 157, 140,
	164, 198, 172, 155, 171, 85, 154, 163, 94, 147,
	0, 0, 0, 87, 161, 152, 124, 109, 110, 86,
	0, 143, 99, 103, 98, 132, 158, 159, 97, 90,
	170, 89, 91, 169, 131, 156, 162, 125, 122, 88,
	160, 123, 121, 112, 101, 106, 137, 119, 138, 107,
	128, 127, 129, 0, 0, 0, 151, 167, 179, 0,
	0, 173, 174, 175, 176, 0, 0, 0, 130, 92,
	108, 148, 120, 111, 118, 142, 178, 134, 146, 95,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 84,
	0, 115, 177, 141, 102, 168, 100, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 116, 0, 0, 150,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 81, 0, 755, 0, 0, 756, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 139, 0, 0, 153, 105, 104, 113, 0,
	0, 0, 96, 0, 145, 135, 165, 0, 136, 144,
	117, 157, 140, 164, 198, 172, 155, 171, 85, 154,
	163, 94, 147, 0, 0, 0, 87, 161, 152, 124,
	109, 110, 86, 0, 143, 99, 103, 98, 132, 158,
	159, 97, 90, 170, 89, 91, 169, 131, 156, 162,
	125, 122, 88, 160, 123, 121, 112, 101, 106, 137,
	119, 138, 107, 128, 127, 129, 0, 0, 0, 151,
	167, 179, 0, 0, 173, 174, 175, 176, 0, 0,
	0, 130, 92, 108, 148, 120, 111, 118, 142, 178,
	134, 146, 95, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 84, 0, 115, 177, 141, 102, 168, 100,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 116,
	0, 0, 150, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 139, 0, 0, 153, 105,
	104, 113, 0, 0, 0, 96, 0, 145, 135, 165,
	0, 136, 144, 117, 157, 140, 164, 198, 172, 155,
	171, 85, 154, 163, 94, 147, 0, 0, 0, 87,
	161, 152, 124, 109, 110, 86, 0, 143, 99, 103,
	98, 132, 158, 159, 97, 90, 170, 89, 91, 169,
	131, 156, 162, 125, 122, 88, 160, 123, 121, 112,
	101, 106, 137, 119, 138, 107, 128, 127, 129, 0,
	0, 0, 151, 167, 179, 0, 0, 173, 174, 175,
	176, 0, 0, 0, 130, 92, 108, 148, 120, 111,
	118, 142, 178, 134, 146, 95, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 115, 177, 141,
	102, 168,
}

var yyPact = [...]int{
	1752, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 873, 896, -1000, -1000, -1000, -1000,
	-1000, -1000, 674, 7911, 61, 100, -41, 10207, 99, 183,
	10966, -1000, -29, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-35, 10966, 443, 554, -1000, -1000, -1000, -1000, -1000, 866,
	871, 687, 859, 730, -1000, 5848, 63, 8932, 9954, 4800,
	-1000, 441, 95, 10966, -175, 11472, 52, 52, 52, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	98, 10966, -1000, 10966, 51, 438, 51, 51, 51, 10966,
	-1000, 140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10966,
	430, 829, 79, 3700, 3700, 3700, 3700, 4, 0, 3700,
	-135, -108, 705, -1000, -1000, -1000, -1000, 3700, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10966,
	632, 683, 449, 827, 6637, 6637, 873, -1000, 554, -1000,
	-1000, -1000, 822, -1000, -1000, 305, 883, -1000, 7658, 132,
	-1000, 6637, 1414, 609, -1000, -1000, -1000, -1000, 609, 110,
	272, -1000, -1000, -1000, 7143, 7143, 7143, 7143, 7143, 7143,
	-1000, -1000, -1000, -1000, -1000, -1000, 609, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6375,
	7396, 609, 609, 609, 609, 609, 609, 609, 609, 6637,
	609, 609, 609, 609, 609, 609, 609, 609, 609, 609,
	609, 609, 609, 9701, 610, 770, -1000, -1000, -1000, 852,
	8417, 9447, 10966, 625, -1000, 604, 602, 4525, -30, -132,
	-1000, 70, -1000, -1000, -1000, 226, 9185, -1000, -1000, 826,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 581, -1000, 1836, 423, 3700, 69, 611,
	419, 235, 418, 10966, 10966, 3700, 65, 10966, 849, 704,
	10966, 416, 409, -1000, 3425, -1000, 3700, 3700, 3700, 3700,
	3700, 3700, 3700, 3700, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3700, 3700, 3700, 3700, -1000, -137, -110, -1000, 10966,
	-1000, -1000, 120, 120, 1836, 10966, -1000, -1000, -1000, 889,
	167, 271, 131, 606, -1000, 372, 866, 449, 730, 11219,
	696, -1000, -1000, 10966, -1000, 6637, 6637, 333, -1000, 10460,
	-1000, -1000, -1000, -1000, -1000, 2875, 172, 7143, 412, 274,
	7143, 7143, 7143, 7143, 7143, 7143, 7143, 7143, 7143, 7143,
	7143, 7143, 7143, 7143, 7143, 494, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 407, -1000, 554, 2113, 2113, 288,
	-1000, 151, -1000, 151, 151, 151, 151, 151, 5062, 449,
	572, 367, 6375, -1000, 1995, 5848, 5848, 6637, 6637, 10713,
	10713, 5848, 854, 187, 367, 10713, -1000, 449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5848, 5848, 5848, 5848, 150,
	10966, -1000, 10713, 8932, 8932, 8932, 8932, 8932, -1000, 722,
	720, -1000, 718, 716, 755, 10966, -1000, 570, 8417, 168,
	609, -1000, 10966, -1000, 31, 559, 8932, 10966, -1000, -1000,
	4525, 7143, 604, 602, -132, 576, -1000, -140, -128, 7143,
	6110, 147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2600,
	389, 280, -89, -1000, -1000, -1000, -1000, 628, -1000, 628,
	628, 628, 628, -59, -59, -59, -59, -1000, -1000, -1000,
	-1000, -1000, 673, 664, -1000, 628, 628, 628, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 662, 662, 662, 636, 636,
	677, -1000, 10966, -194, 396, 3700, 848, 3700, -1000, 311,
	-1000, 10966, -1000, -1000, 10966, 3700, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 275, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 568, -1000, 595,
	-1000, -1000, 760, 6637, 6637, 3150, 6637, -1000, 801, 773,
	827, -1000, 854, 870, -1000, 809, 808, 5848, -1000, -1000,
	172, 245, -1000, -1000, 368, -1000, -1000, -1000, -1000, 128,
	609, -1000, -1000, 1974, -1000, -1000, -1000, -1000, 412, 7143,
	7143, 7143, 68, 1974, 2011, 1484, 1868, 151, 145, 145,
	149, 149, 149, 149, 149, 661, 661, -1000, -1000, -1000,
	449, 272, -1000, -1000, 272, -1000, 449, 5848, 593, -1000,
	-1000, 6637, -1000, 449, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 563, 563, 326, 315, 644,
	-1000, 127, 633, 563, 5848, 243, -1000, 6637, 449, -1000,
	563, 449, 563, 563, 698, 783, 609, -1000, 544, -1000,
	217, 770, 654, 697, 875, -1000, -1000, -1000, -1000, 719,
	-1000, 708, -1000, -1000, -1000, -1000, -1000, 91, 90, 89,
	11472, -1000, 880, 8932, 526, -1000, -1000, 1974, 576, -132,
	-139, -1000, -1000, 1974, -1000, 367, -1000, 504, 536, 2321,
	-1000, -1000, -1000, -1000, -1000, -1000, 651, 839, 198, 206,
	388, -1000, -1000, 832, -1000, 263, -91, -1000, -1000, 371,
	-59, -59, -1000, -1000, 147, 824, 147, 147, 147, 485,
	485, -1000, -1000, -1000, -1000, 366, -1000, -1000, -1000, 360,
	-1000, 694, 11472, 3700, -1000, 4250, -1000, -1000, -1000, -1000,
	-1000, -1000, 695, 623, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 30, -1000, 3700, -1000,
	319, 10966, 10966, 1836, 851, 10966, 741, 367, 367, 124,
	-1000, 798, 776, -1000, 10966, -1000, -1000, -1000, -1000, 630,
	-1000, -1000, -1000, 3975, 5848, -1000, 68, 1974, 1777, -1000,
	7143, 7143, -1000, -1000, 563, 5848, 367, -1000, -1000, -1000,
	605, 494, 605, 7143, 7143, 3150, 7143, 7143, -186, 517,
	181, -1000, 6637, 253, -1000, -1000, -1000, -1000, -1000, 692,
	10713, 609, -1000, 8164, -1000, 11472, 873, 10713, 6637, 6637,
	-1000, -1000, 6637, 639, -1000, 6637, -1000, -1000, -1000, 609,
	609, 609, 542, -1000, 873, 526, -1000, -1000, -1000, -148,
	-154, -1000, -1000, -1000, 2600, -1000, 2600, 11472, -1000, 380,
	374, -1000, -1000, 663, 71, -1000, -1000, -1000, 464, 147,
	147, -1000, 223, -1000, -1000, -1000, 561, -1000, 550, 532,
	548, 10966, -1000, -1000, 524, -1000, 216, -1000, -1000, 11472,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11472, 10966, -1000, -1000, -1000, -1000, -1000, 11472,
	-1000, -1000, 485, 6637, -1000, -1000, -1000, 120, -1000, -1000,
	4250, -1000, -1000, -1000, -1000, -1000, 880, 8932, -1000, -1000,
	449, -1000, 7143, 1974, 1974, -1000, -1000, 449, 628, 628,
	-1000, 628, 636, -1000, 628, -43, 628, -44, 609, 449,
	449, 1821, 1852, -1000, 1691, 1534, 609, -183, -1000, 367,
	6637, -207, 841, 486, 495, -1000, -1000, 5586, 449, 546,
	114, 542, 866, -1000, 367, 367, 367, 11472, 367, 11472,
	11472, 11472, 8679, 11472, 866, -1000, -1000, -1000, -1000, 2321,
	-1000, 534, -1000, 628, -1000, -1000, -83, 887, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -59,
	485, -59, 357, -1000, 346, 3700, 4250, 2600, -1000, 615,
	-1000, -1000, -1000, -1000, 843, -1000, 367, -1000, 877, 521,
	-1000, 1974, -1000, -1000, 109, -1000, -1000, -1000, -1000, -1000,
	-1000, 345, -1000, -1000, -1000, 7143, 7143, -1000, 7143, 7143,
	7143, 449, 485, 367, -1000, 5324, 837, -1000, 609, -1000,
	-1000, 675, 10460, 10460, -1000, -1000, 530, -1000, 508, 508,
	508, 168, -1000, -1000, 157, 11472, -1000, 180, -1000, -165,
	147, -1000, 147, 460, 458, -1000, -1000, -1000, 11472, 609,
	872, 869, -1000, -1000, 449, 1665, 1665, 1665, 1665, 38,
	-1000, -1000, -1000, 489, 886, -1000, 609, -1000, 554, 113,
	-1000, 11472, -1000, -1000, -1000, -1000, -1000, 157, -1000, 339,
	215, 485, -1000, 296, 835, -1000, 834, -1000, -1000, -1000,
	-1000, -1000, 477, 1, -1000, 6637, 6637, -1000, -1000, -1000,
	-1000, -1000, 449, 46, -197, 10713, 495, 449, 10460, -1000,
	-1000, -1000, 312, -1000, -1000, -1000, 485, -1000, -1000, 611,
	472, -1000, 11472, 367, 489, -1000, 733, -191, -203, 470,
	-1000, -1000, -1000, -1000, -194, -1000, 1, 759, -1000, 728,
	-1000, -1000, -1000, -16, -195, -19, -201, 609, -204, 6890,
	-1000, 1665, 449, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1136, 23, 21, 1135, 1134, 1133, 909, 907, 903,
	1131, 1130, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120,
	1117, 1111, 1110, 1109, 1108, 1106, 1105, 144, 1104, 1103,
	1102, 61, 1101, 63, 1096, 1095, 32, 133, 35, 36,
	450, 1093, 18, 59, 79, 1092, 41, 1091, 1088, 71,
	1086, 57, 1084, 1082, 40, 1080, 1079, 17, 33, 1078,
	1076, 1075, 1074, 64, 1148, 1073, 1069, 1068, 1063, 1061,
	1060, 52, 5, 10, 14, 13, 1059, 118, 9, 1058,
	47, 1056, 1055, 1049, 1043, 28, 1039, 50, 1035, 22,
	45, 1033, 12, 55, 30, 26, 6, 70, 53, 67,
	1031, 29, 58, 38, 1028, 1026, 387, 1022, 1021, 1016,
	1015, 1014, 1012, 154, 415, 1011, 1010, 1009, 1008, 37,
	51, 366, 361, 65, 1007, 1005, 7, 1004, 1264, 66,
	60, 15, 1003, 46, 761, 42, 1000, 999, 996, 993,
	31, 992, 43, 989, 986, 985, 984, 983, 981, 980,
	447, 974, 972, 965, 69, 48, 964, 963, 49, 20,
	962, 961, 960, 39, 56, 958, 44, 955, 952, 950,
	949, 25, 27, 948, 11, 946, 8, 945, 943, 2,
	940, 19, 939, 3, 938, 4, 34, 934, 933, 16,
	931, 924, 140, 915, 914, 913, 912, 0, 339, 911,
	905, 98,
}

var yyR1 = [...]int{
	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 199, 199, 49, 49, 93, 93, 10,
	10, 10, 10, 10, 10, 98, 98, 103, 103, 103,
	104, 104, 104, 104, 138, 138, 136, 136, 11, 11,
	11, 11, 11, 11, 11, 185, 185, 184, 183, 183,
	182, 182, 181, 16, 168, 169, 169, 169, 164, 141,
	141, 142, 142, 142, 142, 142, 149, 145, 145, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 148, 148, 148, 163,
	163, 150, 150, 158, 158, 159, 159, 159, 156, 156,
	157, 157, 160, 160, 160, 151, 151, 151, 151, 151,
	151, 151, 153, 153, 161, 161, 154, 154, 154, 155,
	155, 155, 162, 162, 162, 162, 162, 152, 152, 165,
	165, 177, 177, 176, 176, 176, 167, 167, 173, 173,
	173, 173, 173, 166, 166, 175, 175, 174, 170, 170,
	170, 171, 171, 171, 172, 172, 172, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 180, 178, 178,
	179, 179, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 111, 111, 108,
	108, 109, 109, 110, 110, 110, 112, 112, 112, 139,
	139, 137, 137, 137, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 24, 25, 25, 25, 189,
	189, 189, 189, 189, 189, 26, 26, 190, 190, 200,
	27, 28, 28, 29, 29, 29, 33, 33, 33, 31,
	31, 32, 32, 38, 38, 37, 37, 39, 39, 39,
	39, 124, 124, 124, 126, 126, 126, 126, 123, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 56, 56,
	92, 92, 94, 94, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 132, 132, 131, 131, 131, 130,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	40, 40, 40, 40, 40, 40, 40, 107, 107, 60,
	60, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 70, 70, 70, 70, 70, 70, 61, 61, 61,
	61, 61, 61, 61, 36, 36, 71, 71, 71, 77,
	72, 72, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 194, 193, 68, 68, 68, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 67, 67, 67, 67, 67, 67,
	67, 67, 201, 201, 69, 69, 69, 69, 34, 34,
	34, 34, 34, 135, 135, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 81,
	81, 35, 35, 79, 79, 80, 82, 82, 78, 78,
	78, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 187, 187, 65, 65, 65, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 88, 88,
	88, 88, 88, 88, 88, 89, 89, 89, 89, 90,
	90, 90, 62, 62, 62, 62, 62, 62, 91, 91,
	91, 91, 95, 95, 73, 73, 75, 75, 74, 76,
	188, 188, 188, 96, 96, 101, 97, 97, 99, 99,
	102, 102, 102, 100, 100, 100, 127, 127, 127, 105,
	105, 113, 113, 114, 114, 106, 106, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	117, 117, 118, 118, 118, 125, 125, 121, 121, 121,
	122, 122, 128, 128, 128, 128, 128, 129, 129, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 192,
	192, 192, 197, 198, 133, 134, 134, 134,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	3, 4, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 1,
	3, 3, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 4, 6, 4, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 1,
	1, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 4, 4, 7, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 3, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 4, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 3, 3, 3, 3, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	0, 2, 2, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 139, 140, 142, 141, 167, 143, 160,
	52, 179, 180, 182, 183, 25, 161, 162, 165, 166,
	184, 185, 186, -197, 8, 265, 56, -196, 281, -85,
	15, -29, 5, -27, -200, -27, -27, -27, -27, -27,
	-168, 56, -118, 148, 98, 175, 257, 145, 146, 152,
	-121, 64, 60, -120, 273, 179, 193, 187, 213, 205,
	203, 206, 243, 71, 182, 253, 163, 202, 198, 196,
	27, 218, 278, 197, 158, 157, 219, 223, 244, 191,
	192, 247, 217, 159, 32, 275, 37, 171, 248, 221,
	246, 216, 212, 215, 190, 211, 41, 225, 224, 226,
	242, 208, 199, 18, 251, 166, 169, 220, 222, 153,
	173, 277, 249, 195, 170, 165, 252, 183, 245, 255,
	40, 230, 189, 156, 180, 177, 209, 172, 200, 201,
	214, 188, 210, 181, 174, 167, 254, 231, 279, 207,
	204, 178, 176, 235, 236, 237, 238, 276, 250, 232,
	-106, 148, 150, 146, 146, 147, 148, 257, 145, 146,
	-54, -128, 64, 65, 63, 60, -120, 148, 175, 146,
	134, 206, 139, 233, 147, 32, 173, -137, -139, 146,
	181, -108, 176, 235, 236, 237, 238, 60, 245, 244,
	246, 239, -128, 181, -133, -133, -133, -133, -133, 185,
	-128, 60, -2, -89, 17, 16, -5, -3, -197, 6,
	20, 21, -33, 42, 43, -28, -39, 125, -40, -128,
	-59, 100, -64, 29, 64, 63, 60, -120, 23, -78,
	-63, -60, -76, -77, 134, 135, 123, 124, 131, 101,
	-193, -194, -68, -66, -67, -69, -121, 62, 72, 66,
	67, 68, 69, 75, 61, 73, 76, 77, -74, -197,
	59, 46, 47, 266, 267, 268, 269, 272, 270, 103,
	36, 256, 264, 263, 262, 260, 261, 258, 259, 151,
	257, 129, 265, -106, -42, -43, -44, -45, -56, -77,
	-197, -54, 11, -49, -54, -97, -99, -138, -136, 181,
	-102, -121, 246, 245, 244, -122, -100, -119, 243, 206,
	242, 144, 99, 22, 24, 228, 102, 134, 16, 103,
	133, 266, 139, 50, 258, 259, 256, 268, 269, 257,
	233, 29, 10, 25, 161, 21, 127, 141, 106, 107,
	164, 23, 162, 77, 19, 53, 11, 13, 14, 151,
	150, 118, 147, 48, 8, 59, 26, 115, 44, 28,
	46, 116, 17, 260, 261, 31, 272, 168, 129, 51,
	38, 100, 75, 54, 98, 15, 49, 117, 142, 265,
	47, 145, 6, 271, 30, 160, 45, 146, 234, 105,
	149, 76, 5, 152, 9, 52, 55, 262, 263, 264,
	36, 104, 12, -169, -164, 60, 147, -54, 265, -121,
	-114, 151, -114, -114, 146, -54, -54, -113, 151, 60,
	-113, -113, -113, -54, 136, -54, 60, 30, 257, 60,
	173, 146, 174, 148, -134, -197, -122, -121, -134, -134,
	-134, 177, 178, 177, 178, -134, 247, -109, 240, 54,
	-134, -128, 11, 22, -197, 55, -198, 58, -90, 19,
	31, -40, -128, -86, -87, -40, -85, -2, -27, 38,
	-31, 21, 70, 11, -124, 99, 98, 115, -123, 22,
	-126, 63, 64, 65, -121, 136, -40, -61, 118, 100,
	116, 117, 102, 120, 119, 130, 123, 124, 125, 126,
	127, 128, 129, 121, 122, 133, 108, 109, 110, 111,
	112, 113, 114, -107, -197, -77, -197, 137, 138, -187,
	74, -64, 29, -64, -64, -64, -64, -64, -197, -2,
	-72, -40, -197, 63, -64, -197, -197, -197, -197, -197,
	-197, -197, -197, -81, -40, -197, -201, -197, -201, -201,
	-201, -201, -201, -201, -201, -197, -197, -197, -197, -55,
	26, -54, 30, 57, -50, -52, -51, -53, 44, 48,
	50, 45, 46, 47, 51, -132, 22, -42, -197, -131,
	169, -130, 22, -128, -54, -49, -199, 57, 11, 55,
	57, 57, -97, -99, 181, -98, -103, 247, 249, 149,
	108, -127, -121, -192, 29, 64, 63, 65, 30, 58,
	57, -142, -145, -147, -146, -148, -149, -143, -144, 203,
	204, 134, 207, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 30, 163, 200, 201, 202, 97, 219,
	220, 221, 222, 223, 224, 225, 226, 205, 187, 188,
	189, 190, 191, 192, 193, 195, 196, 197, 198, 199,
	60, -134, 148, -185, 55, 60, 100, 60, -54, -54,
	-134, 149, -54, 23, 54, -54, 60, 60, -129, -128,
	-119, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, 248, -111, 234, 241, -54, -189, -3,
	-7, -9, -8, 60, -192, 64, -189, -141, -142, -190,
	-128, 9, 118, 57, 18, 136, 57, -88, 24, 25,
	-89, -198, -33, -65, -121, 66, 69, -32, 45, -54,
	-40, -40, -70, 75, 100, 76, 77, -123, 125, -129,
	-122, -119, 64, -64, -71, -74, -77, 74, 118, 116,
	117, 102, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -135, 60, -192,
	60, -63, 63, 64, -63, 74, -38, 21, -37, -39,
	-198, 57, -198, -2, -191, 78, 79, 80, 81, 82,
	83, 84, 85, 97, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, -37, -37, -40, -40, -78,
	-121, -128, -78, -37, -31, -79, -80, 104, -78, -198,
	-37, -38, -37, -37, -93, 29, 169, -54, -96, -101,
	-78, -43, -44, -44, -43, -44, 44, 44, 44, 49,
	44, 49, 44, -51, -128, -198, -57, 52, 150, 53,
	-197, -130, -93, 55, -42, -54, -102, -64, -98, 57,
	248, 250, 251, -64, 54, -40, -155, 133, -170, -171,
	-172, -122, -192, 66, -164, -165, -173, 153, 156, 152,
	-166, 147, 28, -160, 75, 100, -156, 231, -150, 56,
	-150, -150, -150, -150, -154, 206, -154, -154, -154, 56,
	56, -150, -150, -150, -158, 56, -158, -158, -159, 56,
	-159, -125, 55, -54, -183, 276, -184, 60, -134, 23,
	-134, -115, 144, 141, 142, -180, 140, 228, 206, 71,
	29, 15, 266, 169, 279, 60, 170, -54, -54, -134,
	-110, 11, 118, 57, -198, 57, 40, -40, -40, -129,
	-87, 33, 33, -90, -105, 19, 11, 36, 36, -37,
	75, 76, 77, 136, -197, -71, -64, -64, -64, -36,
	164, 99, -198, -198, -37, 57, -40, -198, -198, -198,
	57, 55, 22, 57, 11, 136, 57, 11, -198, -37,
	-82, -80, 106, -40, -198, -198, -198, -198, -198, -62,
	30, 36, -2, -197, 36, -197, -58, 57, 12, 108,
	-47, -46, 54, 55, -48, 54, -46, 44, 44, 147,
	147, 147, -94, -121, -58, -42, -58, -103, -104, 252,
	249, 255, 60, -192, 57, -172, 108, 56, 28, -166,
	-166, 60, 60, -151, 29, 75, -157, 232, 66, -154,
	-154, -155, 30, -155, -155, -155, -163, -192, -163, 66,
	66, 54, -121, -134, -182, -181, -122, -133, -186, 175,
	154, 155, 158, 157, 60, 147, 28, 153, 156, 169,
	152, -186, 175, -116, -117, 149, 22, 147, 28, 169,
	-134, -112, 116, 12, -128, -128, -142, 22, -128, 41,
	136, 34, 35, 34, 35, -54, -41, 11, 125, -122,
	-38, -36, 99, -64, -64, -198, -39, -140, 134, 203,
	163, 202, 198, 217, 208, 230, 200, 231, 204, -135,
	-140, -64, -64, -122, -64, -64, 273, -85, 107, -40,
	105, -95, 54, -96, -73, -75, -74, -197, -2, -91,
	-126, -94, -85, -101, -40, -40, -40, 56, -40, -197,
	-197, -197, -198, 57, -85, -58, 249, 253, 254, -171,
	-172, -175, -174, -121, 60, 60, -153, 54, -192, 66,
	67, 75, 256, 72, 58, -155, -155, 60, 134, 58,
	57, 58, 57, 58, 57, -54, 57, 108, -133, -121,
	-133, -121, -54, -133, -121, -192, -40, -189, -58, -42,
	-198, -64, -198, -150, -150, -150, -159, -150, 192, -150,
	192, -197, -198, -198, -198, 57, 19, -198, 57, 19,
	-197, -35, 271, -40, -188, 280, 27, -95, 57, -198,
	-198, -198, 57, 136, -198, -89, -92, -121, -92, -92,
	-92, -131, -121, -89, 58, 57, -150, -161, 228, 9,
	-154, -192, -154, 66, 66, -134, -181, -172, 56, 26,
	-83, 13, -154, 60, 66, -64, -64, -64, -64, -64,
	-198, -192, 125, -72, 28, -75, 36, -2, -197, -126,
	-126, 57, 58, -198, -198, -198, -57, -177, -176, 55,
	159, 71, -174, -162, 153, 28, 152, 256, -155, -155,
	58, 58, -92, -197, -84, 14, 16, -198, -198, -198,
	-198, -198, -34, 118, 276, 9, -73, -2, 136, -121,
	-176, 60, -167, 108, -192, -152, 71, 28, 28, 58,
	-178, -179, 169, -40, -72, -198, 274, 51, 277, -96,
	-198, -126, 66, -192, -185, -198, 57, -121, 41, 275,
	278, -183, -179, 36, 41, 171, 276, 172, 277, -197,
	278, -64, 168, -198, -198,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 553, 0, 309, 309, 309, 309,
	309, 309, 0, 632, 615, 0, 0, 0, 0, -2,
	285, 286, 0, 288, 289, 864, 864, 864, 864, 864,
	0, 0, 0, 0, 37, 38, 862, 1, 3, 565,
	0, 0, 313, 316, 311, 0, 615, 0, 0, 0,
	68, 0, 0, 849, 0, 850, 613, 613, 613, 633,
	634, 637, 638, 639, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 851, 852, 853, 854, 855, 856, 857, 858,
	0, 0, 616, 0, 611, 0, 611, 611, 611, 0,
	239, 382, 642, 643, 644, 645, 646, 849, 850, 0,
	0, 0, 0, 865, 865, 865, 865, 0, 0, 865,
	0, 271, 260, 262, 263, 264, 265, 865, 282, 283,
	280, 270, 284, 287, 290, 291, 292, 293, 294, 0,
	0, 305, 30, 569, 0, 0, 553, 32, 0, 309,
	314, 315, 319, 317, 318, 310, 0, 327, 331, 0,
	390, 0, 395, -2, -2, -2, -2, -2, 0, 432,
	433, 434, 435, 436, 0, 0, 0, 0, 0, 0,
	458, 459, 460, 461, 462, 463, 528, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 399, 400, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	0, 492, 492, 492, 492, 492, 492, 492, 492, 0,
	0, 0, 0, 0, 0, 341, 343, 344, 345, 364,
	0, 366, 0, 0, 45, 49, 50, 0, 64, 840,
	596, 640, -2, -2, -2, 0, 0, 641, -2, 768,
	-2, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 0, 85, 0, 0, 865, 0, 75,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 238, 0, 240, 865, 865, 865, 865,
	865, 865, 865, 865, 249, 866, 867, 640, 250, 251,
	252, 865, 865, 865, 865, 255, 0, 0, 272, 0,
	266, 295, 0, 0, 0, 0, 31, 863, 25, 0,
	0, 566, 0, 554, 555, 558, 565, 30, 316, 0,
	321, 320, 312, 0, 328, 0, 0, 0, 332, 0,
	338, 334, 335, 336, 337, 0, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 417, 418, 419, 420,
	421, 422, 423, 396, 0, 410, 0, 0, 0, 542,
	544, 452, 543, 453, 454, 455, 456, 457, 323, 30,
	0, 430, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 520, 0, 484, 0, 485, 486,
	487, 488, 489, 490, 491, 0, 323, 0, 0, 47,
	0, 381, 0, 0, 0, 0, 0, 0, 370, 0,
	0, 373, 0, 0, 0, 0, 365, 0, 0, 384,
	813, 367, 0, 369, -2, 0, 0, 0, 43, 44,
	0, 0, 51, 52, 0, 54, 55, 0, 0, 0,
	0, 169, 606, 607, 608, 637, 859, 861, 604, 198,
	0, 152, 148, 92, 93, 94, 95, 141, 98, 141,
	141, 141, 141, 166, 166, 166, 166, 124, 125, 126,
	127, 128, 0, 0, 111, 141, 141, 141, 115, 131,
	132, 133, 134, 135, 136, 137, 138, 96, 99, 100,
	101, 102, 103, 104, 105, 143, 143, 143, 145, 145,
	635, 70, 0, 78, 0, 865, 0, 865, 83, 0,
	214, 0, 233, 612, 0, 865, 236, 237, 383, 647,
	648, 241, 242, 243, 244, 245, 246, 247, 248, 253,
	258, 254, 259, 256, 273, 267, 268, 261, 296, 299,
	300, 301, 302, 303, 304, 860, 297, 0, 89, 306,
	307, 570, 0, 0, 0, 0, 0, 557, 559, 560,
	569, 33, 319, 0, 546, 0, 0, 0, 322, 28,
	391, 392, 394, 411, 0, 413, 415, 333, 329, 0,
	529, -2, -2, 401, 402, 426, 427, 428, 0, 0,
	0, 0, 424, 406, 0, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 451, 503, 504,
	0, 449, 531, 532, 450, 545, 0, 0, 324, 325,
	429, 0, 588, 30, 465, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 0, 0, 0, 0, 0,
	528, 0, 0, 0, 0, 526, 523, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 380, 388, 593,
	0, 342, 360, 362, 0, 357, 371, 372, 374, 0,
	376, 0, 378, 379, 346, 347, 348, 0, 0, 0,
	0, 368, 388, 0, 388, 46, 597, 599, 53, 0,
	0, 58, 59, 598, 600, 601, 602, 0, 84, 199,
	201, 204, 205, 206, 86, 87, 0, 0, 0, 0,
	0, 193, 194, 155, 153, 0, 150, 149, 97, 0,
	166, 166, 118, 119, 169, 0, 169, 169, 169, 0,
	0, 112, 113, 114, 106, 0, 107, 108, 109, 0,
	110, 0, 0, 865, 72, 0, 76, 77, 73, 614,
	74, 864, 0, 0, 627, 215, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 0, 232, 865, 235,
	276, 0, 0, 0, 0, 0, 0, 567, 568, 0,
	556, 0, 0, 26, 0, 609, 610, 547, 548, 339,
	412, 414, 416, 0, 323, 403, 424, 407, 0, 404,
	0, 0, 398, 466, 0, 0, 431, -2, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 524, 0, 0, 483, 494, 495, 496, 497, 582,
	0, 0, -2, 0, 36, 0, 553, 0, 0, 0,
	354, 361, 0, 0, 355, 0, 356, 375, 377, 0,
	0, 0, 0, 352, 553, 388, 42, 56, 57, 0,
	0, 63, 170, 171, 0, 202, 0, 0, 188, 0,
	0, 191, 192, 162, 0, 154, 91, 151, 0, 169,
	169, 120, 0, 121, 122, 123, 0, 139, 0, 0,
	0, 0, 636, 71, 79, 80, 0, 207, 864, 0,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 864, 0, 0, 864, 628, 629, 630, 631, 0,
	234, 257, 0, 0, 274, 275, 90, 0, 308, 571,
	0, 563, 564, 561, 562, 27, 388, 0, 330, 530,
	0, 405, 0, 425, 408, 467, 326, 0, 141, 141,
	508, 141, 145, 511, 141, 513, 141, 516, 0, 0,
	0, 0, 0, 529, 0, 0, 0, 521, 482, 527,
	0, 590, 0, 582, 572, 584, 586, 0, 30, 0,
	578, 0, 565, 594, 389, 595, 358, 0, 363, 0,
	0, 0, 366, 0, 565, 41, 60, 61, 62, 200,
	203, 0, 195, 141, 189, 190, 164, 0, 156, 157,
	158, 159, 160, 161, 142, 116, 117, 167, 168, 166,
	0, 166, 0, 146, 0, 865, 0, 0, 208, 0,
	209, 211, 212, 213, 0, 277, 278, 298, 549, 340,
	468, 409, 471, 505, 166, 509, 510, 512, 514, 515,
	517, 0, 473, 472, 474, 0, 0, 477, 0, 0,
	0, 0, 0, 525, 34, 0, 0, 35, 0, 587,
	-2, 0, 0, 0, 48, 39, 0, 350, 0, 0,
	0, 384, 353, 40, 180, 0, 197, 172, 165, 0,
	169, 140, 169, 0, 0, 69, 81, 82, 0, 0,
	551, 0, 506, 507, 0, 0, 0, 0, 0, 498,
	481, 522, 591, 592, 0, 585, 0, -2, 0, 580,
	579, 0, 359, 385, 386, 387, 349, 179, 181, 0,
	186, 0, 196, 177, 0, 174, 176, 163, 129, 130,
	144, 147, 0, 0, 29, 0, 0, 518, 475, 476,
	478, 479, 0, 0, 0, 0, 575, 30, 0, 351,
	182, 183, 0, 187, 185, 88, 0, 173, 175, 75,
	0, 228, 0, 552, 550, 480, 0, 0, 0, 583,
	-2, 581, 184, 178, 78, 227, 0, 0, 499, 0,
	502, 210, 229, 0, 500, 0, 0, 0, 0, 0,
	501, 0, 0, 230, 231,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 101, 3, 3, 3, 128, 120, 3,
	56, 58, 125, 123, 57, 124, 136, 126, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 281,
	109, 108, 110, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 130, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 131,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 102, 103, 104, 105,
	106, 107, 111, 112, 113, 114, 115, 116, 117, 118,
	121, 122, 127, 129, 132, 133, 134, 135, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = LocalStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:589
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:634
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:691
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:955
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1281
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1324
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1330
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1334
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1354
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1359
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = "extended "
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = "full "
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.showFilter = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = LocalStr
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1718
		{
			setAllowComments(yylex, true)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.bytes2 = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = UnionStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = UnionAllStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = UnionDistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = SQLCacheStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = DistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = StraightJoinHint
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.selectExprs = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1895
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2069
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.str = BooleanModeStr
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2595
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = QueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = string("")
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2703
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2726
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &NullVal{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &Default{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2827
		{
			yyVAL.exprs = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.orderBy = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = AscScr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.str = DescScr
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.str = DescNullsFirstScr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.str = DescNullsLastScr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = AscNullsFirstScr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = AscNullsLastScr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2899
		{
			yyVAL.limit = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2907
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2911
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2916
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = ForUpdateStr
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = ShareModeStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2950
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2954
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2958
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2969
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2973
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2977
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2982
		{
			yyVAL.updateExprs = nil
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2986
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3027
		{
			yyVAL.returning = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3037
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, &SetExpr{Name: yyDollar[1].setExprs[0].Name, Expr: yyDollar[3].expr})
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.bytes = []byte("charset")
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.expr = &Default{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3119
		{
			yyVAL.byt = 0
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.byt = 1
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3126
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3129
		{
			yyVAL.str = ""
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.str = IgnoreStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3176
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			if yylex.(*Tokenizer).IsMySQL() && !yylex.(*Tokenizer).dialect.(*mysql.MySQLDialect).IsModeANSIOn() {
				yylex.Error("MySQL dialect configured ANSI_mode=off and doesn't allow double quoted table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL dialect doesn't allow to use backtick quotes for table identifiers")
				return 1
			}
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3480
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3489
		{
			decNesting(yylex)
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3494
		{
			forceEOF(yylex)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3499
		{
			forceEOF(yylex)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			forceEOF(yylex)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
