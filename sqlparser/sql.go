// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	columnTypes        []ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
	intervalExpr       *IntervalExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const INTERVAL = 57395
const ID = 57396
const PG_ESCAPE_STRING = 57397
const HEX = 57398
const SINGLE_QUOTE_STRING = 57399
const DOUBLE_QUOTE_STRING = 57400
const BACK_QUOTE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const DOLLAR_SIGN = 57409
const LIST_ARG = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const MICROSECOND = 57414
const SECOND = 57415
const MINUTE = 57416
const HOUR = 57417
const DAY = 57418
const WEEK = 57419
const MONTH = 57420
const QUARTER = 57421
const SECOND_MICROSECOND = 57422
const MINUTE_MICROSECOND = 57423
const MINUTE_SECOND = 57424
const HOUR_MICROSECOND = 57425
const HOUR_SECOND = 57426
const HOUR_MINUTE = 57427
const DAY_MICROSECOND = 57428
const DAY_SECOND = 57429
const DAY_MINUTE = 57430
const DAY_HOUR = 57431
const YEAR_MONTH = 57432
const YEAR = 57433
const OR = 57434
const AND = 57435
const NOT = 57436
const BETWEEN = 57437
const CASE = 57438
const WHEN = 57439
const THEN = 57440
const ELSE = 57441
const END = 57442
const LE = 57443
const GE = 57444
const NE = 57445
const NULL_SAFE_EQUAL = 57446
const IS = 57447
const LIKE = 57448
const REGEXP = 57449
const IN = 57450
const SHIFT_LEFT = 57451
const SHIFT_RIGHT = 57452
const DIV = 57453
const MOD = 57454
const UNARY = 57455
const COLLATE = 57456
const BINARY = 57457
const UNDERSCORE_BINARY = 57458
const JSON_EXTRACT_OP = 57459
const JSON_UNQUOTE_EXTRACT_OP = 57460
const CREATE = 57461
const ALTER = 57462
const DROP = 57463
const RENAME = 57464
const ANALYZE = 57465
const ADD = 57466
const SCHEMA = 57467
const TABLE = 57468
const INDEX = 57469
const VIEW = 57470
const TO = 57471
const IGNORE = 57472
const IF = 57473
const UNIQUE = 57474
const PRIMARY = 57475
const COLUMN = 57476
const CONSTRAINT = 57477
const SPATIAL = 57478
const FULLTEXT = 57479
const FOREIGN = 57480
const KEY_BLOCK_SIZE = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const DEALLOCATE = 57506
const PREPARE = 57507
const EXECUTE = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_KEYSPACES = 57557
const VITESS_SHARDS = 57558
const VITESS_TABLETS = 57559
const VSCHEMA_TABLES = 57560
const EXTENDED = 57561
const FULL = 57562
const PROCESSLIST = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const ISOLATION = 57568
const LEVEL = 57569
const READ = 57570
const WRITE = 57571
const ONLY = 57572
const REPEATABLE = 57573
const COMMITTED = 57574
const UNCOMMITTED = 57575
const SERIALIZABLE = 57576
const CURRENT_TIMESTAMP = 57577
const DATABASE = 57578
const CURRENT_DATE = 57579
const DATE_ADD = 57580
const ADDDATE = 57581
const SUBDATE = 57582
const DATE_SUB = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const RETURNING = 57605

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"INTERVAL",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"SINGLE_QUOTE_STRING",
	"DOUBLE_QUOTE_STRING",
	"BACK_QUOTE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"DOLLAR_SIGN",
	"LIST_ARG",
	"NULL",
	"TRUE",
	"FALSE",
	"MICROSECOND",
	"SECOND",
	"MINUTE",
	"HOUR",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"YEAR",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"DATE_ADD",
	"ADDDATE",
	"SUBDATE",
	"DATE_SUB",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	174, 273,
	175, 273,
	-2, 263,
	-1, 247,
	133, 629,
	-2, 625,
	-1, 248,
	133, 630,
	-2, 626,
	-1, 322,
	105, 808,
	-2, 62,
	-1, 323,
	105, 769,
	-2, 63,
	-1, 328,
	105, 753,
	-2, 591,
	-1, 330,
	105, 790,
	-2, 593,
	-1, 549,
	71, 526,
	-2, 459,
	-1, 603,
	52, 45,
	54, 45,
	-2, 47,
	-1, 754,
	133, 632,
	-2, 628,
	-1, 983,
	5, 31,
	-2, 424,
	-1, 1008,
	5, 30,
	-2, 563,
	-1, 1242,
	5, 31,
	-2, 564,
	-1, 1289,
	5, 30,
	-2, 566,
	-1, 1352,
	5, 31,
	-2, 567,
}

const yyPrivate = 57344

const yyLast = 12210

var yyAct = [...]int{

	282, 53, 1343, 922, 679, 838, 250, 546, 1300, 545,
	3, 1174, 497, 1146, 856, 1248, 226, 880, 1147, 595,
	878, 1143, 1071, 916, 593, 281, 1012, 839, 24, 217,
	874, 1028, 902, 712, 877, 1119, 59, 779, 975, 327,
	627, 789, 1074, 826, 786, 1017, 475, 1062, 613, 756,
	912, 888, 424, 481, 53, 612, 834, 597, 321, 309,
	487, 957, 231, 225, 308, 251, 582, 316, 313, 495,
	235, 318, 58, 1237, 1372, 1362, 218, 219, 220, 221,
	1370, 1350, 1368, 923, 1361, 1349, 1138, 1234, 428, 1309,
	230, 614, 307, 615, 232, 1168, 54, 29, 30, 186,
	182, 183, 184, 562, 1169, 1170, 869, 239, 1325, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 870, 871, 522, 707, 454, 621, 622, 623, 1181,
	1182, 1036, 463, 788, 1035, 1185, 709, 1037, 1183, 63,
	449, 465, 1053, 710, 895, 717, 1260, 473, 621, 622,
	623, 903, 1222, 1220, 437, 222, 216, 460, 461, 1369,
	1367, 1275, 1344, 1095, 836, 1120, 438, 65, 66, 67,
	68, 69, 835, 1301, 431, 248, 511, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 180, 1303,
	522, 1307, 687, 179, 1122, 180, 678, 1092, 1027, 455,
	455, 455, 455, 1094, 455, 1026, 890, 890, 1025, 82,
	185, 426, 455, 191, 434, 194, 191, 857, 859, 181,
	1330, 976, 1245, 1106, 471, 991, 451, 191, 453, 1124,
	969, 1128, 53, 1123, 1121, 1130, 1047, 534, 535, 1126,
	728, 484, 502, 191, 191, 82, 444, 531, 1125, 191,
	533, 82, 875, 450, 452, 515, 516, 517, 518, 519,
	512, 1127, 1129, 522, 890, 522, 483, 725, 544, 1326,
	1189, 512, 1099, 494, 522, 1335, 1199, 1302, 949, 1015,
	682, 616, 827, 548, 727, 551, 552, 553, 554, 555,
	556, 557, 558, 425, 561, 563, 563, 563, 563, 563,
	563, 563, 563, 571, 572, 573, 574, 903, 987, 836,
	986, 1348, 1308, 1306, 594, 858, 763, 430, 1184, 1093,
	726, 1091, 889, 889, 1140, 457, 458, 459, 56, 462,
	761, 762, 760, 493, 492, 892, 448, 467, 1338, 440,
	441, 442, 1082, 619, 1190, 1051, 759, 493, 492, 896,
	494, 493, 492, 55, 1142, 191, 1354, 191, 731, 732,
	893, 493, 492, 191, 494, 988, 537, 785, 494, 489,
	191, 1080, 485, 1098, 82, 82, 82, 82, 494, 82,
	889, 492, 950, 604, 1276, 887, 885, 82, 827, 886,
	998, 610, 1082, 178, 245, 432, 433, 494, 191, 564,
	565, 566, 567, 568, 569, 570, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 82, 1266, 522,
	1265, 1080, 966, 967, 968, 621, 622, 623, 455, 493,
	492, 746, 748, 749, 1066, 241, 455, 1065, 493, 492,
	456, 1054, 1333, 1177, 1176, 1048, 494, 455, 455, 455,
	455, 455, 455, 455, 455, 494, 747, 925, 1081, 474,
	306, 455, 455, 1086, 1083, 1076, 1077, 1084, 1079, 1078,
	782, 513, 514, 515, 516, 517, 518, 519, 512, 693,
	1085, 522, 191, 692, 696, 683, 1088, 718, 718, 191,
	191, 191, 681, 676, 446, 82, 439, 425, 713, 713,
	733, 82, 224, 1313, 719, 1312, 694, 1186, 1081, 60,
	324, 1013, 721, 1086, 1083, 1076, 1077, 1084, 1079, 1078,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	1085, 757, 522, 863, 53, 606, 1075, 1358, 474, 791,
	781, 780, 754, 578, 621, 622, 623, 1038, 981, 548,
	621, 622, 623, 677, 1293, 1341, 735, 1240, 793, 1293,
	474, 686, 819, 822, 752, 26, 750, 579, 828, 1293,
	1294, 579, 697, 698, 699, 700, 701, 702, 703, 704,
	313, 313, 313, 313, 313, 840, 705, 706, 1257, 1256,
	1165, 474, 1244, 474, 1198, 594, 1194, 860, 1196, 1195,
	783, 784, 1144, 82, 793, 1013, 313, 1192, 1193, 191,
	191, 82, 56, 191, 1192, 1191, 191, 831, 1040, 824,
	191, 868, 82, 82, 82, 82, 82, 82, 82, 82,
	864, 981, 734, 981, 474, 1014, 82, 82, 951, 474,
	842, 843, 191, 845, 841, 579, 474, 844, 191, 26,
	538, 539, 540, 541, 542, 543, 861, 853, 791, 474,
	862, 607, 82, 478, 482, 953, 191, 867, 866, 626,
	625, 1109, 82, 904, 905, 906, 1288, 579, 550, 882,
	503, 609, 455, 1014, 455, 815, 816, 729, 56, 1270,
	897, 823, 455, 790, 792, 26, 56, 917, 1159, 918,
	232, 993, 608, 990, 606, 830, 469, 832, 833, 1114,
	1043, 829, 1018, 1019, 981, 913, 908, 470, 547, 1006,
	907, 71, 1007, 914, 915, 1013, 1230, 474, 560, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 855, 56, 522, 992, 680, 989, 56, 56, 920,
	472, 1179, 191, 267, 970, 191, 191, 191, 191, 191,
	324, 1144, 1067, 1021, 690, 466, 741, 191, 754, 1024,
	191, 254, 850, 848, 191, 1023, 847, 851, 849, 846,
	959, 191, 191, 958, 1366, 82, 757, 80, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	954, 82, 522, 852, 1360, 588, 589, 926, 1105, 928,
	971, 236, 237, 277, 270, 268, 269, 947, 272, 273,
	274, 275, 488, 326, 271, 278, 1365, 276, 1010, 429,
	964, 963, 1058, 624, 1050, 1009, 486, 1011, 476, 312,
	447, 1340, 1339, 1286, 1008, 584, 587, 588, 589, 585,
	477, 586, 590, 1044, 191, 1018, 1019, 82, 1238, 82,
	927, 1271, 689, 191, 313, 1103, 191, 82, 952, 997,
	592, 233, 234, 488, 965, 584, 587, 588, 589, 585,
	227, 586, 590, 1318, 962, 228, 60, 1273, 1031, 1030,
	1022, 1032, 961, 1039, 1317, 1014, 490, 1327, 1041, 755,
	1261, 724, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 1033, 62, 715,
	7, 980, 455, 716, 6, 1063, 1063, 64, 743, 744,
	978, 1055, 1056, 1057, 979, 1059, 1060, 1061, 1045, 1046,
	605, 983, 57, 753, 714, 5, 1, 455, 262, 261,
	794, 722, 326, 326, 326, 326, 1064, 326, 995, 1073,
	1236, 536, 924, 984, 985, 326, 1070, 933, 1342, 1299,
	1173, 994, 884, 876, 1087, 423, 1000, 70, 1001, 1002,
	1003, 1004, 1334, 883, 547, 898, 899, 900, 901, 817,
	818, 1305, 1102, 1259, 891, 501, 1052, 894, 1178, 1337,
	1049, 909, 910, 911, 632, 781, 631, 629, 1149, 630,
	53, 1113, 1145, 840, 628, 1112, 634, 633, 720, 1150,
	840, 532, 1152, 1118, 1132, 1131, 1161, 1162, 1163, 202,
	319, 754, 1139, 1148, 591, 617, 82, 919, 491, 191,
	72, 1155, 1090, 1153, 1089, 929, 1097, 1069, 708, 1154,
	324, 948, 873, 82, 464, 205, 530, 960, 1167, 1034,
	325, 1151, 730, 1172, 480, 1316, 879, 1166, 1180, 1272,
	996, 559, 1096, 326, 825, 1171, 253, 745, 266, 618,
	263, 265, 264, 736, 1005, 312, 1187, 1188, 504, 252,
	243, 311, 575, 583, 581, 580, 82, 82, 1020, 82,
	1016, 310, 1108, 1233, 1200, 1324, 740, 28, 61, 238,
	313, 23, 22, 21, 19, 18, 1207, 1202, 17, 20,
	1205, 718, 82, 16, 15, 191, 191, 14, 1117, 191,
	32, 1223, 713, 13, 1211, 1210, 191, 1209, 12, 1232,
	11, 10, 9, 8, 4, 82, 229, 25, 1218, 2,
	0, 0, 0, 0, 0, 0, 972, 973, 974, 0,
	0, 0, 955, 956, 0, 482, 0, 1239, 0, 753,
	0, 1247, 0, 0, 0, 0, 1164, 1250, 1251, 1252,
	0, 326, 0, 1255, 1253, 82, 0, 82, 0, 326,
	0, 0, 1041, 0, 0, 0, 0, 0, 455, 0,
	326, 326, 326, 326, 326, 326, 326, 326, 977, 0,
	1263, 0, 0, 0, 326, 326, 82, 0, 82, 82,
	1269, 1268, 0, 0, 1262, 0, 1264, 982, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	737, 1149, 522, 191, 1290, 1285, 0, 0, 0, 1274,
	501, 82, 1283, 1289, 0, 0, 326, 1291, 1292, 1287,
	1212, 0, 0, 999, 82, 191, 1148, 1214, 1298, 1304,
	0, 82, 1315, 0, 0, 0, 0, 758, 0, 1224,
	1225, 1226, 82, 0, 1229, 191, 1314, 0, 0, 1149,
	0, 53, 0, 1310, 0, 1311, 0, 1241, 1242, 1243,
	1329, 1246, 1328, 0, 0, 0, 0, 0, 1332, 820,
	820, 0, 0, 0, 1148, 820, 0, 0, 879, 0,
	0, 1336, 0, 1267, 0, 0, 1346, 0, 0, 0,
	0, 0, 820, 1351, 840, 82, 0, 82, 82, 82,
	191, 82, 0, 1353, 0, 0, 1356, 82, 0, 0,
	0, 312, 312, 312, 312, 312, 1355, 0, 0, 0,
	1363, 1364, 0, 326, 1072, 0, 312, 0, 0, 0,
	1371, 1115, 1116, 82, 82, 82, 0, 312, 0, 326,
	0, 1282, 0, 0, 1133, 1134, 0, 1136, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	82, 82, 0, 0, 1319, 1320, 1321, 1322, 1323, 0,
	0, 0, 1135, 82, 1141, 326, 0, 326, 0, 0,
	0, 0, 0, 0, 939, 326, 82, 0, 0, 0,
	1156, 1157, 0, 0, 1158, 0, 188, 1160, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	1215, 1216, 1347, 1217, 0, 0, 1219, 1352, 1221, 0,
	0, 879, 326, 879, 0, 0, 943, 317, 479, 0,
	1357, 0, 427, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 1213,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	82, 1375, 1376, 0, 0, 1258, 189, 0, 0, 215,
	0, 0, 758, 0, 0, 1208, 0, 0, 0, 0,
	223, 0, 211, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 242, 0, 189, 189, 0, 0,
	0, 0, 189, 0, 0, 0, 934, 931, 932, 0,
	930, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	1227, 474, 0, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 944, 0, 435, 0,
	436, 0, 0, 0, 0, 0, 443, 0, 0, 0,
	0, 0, 879, 445, 1029, 0, 195, 0, 0, 0,
	0, 197, 1277, 1278, 0, 1279, 1280, 1281, 203, 199,
	0, 326, 936, 0, 0, 312, 0, 0, 0, 1072,
	879, 0, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 935, 201, 522, 0, 206, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 189, 0,
	189, 0, 0, 547, 1068, 326, 189, 326, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 468, 0, 0, 0, 198, 0, 207, 208, 209,
	210, 214, 0, 326, 0, 577, 213, 212, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 1345, 547, 0, 0, 0, 0, 0,
	820, 0, 0, 501, 0, 1029, 1373, 820, 0, 0,
	0, 0, 795, 796, 797, 798, 799, 800, 801, 802,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 803, 0, 0, 326, 189, 326, 1175, 0, 0,
	474, 0, 189, 599, 189, 0, 0, 26, 27, 54,
	29, 30, 0, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 0, 45, 522, 0, 1201,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1203, 0, 0, 0, 0, 0, 0, 1206,
	40, 0, 684, 685, 56, 0, 688, 0, 0, 691,
	326, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 0, 0, 522, 0, 0, 506, 0,
	509, 312, 0, 0, 0, 711, 523, 524, 525, 526,
	527, 528, 529, 0, 507, 508, 505, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 742,
	0, 522, 0, 1249, 0, 1249, 1249, 1249, 0, 1254,
	0, 0, 189, 189, 0, 326, 189, 0, 0, 189,
	0, 0, 0, 695, 0, 0, 0, 33, 34, 36,
	35, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 326, 326, 0, 189, 649, 0, 39, 46,
	47, 723, 0, 48, 49, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 189,
	43, 44, 50, 51, 52, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 837, 0, 0, 501, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	654, 0, 0, 0, 1249, 865, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	242, 242, 0, 0, 821, 821, 242, 1331, 0, 0,
	821, 0, 0, 1231, 0, 0, 0, 637, 0, 0,
	242, 242, 242, 242, 0, 189, 55, 821, 189, 189,
	189, 189, 189, 0, 0, 0, 0, 0, 0, 0,
	854, 820, 0, 189, 501, 1228, 650, 599, 0, 0,
	0, 0, 0, 0, 189, 189, 0, 921, 1359, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 946,
	664, 665, 666, 667, 668, 669, 670, 0, 671, 672,
	673, 674, 675, 651, 652, 653, 635, 636, 663, 0,
	638, 0, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 655, 656, 657, 658, 659, 660, 661, 662,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 522, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 189,
	0, 0, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 0, 522, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 0,
	0, 522, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 1101,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 1197, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 1204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 402, 0, 374, 414,
	352, 366, 422, 367, 368, 395, 338, 382, 131, 364,
	0, 355, 333, 361, 334, 353, 376, 99, 379, 351,
	404, 385, 113, 420, 115, 390, 189, 148, 124, 0,
	0, 378, 406, 380, 400, 373, 396, 343, 389, 415,
	365, 393, 416, 0, 0, 0, 375, 81, 189, 0,
	621, 622, 623, 881, 0, 0, 0, 0, 92, 0,
	0, 0, 392, 411, 363, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 332, 391, 0, 336,
	339, 421, 409, 358, 359, 1042, 0, 0, 0, 0,
	0, 0, 377, 381, 397, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 388, 0, 0, 0,
	340, 337, 0, 599, 0, 0, 342, 0, 357, 398,
	0, 331, 401, 407, 372, 192, 410, 370, 369, 413,
	137, 0, 0, 151, 104, 103, 112, 405, 354, 362,
	95, 360, 143, 133, 163, 387, 134, 142, 116, 155,
	138, 162, 193, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 335, 0, 149, 165, 177,
	350, 408, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 346, 349, 344, 0, 0, 0, 0, 345,
	383, 384, 417, 418, 419, 399, 341, 0, 347, 348,
	0, 403, 386, 83, 0, 114, 175, 139, 101, 166,
	0, 412, 402, 0, 374, 414, 352, 366, 422, 367,
	368, 395, 338, 382, 131, 364, 821, 355, 333, 361,
	334, 353, 376, 99, 379, 351, 404, 385, 113, 420,
	115, 390, 0, 148, 124, 0, 0, 378, 406, 380,
	400, 373, 396, 343, 389, 415, 365, 393, 416, 0,
	0, 0, 375, 81, 0, 0, 621, 622, 623, 881,
	0, 0, 0, 0, 92, 0, 0, 0, 392, 411,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 332, 391, 0, 336, 339, 421, 409, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	397, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	0, 0, 342, 0, 357, 398, 0, 331, 401, 407,
	372, 192, 410, 370, 369, 413, 137, 0, 0, 151,
	104, 103, 112, 405, 354, 362, 95, 360, 143, 133,
	163, 387, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 335, 0, 149, 165, 177, 350, 408, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 346, 349,
	344, 0, 0, 0, 0, 345, 383, 384, 417, 418,
	419, 399, 341, 0, 347, 348, 0, 403, 386, 83,
	0, 114, 175, 139, 101, 166, 412, 402, 0, 374,
	414, 352, 366, 422, 367, 368, 395, 338, 382, 131,
	364, 0, 355, 333, 361, 334, 353, 376, 99, 379,
	351, 404, 385, 113, 420, 115, 390, 0, 148, 124,
	0, 0, 378, 406, 380, 400, 373, 396, 343, 389,
	415, 365, 393, 416, 56, 0, 0, 375, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 392, 411, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 332, 391, 0,
	336, 339, 421, 409, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 397, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 0, 0, 342, 0, 357,
	398, 0, 331, 401, 407, 372, 192, 410, 370, 369,
	413, 137, 0, 0, 151, 104, 103, 112, 405, 354,
	362, 95, 360, 143, 133, 163, 387, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 335, 0, 149, 165,
	177, 350, 408, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 346, 349, 344, 0, 0, 0, 0,
	345, 383, 384, 417, 418, 419, 399, 341, 0, 347,
	348, 0, 403, 386, 83, 0, 114, 175, 139, 101,
	166, 412, 402, 0, 374, 414, 352, 366, 422, 367,
	368, 395, 338, 382, 131, 364, 0, 355, 333, 361,
	334, 353, 376, 99, 379, 351, 404, 385, 113, 420,
	115, 390, 0, 148, 124, 0, 0, 378, 406, 380,
	400, 373, 396, 343, 389, 415, 365, 393, 416, 0,
	0, 0, 375, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 392, 411,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 332, 391, 0, 336, 339, 421, 409, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	397, 371, 0, 0, 0, 0, 0, 0, 1110, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	0, 0, 342, 0, 357, 398, 0, 331, 401, 407,
	372, 192, 410, 370, 369, 413, 137, 0, 0, 151,
	104, 103, 112, 405, 354, 362, 95, 360, 143, 133,
	163, 387, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 335, 0, 149, 165, 177, 350, 408, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 346, 349,
	344, 0, 0, 0, 0, 345, 383, 384, 417, 418,
	419, 399, 341, 0, 347, 348, 0, 403, 386, 83,
	0, 114, 175, 139, 101, 166, 412, 402, 0, 374,
	414, 352, 366, 422, 367, 368, 395, 338, 382, 131,
	364, 0, 355, 333, 361, 334, 353, 376, 99, 379,
	351, 404, 385, 113, 420, 115, 390, 0, 148, 124,
	0, 0, 378, 406, 380, 400, 373, 396, 343, 389,
	415, 365, 393, 416, 0, 0, 0, 375, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 392, 411, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 332, 391, 0,
	336, 339, 421, 409, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 397, 371, 0, 0, 0,
	0, 0, 0, 751, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 0, 0, 342, 0, 357,
	398, 0, 331, 401, 407, 372, 192, 410, 370, 369,
	413, 137, 0, 0, 151, 104, 103, 112, 405, 354,
	362, 95, 360, 143, 133, 163, 387, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 335, 0, 149, 165,
	177, 350, 408, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 346, 349, 344, 0, 0, 0, 0,
	345, 383, 384, 417, 418, 419, 399, 341, 0, 347,
	348, 0, 403, 386, 83, 0, 114, 175, 139, 101,
	166, 412, 402, 0, 374, 414, 352, 366, 422, 367,
	368, 395, 338, 382, 131, 364, 0, 355, 333, 361,
	334, 353, 376, 99, 379, 351, 404, 385, 113, 420,
	115, 390, 0, 148, 124, 0, 0, 378, 406, 380,
	400, 373, 396, 343, 389, 415, 365, 393, 416, 0,
	0, 0, 375, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 392, 411,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 332, 391, 0, 336, 339, 421, 409, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	397, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	0, 0, 342, 0, 357, 398, 0, 331, 401, 407,
	372, 192, 410, 370, 369, 413, 137, 0, 0, 151,
	104, 103, 112, 405, 354, 362, 95, 360, 143, 133,
	163, 387, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 335, 0, 149, 165, 177, 350, 408, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 346, 349,
	344, 0, 0, 0, 0, 345, 383, 384, 417, 418,
	419, 399, 341, 0, 347, 348, 0, 403, 386, 83,
	0, 114, 175, 139, 101, 166, 412, 402, 0, 374,
	414, 352, 366, 422, 367, 368, 395, 338, 382, 131,
	364, 0, 355, 333, 361, 334, 353, 376, 99, 379,
	351, 404, 385, 113, 420, 115, 390, 0, 148, 124,
	0, 0, 378, 406, 380, 400, 373, 396, 343, 389,
	415, 365, 393, 416, 0, 0, 0, 375, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 392, 411, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 332, 391, 0,
	336, 339, 421, 409, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 397, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 0, 0, 342, 0, 357,
	398, 0, 331, 401, 407, 372, 192, 410, 370, 369,
	413, 137, 0, 0, 151, 104, 103, 112, 405, 354,
	362, 95, 360, 143, 133, 163, 387, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 335, 0, 149, 165,
	177, 350, 408, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 346, 349, 344, 0, 0, 0, 0,
	345, 383, 384, 417, 418, 419, 399, 341, 0, 347,
	348, 0, 403, 386, 83, 0, 114, 175, 139, 101,
	166, 412, 402, 0, 374, 414, 352, 366, 422, 367,
	368, 395, 338, 382, 131, 364, 0, 355, 333, 361,
	334, 353, 376, 99, 379, 351, 404, 385, 113, 420,
	115, 390, 0, 148, 124, 0, 0, 378, 406, 380,
	400, 373, 396, 343, 389, 415, 365, 393, 416, 0,
	0, 0, 375, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 392, 411,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 332, 391, 0, 336, 339, 421, 409, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	397, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	0, 0, 342, 0, 357, 398, 0, 331, 401, 407,
	372, 192, 410, 370, 369, 413, 137, 0, 0, 151,
	104, 103, 112, 405, 354, 362, 95, 360, 143, 133,
	163, 387, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 329,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 335, 0, 149, 165, 177, 350, 408, 171, 172,
	173, 174, 0, 0, 0, 330, 328, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 346, 349,
	344, 0, 0, 0, 0, 345, 383, 384, 417, 418,
	419, 399, 341, 0, 347, 348, 0, 403, 386, 83,
	0, 114, 175, 139, 101, 166, 412, 402, 0, 374,
	414, 352, 366, 422, 367, 368, 395, 338, 382, 131,
	364, 0, 355, 333, 361, 334, 353, 376, 99, 379,
	351, 404, 385, 113, 420, 115, 390, 0, 148, 124,
	0, 0, 378, 406, 380, 400, 373, 396, 343, 389,
	415, 365, 393, 416, 0, 0, 0, 375, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 392, 411, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 332, 391, 0,
	336, 339, 421, 409, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 397, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 0, 0, 342, 0, 357,
	398, 0, 331, 401, 407, 372, 192, 410, 370, 369,
	413, 137, 0, 0, 151, 104, 103, 112, 405, 354,
	362, 95, 360, 143, 133, 163, 387, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 335, 0, 149, 165,
	177, 350, 408, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 346, 349, 344, 0, 0, 0, 0,
	345, 383, 384, 417, 418, 419, 399, 341, 0, 347,
	348, 0, 403, 386, 83, 0, 114, 175, 139, 101,
	166, 412, 402, 0, 374, 414, 352, 366, 422, 367,
	368, 395, 338, 382, 131, 364, 0, 355, 333, 361,
	334, 353, 376, 99, 379, 351, 404, 385, 113, 420,
	115, 390, 0, 148, 124, 0, 0, 378, 406, 380,
	400, 373, 396, 343, 389, 415, 365, 393, 416, 0,
	0, 0, 375, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 392, 411,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 332, 391, 0, 336, 339, 421, 409, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	397, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	0, 0, 342, 0, 357, 398, 0, 331, 401, 407,
	372, 192, 410, 370, 369, 413, 137, 0, 0, 151,
	104, 103, 112, 405, 354, 362, 95, 360, 143, 133,
	163, 387, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 611, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 329,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 335, 0, 149, 165, 177, 350, 408, 171, 172,
	173, 174, 0, 0, 0, 330, 328, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 346, 349,
	344, 0, 0, 0, 0, 345, 383, 384, 417, 418,
	419, 399, 341, 0, 347, 348, 0, 403, 386, 83,
	0, 114, 175, 139, 101, 166, 412, 402, 0, 374,
	414, 352, 366, 422, 367, 368, 395, 338, 382, 131,
	364, 0, 355, 333, 361, 334, 353, 376, 99, 379,
	351, 404, 385, 113, 420, 115, 390, 0, 148, 124,
	0, 0, 378, 406, 380, 400, 373, 396, 343, 389,
	415, 365, 393, 416, 0, 0, 0, 375, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 392, 411, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 332, 391, 0,
	336, 339, 421, 409, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 397, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 0, 0, 342, 0, 357,
	398, 0, 331, 401, 407, 372, 192, 410, 370, 369,
	413, 137, 0, 0, 151, 104, 103, 112, 405, 354,
	362, 95, 360, 143, 133, 163, 387, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 320,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 329, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 335, 0, 149, 165,
	177, 350, 408, 171, 172, 173, 174, 0, 0, 0,
	330, 328, 323, 322, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 346, 349, 344, 0, 0, 0, 0,
	345, 383, 384, 417, 418, 419, 399, 341, 0, 347,
	348, 0, 403, 386, 83, 0, 114, 175, 139, 101,
	166, 131, 0, 0, 787, 0, 249, 0, 0, 0,
	99, 0, 246, 0, 0, 113, 293, 115, 0, 0,
	148, 124, 0, 0, 0, 0, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 283,
	247, 277, 270, 268, 269, 0, 272, 273, 274, 275,
	0, 92, 271, 278, 0, 276, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	244, 260, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 240, 0, 0, 0, 304,
	0, 259, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 302, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 193, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 294, 303, 300, 0, 0,
	0, 0, 301, 298, 299, 297, 296, 295, 305, 286,
	287, 288, 289, 291, 0, 290, 83, 0, 114, 175,
	139, 101, 166, 131, 0, 0, 0, 0, 249, 0,
	0, 0, 99, 0, 246, 0, 0, 113, 293, 115,
	0, 0, 148, 124, 0, 0, 0, 0, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 283, 247, 277, 270, 268, 269, 0, 272, 273,
	274, 275, 0, 92, 271, 278, 0, 276, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 260, 0, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 1284, 0, 0,
	0, 304, 0, 259, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 302, 0, 137, 0, 0, 151, 104,
	103, 112, 0, 0, 0, 95, 0, 143, 133, 163,
	0, 134, 142, 116, 155, 138, 162, 193, 170, 153,
	169, 84, 152, 161, 93, 145, 0, 0, 0, 86,
	159, 150, 122, 108, 109, 85, 0, 141, 98, 102,
	97, 130, 156, 157, 96, 89, 168, 88, 90, 167,
	129, 154, 160, 123, 120, 87, 158, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 149, 165, 177, 0, 0, 171, 172, 173,
	174, 0, 0, 0, 128, 91, 107, 146, 110, 117,
	140, 176, 132, 144, 94, 164, 147, 294, 303, 300,
	0, 0, 0, 0, 301, 298, 299, 297, 296, 295,
	305, 286, 287, 288, 289, 291, 0, 290, 83, 0,
	114, 175, 139, 101, 166, 131, 0, 0, 0, 0,
	249, 0, 0, 0, 99, 0, 246, 0, 0, 113,
	293, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 474, 283, 247, 277, 270, 268, 269, 0,
	272, 273, 274, 275, 0, 92, 271, 278, 0, 276,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 244, 260, 0, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 0,
	0, 0, 0, 304, 0, 259, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 302, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 193,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 294,
	303, 300, 0, 0, 0, 0, 301, 298, 299, 297,
	296, 295, 305, 286, 287, 288, 289, 291, 0, 290,
	83, 0, 114, 175, 139, 101, 166, 131, 0, 0,
	0, 0, 249, 0, 0, 0, 99, 0, 246, 0,
	0, 113, 293, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 283, 247, 277, 270, 268,
	269, 0, 272, 273, 274, 275, 0, 92, 271, 278,
	0, 276, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 260, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 240, 0, 0, 0, 304, 0, 259, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 302, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 193, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 294, 303, 300, 0, 0, 0, 0, 301, 298,
	299, 297, 296, 295, 305, 286, 287, 288, 289, 291,
	0, 290, 83, 0, 114, 175, 139, 101, 166, 131,
	0, 0, 0, 0, 249, 0, 0, 0, 99, 0,
	246, 0, 0, 113, 293, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 872, 0, 56, 0, 0, 283, 247, 277,
	270, 268, 269, 0, 272, 273, 274, 275, 0, 92,
	271, 278, 0, 276, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 260,
	0, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 304, 0, 259,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 302,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 294, 303, 300, 0, 0, 0, 0,
	301, 298, 299, 297, 296, 295, 305, 286, 287, 288,
	289, 291, 26, 290, 83, 0, 114, 175, 139, 101,
	166, 0, 0, 0, 131, 0, 0, 0, 0, 249,
	0, 0, 0, 99, 0, 246, 0, 0, 113, 293,
	115, 0, 0, 148, 124, 0, 0, 0, 0, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 283, 247, 277, 270, 268, 269, 0, 272,
	273, 274, 275, 0, 92, 271, 278, 0, 276, 279,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 260, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 0, 0,
	0, 0, 304, 0, 259, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 302, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 294, 303,
	300, 0, 0, 0, 0, 301, 298, 299, 297, 296,
	295, 305, 286, 287, 288, 289, 291, 0, 290, 83,
	0, 114, 175, 139, 101, 166, 131, 0, 0, 0,
	0, 249, 0, 0, 0, 99, 0, 246, 0, 0,
	113, 293, 115, 0, 0, 148, 124, 0, 0, 0,
	0, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 283, 247, 277, 270, 268, 269,
	0, 272, 273, 274, 275, 0, 92, 271, 278, 0,
	276, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 244, 260, 0, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 304, 0, 259, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 302, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	193, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	294, 303, 300, 0, 0, 0, 0, 301, 298, 299,
	297, 296, 295, 305, 286, 287, 288, 289, 291, 131,
	290, 83, 0, 114, 175, 139, 101, 166, 99, 0,
	0, 0, 0, 113, 293, 115, 0, 0, 148, 124,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 283, 247, 277,
	270, 268, 269, 0, 272, 273, 274, 275, 0, 92,
	271, 278, 0, 276, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	0, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 304, 0, 259,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 302,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 1374, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 294, 303, 300, 0, 0, 0, 0,
	301, 298, 299, 297, 296, 295, 305, 286, 287, 288,
	289, 291, 131, 290, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 293, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	283, 247, 277, 270, 268, 269, 0, 272, 273, 274,
	275, 0, 92, 271, 278, 0, 276, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 0, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 0, 0, 0, 0,
	304, 0, 259, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 302, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 193, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 294, 303, 300, 0,
	0, 0, 0, 301, 298, 299, 297, 296, 295, 305,
	286, 287, 288, 289, 291, 131, 290, 83, 0, 114,
	175, 139, 101, 166, 99, 0, 0, 0, 0, 113,
	293, 115, 0, 0, 148, 124, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 283, 247, 277, 270, 549, 269, 0,
	272, 273, 274, 275, 0, 92, 271, 278, 0, 276,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 0, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 0,
	0, 0, 0, 304, 0, 259, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 302, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 193,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 294,
	303, 300, 0, 0, 0, 0, 301, 298, 299, 297,
	296, 295, 305, 286, 287, 288, 289, 291, 0, 290,
	83, 0, 114, 175, 139, 101, 166, 131, 0, 0,
	0, 496, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 498,
	499, 500, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 193, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 83, 0, 114, 175, 139, 101, 166, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 0, 81,
	0, 0, 498, 499, 500, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 193, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 83, 0, 114, 175, 139,
	101, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 73, 0, 0, 0, 79, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 75, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 131, 76,
	0, 0, 598, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 113, 0, 115, 0, 0, 148, 124, 83,
	0, 114, 175, 139, 101, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	602, 601, 600, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	137, 0, 0, 151, 104, 103, 112, 0, 0, 0,
	95, 0, 143, 133, 163, 0, 134, 142, 116, 155,
	138, 162, 193, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 149, 165, 177,
	0, 0, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 620, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 83, 0, 114, 175, 139, 101, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 621, 622, 623, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 193, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 131, 0, 0, 0,
	598, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 83, 0, 114,
	175, 139, 101, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 602, 601,
	600, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 596, 142, 116, 155, 138, 162,
	193, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 83, 0, 114, 175, 139, 101, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 498, 499, 500, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 193, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 83, 0, 114, 175, 139,
	101, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 602, 601, 600, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 83,
	0, 114, 175, 139, 101, 166, 99, 0, 0, 0,
	0, 113, 0, 115, 0, 0, 148, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 137,
	0, 0, 151, 104, 103, 112, 0, 0, 0, 95,
	0, 143, 133, 163, 0, 134, 142, 116, 155, 138,
	162, 193, 170, 153, 169, 84, 152, 161, 93, 145,
	0, 0, 0, 86, 159, 150, 122, 108, 109, 85,
	0, 141, 98, 102, 97, 130, 156, 157, 96, 89,
	168, 88, 90, 167, 129, 154, 160, 123, 120, 87,
	158, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 149, 165, 177, 0,
	0, 171, 172, 173, 174, 0, 0, 0, 128, 91,
	107, 146, 110, 117, 140, 176, 132, 144, 94, 164,
	147, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 113, 0, 115, 0, 0,
	148, 124, 83, 0, 114, 175, 139, 101, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 738, 0, 0, 739,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 137, 0, 0, 151, 104, 103, 112,
	0, 0, 0, 95, 0, 143, 133, 163, 0, 134,
	142, 116, 155, 138, 162, 193, 170, 153, 169, 84,
	152, 161, 93, 145, 0, 0, 0, 86, 159, 150,
	122, 108, 109, 85, 0, 141, 98, 102, 97, 130,
	156, 157, 96, 89, 168, 88, 90, 167, 129, 154,
	160, 123, 120, 87, 158, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	149, 165, 177, 0, 0, 171, 172, 173, 174, 0,
	0, 0, 128, 91, 107, 146, 110, 117, 140, 176,
	132, 144, 94, 164, 147, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 113,
	0, 115, 0, 0, 148, 124, 83, 0, 114, 175,
	139, 101, 166, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 137, 0, 0,
	151, 104, 103, 112, 0, 0, 0, 95, 0, 143,
	133, 163, 0, 134, 142, 116, 155, 138, 162, 193,
	170, 153, 169, 84, 152, 161, 93, 145, 0, 0,
	0, 86, 159, 150, 122, 108, 109, 85, 0, 141,
	98, 102, 97, 130, 156, 157, 96, 89, 168, 88,
	90, 167, 129, 154, 160, 123, 120, 87, 158, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 149, 165, 177, 0, 0, 171,
	172, 173, 174, 0, 0, 0, 128, 91, 107, 146,
	110, 117, 140, 176, 132, 144, 94, 164, 147, 131,
	0, 0, 0, 0, 0, 0, 0, 576, 99, 0,
	0, 0, 0, 113, 0, 115, 0, 0, 148, 124,
	83, 0, 114, 175, 139, 101, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 137, 0, 0, 151, 104, 103, 112, 0, 0,
	0, 95, 0, 143, 133, 163, 0, 134, 142, 116,
	155, 138, 162, 193, 170, 153, 169, 84, 152, 161,
	93, 145, 0, 0, 0, 86, 159, 150, 122, 108,
	109, 85, 0, 141, 98, 102, 97, 130, 156, 157,
	96, 89, 168, 88, 90, 167, 129, 154, 160, 123,
	120, 87, 158, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 149, 165,
	177, 0, 0, 171, 172, 173, 174, 0, 0, 0,
	128, 91, 107, 146, 110, 117, 140, 176, 132, 144,
	94, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 131, 0, 83, 0, 114, 175, 139, 101,
	166, 99, 0, 0, 0, 0, 113, 0, 115, 0,
	0, 148, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 137, 0, 0, 151, 104, 103,
	112, 0, 0, 0, 95, 0, 143, 133, 163, 0,
	134, 142, 116, 155, 138, 162, 193, 170, 153, 169,
	84, 152, 161, 93, 145, 0, 0, 0, 86, 159,
	150, 122, 108, 109, 85, 0, 141, 98, 102, 97,
	130, 156, 157, 96, 89, 168, 88, 90, 167, 129,
	154, 160, 123, 120, 87, 158, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 149, 165, 177, 0, 0, 171, 172, 173, 174,
	0, 0, 0, 128, 91, 107, 146, 110, 117, 140,
	176, 132, 144, 94, 164, 147, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	113, 0, 115, 0, 0, 148, 124, 83, 0, 114,
	175, 139, 101, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 192, 0, 0, 0, 0, 137, 0,
	0, 151, 104, 103, 112, 0, 0, 0, 95, 0,
	143, 133, 163, 0, 134, 142, 116, 155, 138, 162,
	193, 170, 153, 169, 84, 152, 161, 93, 145, 0,
	0, 0, 86, 159, 150, 122, 108, 109, 85, 0,
	141, 98, 102, 97, 130, 156, 157, 96, 89, 168,
	88, 90, 167, 129, 154, 160, 123, 120, 87, 158,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 149, 165, 177, 0, 0,
	171, 172, 173, 174, 0, 0, 0, 128, 91, 107,
	146, 110, 117, 140, 176, 132, 144, 94, 164, 147,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 148,
	124, 83, 0, 114, 175, 139, 101, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 137, 0, 0, 151, 104, 103, 112, 0,
	0, 0, 95, 0, 143, 133, 163, 0, 134, 142,
	116, 155, 138, 162, 193, 170, 153, 169, 84, 152,
	161, 93, 145, 0, 0, 0, 86, 159, 150, 122,
	108, 109, 85, 0, 141, 98, 102, 97, 130, 156,
	157, 96, 89, 168, 88, 90, 167, 129, 154, 160,
	123, 120, 87, 158, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 149,
	165, 177, 0, 0, 171, 172, 173, 174, 0, 0,
	0, 128, 91, 107, 146, 110, 117, 140, 176, 132,
	144, 94, 164, 147, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 148, 124, 83, 0, 114, 175, 139,
	101, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 137, 0, 0, 151,
	104, 103, 112, 0, 0, 0, 95, 0, 143, 133,
	163, 0, 134, 142, 116, 155, 138, 162, 193, 170,
	153, 169, 84, 152, 161, 93, 145, 0, 0, 0,
	86, 159, 150, 122, 108, 109, 85, 0, 141, 98,
	102, 97, 130, 156, 157, 96, 89, 168, 88, 90,
	167, 129, 154, 160, 123, 120, 87, 158, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 149, 165, 177, 0, 0, 171, 172,
	173, 174, 0, 0, 0, 128, 91, 107, 146, 110,
	117, 140, 176, 132, 144, 94, 164, 147, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 113, 0, 115, 0, 0, 148, 124, 83,
	0, 114, 175, 139, 101, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	137, 0, 0, 151, 104, 103, 112, 0, 0, 0,
	95, 0, 143, 133, 163, 0, 134, 142, 116, 155,
	138, 162, 193, 170, 153, 169, 84, 152, 161, 93,
	145, 0, 0, 0, 86, 159, 150, 122, 108, 109,
	85, 0, 141, 98, 102, 97, 130, 156, 157, 96,
	89, 168, 88, 90, 167, 129, 154, 160, 123, 120,
	87, 158, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 149, 165, 177,
	0, 0, 171, 172, 173, 174, 0, 0, 0, 128,
	91, 107, 146, 110, 117, 140, 176, 132, 144, 94,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 114, 175, 139, 101, 166,
}
var yyPact = [...]int{

	1801, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 871, 913, -1000, -1000, -1000, -1000,
	-1000, -1000, 668, 8616, 48, 76, -43, 11228, 72, 1485,
	11930, -1000, -22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-27, 11930, 445, 559, -1000, -1000, -1000, -1000, -1000, 863,
	869, 694, 851, 772, -1000, 6319, 41, 10507, 10994, 5271,
	-1000, 440, 67, 11930, -177, 11462, 26, 26, 26, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71, 11930,
	-1000, 11930, 18, 439, 18, 18, 18, 11930, -1000, 113,
	-1000, -1000, -1000, -1000, 11930, 437, 810, 83, 3071, 3071,
	3071, 3071, -17, 3071, -111, -96, 714, -1000, -1000, -1000,
	-1000, 3071, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11930, 695, 698, 404, 819, 7108, 7108, 871,
	-1000, 559, -1000, -1000, -1000, 801, -1000, -1000, 302, 885,
	-1000, 8129, 109, -1000, 7108, 1781, 635, -1000, -1000, 635,
	103, 295, -1000, -1000, -1000, 7614, 7614, 7614, 7614, 7614,
	7614, -1000, -1000, -1000, -1000, -1000, -1000, 635, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6846, 7867, 635, 635, 635, 635, 635, 635,
	635, 635, 7108, 635, 635, 635, 635, 635, 635, 635,
	635, 635, 635, 635, 635, 635, 10741, 513, 834, -1000,
	-1000, -1000, 848, 10039, 9318, 11930, 650, -1000, 627, 4996,
	-152, -1000, -1000, -1000, 176, 9084, -1000, -1000, -1000, 803,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 615, -1000, 1926, 436, 3071, 51, 693,
	435, 183, 428, 11930, 11930, 3071, 46, 11930, 839, 713,
	11930, 426, 422, -1000, 4721, -1000, 3071, 3071, 3071, 3071,
	3071, 3071, 3071, 3071, -1000, -1000, -1000, -1000, -1000, -1000,
	3071, 3071, -1000, -120, -95, -1000, 11930, -1000, -1000, 88,
	88, 1926, 11930, -1000, -1000, -1000, 892, 152, 266, 107,
	633, -1000, 334, 863, 404, 772, 10273, 724, -1000, -1000,
	11930, -1000, 7108, 7108, 359, -1000, 9552, -1000, -1000, -1000,
	-1000, -1000, 3621, 161, 7614, 275, 217, 7614, 7614, 7614,
	7614, 7614, 7614, 7614, 7614, 7614, 7614, 7614, 7614, 7614,
	7614, 7614, 484, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 413, -1000, 559, 755, 755, 296, -1000, 135, 135,
	135, 135, 135, 135, 5533, 404, 604, 238, 6846, -1000,
	1697, 6319, 6319, 7108, 7108, 11696, 11696, 6319, 852, 181,
	238, 11696, -1000, 404, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6319, 6319, 6319, 6319, 143, 11930, -1000, 11696, 10507,
	10507, 10507, 10507, 10507, -1000, 738, 735, -1000, 732, 731,
	762, 11930, -1000, 591, 10039, 168, 635, -1000, 9786, -1000,
	-1000, -1000, -1000, -2, 481, 10507, 11930, -1000, -1000, 4446,
	627, -152, 567, -1000, -138, -125, 6581, 122, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2796, 236, 263, -84, -1000,
	-1000, -1000, -1000, 637, -1000, 637, 637, 637, 637, -52,
	-52, -52, -52, -1000, -1000, -1000, -1000, -1000, 667, 663,
	-1000, 637, 637, 637, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 662, 662, 662, 644, 644, 697, -1000, 11930, -193,
	400, 3071, 837, 3071, -1000, 1429, -1000, 11930, -1000, -1000,
	11930, 3071, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 267, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	584, -1000, 611, -1000, -1000, 763, 7108, 7108, 4171, 7108,
	-1000, -1000, -1000, 819, -1000, 852, 873, -1000, 798, 797,
	6319, -1000, -1000, 161, 285, -1000, -1000, 350, -1000, -1000,
	-1000, -1000, 97, 635, -1000, 2081, -1000, -1000, -1000, -1000,
	275, 7614, 7614, 7614, 60, 2081, 1112, 402, 289, 135,
	133, 133, 144, 144, 144, 144, 144, 351, 351, -1000,
	-1000, -1000, 404, 295, 295, -1000, 404, 6319, 577, -1000,
	-1000, 7108, -1000, 404, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 579, 579, 256, 343, 692,
	-1000, 92, 690, 579, 6319, 287, -1000, 7108, 404, -1000,
	579, 404, 579, 579, 689, 795, 635, -1000, 671, -1000,
	174, 834, 661, 712, 804, -1000, -1000, -1000, -1000, 734,
	-1000, 728, -1000, -1000, -1000, -1000, -1000, 64, 61, 54,
	11462, -1000, 883, 10507, 623, -1000, -1000, 567, -152, -114,
	-1000, -1000, -1000, 238, -1000, 490, 564, 2520, -1000, -1000,
	-1000, -1000, -1000, -1000, 657, 825, 178, 179, 388, -1000,
	-1000, 805, -1000, 273, -87, -1000, -1000, 378, -52, -52,
	-1000, -1000, 122, 802, 122, 122, 122, 365, 365, -1000,
	-1000, -1000, -1000, 374, -1000, -1000, -1000, 371, -1000, 711,
	11462, 3071, -1000, 3896, -1000, -1000, -1000, -1000, -1000, -1000,
	364, 314, 175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -3, -1000, 3071, -1000, 260, 11930,
	11930, 1926, 843, 11930, 770, 238, 238, 90, -1000, -1000,
	11930, -1000, -1000, -1000, -1000, 660, -1000, -1000, -1000, 3346,
	6319, -1000, 60, 2081, 613, -1000, 7614, 7614, -1000, -1000,
	579, 6319, 238, -1000, -1000, -1000, 34, 484, 34, 7614,
	7614, 4171, 7614, 7614, -187, 494, 220, -1000, 7108, 252,
	-1000, -1000, -1000, -1000, -1000, 710, 11696, 635, -1000, 8382,
	-1000, 11462, 871, 11696, 7108, 7108, -1000, -1000, 7108, 645,
	-1000, 7108, -1000, -1000, -1000, 635, 635, 635, 536, -1000,
	871, 623, -1000, -1000, -1000, -150, -145, -1000, -1000, -1000,
	2796, -1000, 2796, 11462, -1000, 387, 386, -1000, -1000, 700,
	66, -1000, -1000, -1000, 452, 122, 122, -1000, 213, -1000,
	-1000, -1000, 560, -1000, 553, 542, 544, 11930, -1000, -1000,
	540, -1000, 171, -1000, -1000, 11462, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11462, 11930,
	-1000, -1000, -1000, -1000, -1000, 11462, -1000, -1000, 365, 7108,
	-1000, -1000, -1000, 88, -1000, -1000, 3896, -1000, 883, 10507,
	-1000, -1000, 404, -1000, 7614, 2081, 2081, -1000, -1000, 404,
	637, 637, -1000, 637, 644, -1000, 637, -36, 637, -37,
	635, 404, 404, 1526, 2066, -1000, 672, 2034, 635, -184,
	-1000, 238, 7108, -207, 831, 551, 503, -1000, -1000, 6057,
	404, 538, 89, 536, 863, -1000, 238, 238, 238, 11462,
	238, 11462, 11462, 11462, 8850, 11462, 863, -1000, -1000, -1000,
	-1000, 2520, -1000, 534, -1000, 637, -1000, -1000, -79, 891,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -52, 365, -52, 357, -1000, 355, 3071, 3896, 2796,
	-1000, 636, -1000, -1000, -1000, -1000, 835, -1000, 238, -1000,
	874, 517, -1000, 2081, -1000, -1000, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, 321, -1000, -1000, -1000, 7614, 7614, -1000,
	7614, 7614, 7614, 404, 365, 238, -1000, 5795, 815, -1000,
	635, -1000, -1000, 643, 9552, 9552, -1000, -1000, 515, -1000,
	505, 505, 505, 168, -1000, -1000, 121, 11462, -1000, 163,
	-1000, -163, 122, -1000, 122, 450, 448, -1000, -1000, -1000,
	11462, 635, 880, 867, -1000, -1000, 404, 1745, 1745, 1745,
	1745, -7, -1000, -1000, -1000, 485, 888, -1000, 635, -1000,
	559, 87, -1000, 11462, -1000, -1000, -1000, -1000, -1000, 121,
	-1000, 385, 170, 365, -1000, 270, 814, -1000, 813, -1000,
	-1000, -1000, -1000, -1000, 500, -4, -1000, 7108, 7108, -1000,
	-1000, -1000, -1000, -1000, 404, 37, -196, 11696, 503, 404,
	9552, -1000, -1000, -1000, 293, -1000, -1000, -1000, 365, -1000,
	-1000, 693, 483, -1000, 11462, 238, 485, -1000, 766, -191,
	-203, 457, -1000, -1000, -1000, -1000, -193, -1000, -4, 793,
	-1000, 746, -1000, -1000, -1000, -8, -194, -10, -197, 635,
	-204, 7361, -1000, 1745, 404, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1149, 9, 28, 1147, 1146, 1144, 944, 923, 919,
	1143, 1142, 1141, 1140, 1138, 1133, 1130, 1127, 1124, 1123,
	1119, 1118, 1115, 1114, 1113, 1112, 1111, 139, 1109, 1108,
	1107, 60, 1106, 70, 1105, 1103, 38, 133, 44, 41,
	435, 1102, 24, 64, 59, 1101, 45, 1100, 1098, 67,
	1095, 66, 1094, 1093, 1418, 1092, 1091, 14, 26, 1090,
	1089, 1088, 1084, 65, 394, 1083, 1082, 1081, 1080, 1078,
	1077, 49, 7, 13, 25, 18, 1076, 771, 6, 1074,
	43, 1071, 1070, 1069, 1065, 36, 1064, 53, 1062, 16,
	46, 1061, 15, 56, 31, 21, 5, 71, 55, 1060,
	27, 58, 48, 1059, 1057, 393, 1056, 1055, 1054, 1051,
	1048, 1046, 154, 317, 1045, 1044, 1042, 1040, 39, 175,
	753, 440, 69, 1038, 1037, 12, 1035, 1488, 61, 57,
	19, 1034, 29, 125, 37, 1030, 1029, 35, 1018, 40,
	1017, 1016, 1014, 1009, 1007, 1006, 1004, 349, 1000, 999,
	998, 32, 30, 997, 996, 50, 23, 994, 993, 991,
	47, 52, 983, 51, 982, 977, 975, 973, 34, 20,
	972, 11, 970, 8, 969, 968, 2, 967, 22, 966,
	3, 962, 4, 42, 961, 960, 33, 951, 950, 17,
	949, 948, 946, 942, 0, 147, 940, 927, 103,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 196, 196, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 135, 135, 11, 11, 11, 11, 11, 11,
	11, 182, 182, 181, 180, 180, 179, 179, 178, 16,
	165, 166, 166, 166, 161, 138, 138, 139, 139, 139,
	139, 139, 146, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 143, 143, 143,
	143, 143, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 160, 160, 147, 147, 155,
	155, 156, 156, 156, 153, 153, 154, 154, 157, 157,
	157, 148, 148, 148, 148, 148, 148, 148, 150, 150,
	158, 158, 151, 151, 151, 152, 152, 152, 159, 159,
	159, 159, 159, 149, 149, 162, 162, 174, 174, 173,
	173, 173, 164, 164, 170, 170, 170, 170, 170, 163,
	163, 172, 172, 171, 167, 167, 167, 168, 168, 168,
	169, 169, 169, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 177, 175, 175, 176, 176, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 110, 110, 107, 107, 108, 108, 109, 109, 109,
	111, 111, 111, 136, 136, 136, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 24, 25, 25,
	25, 186, 186, 186, 186, 186, 186, 26, 26, 187,
	187, 197, 27, 28, 28, 29, 29, 29, 33, 33,
	33, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 123, 123, 123, 125, 125, 125, 125,
	122, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	56, 56, 92, 92, 94, 94, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 131, 131, 130, 130,
	130, 129, 129, 129, 129, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 57,
	57, 57, 57, 58, 58, 40, 40, 40, 40, 40,
	40, 40, 106, 106, 60, 60, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 70, 70, 70, 70,
	70, 70, 61, 61, 61, 61, 61, 61, 61, 36,
	36, 71, 71, 71, 77, 72, 72, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 191,
	190, 68, 68, 68, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 198, 198, 69,
	69, 69, 69, 34, 34, 34, 34, 34, 134, 134,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 81, 81, 35, 35, 79, 79,
	80, 82, 82, 78, 78, 78, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 184, 184,
	65, 65, 65, 83, 83, 84, 84, 85, 85, 86,
	86, 87, 88, 88, 88, 89, 89, 89, 89, 90,
	90, 90, 62, 62, 62, 62, 62, 62, 91, 91,
	91, 91, 95, 95, 73, 73, 75, 75, 74, 76,
	185, 185, 185, 96, 96, 100, 97, 97, 101, 101,
	101, 99, 99, 99, 126, 126, 126, 104, 104, 112,
	112, 113, 113, 105, 105, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 116, 116,
	117, 117, 117, 124, 124, 120, 120, 121, 121, 127,
	127, 128, 128, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 189, 189, 189, 194, 195, 132, 133, 133,
	133,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 1, 3, 3, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 4, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 4, 4,
	7, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	3, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 1, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 4, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	0, 2, 2, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 136, 137, 139, 138, 164, 140, 157,
	49, 176, 177, 179, 180, 25, 158, 159, 162, 163,
	181, 182, 183, -194, 8, 265, 53, -193, 281, -85,
	15, -29, 5, -27, -197, -27, -27, -27, -27, -27,
	-165, 53, -117, 145, 95, 172, 253, 142, 143, 149,
	-120, 57, -119, 273, 176, 190, 184, 210, 202, 200,
	203, 240, 68, 179, 249, 160, 199, 195, 193, 27,
	215, 278, 194, 155, 154, 216, 220, 241, 188, 189,
	243, 214, 156, 32, 275, 34, 168, 244, 218, 213,
	209, 212, 187, 208, 38, 222, 221, 223, 239, 205,
	196, 18, 247, 163, 166, 217, 219, 150, 170, 277,
	245, 192, 167, 162, 248, 180, 242, 251, 37, 227,
	186, 153, 177, 174, 206, 169, 197, 198, 211, 185,
	207, 178, 171, 164, 250, 228, 279, 204, 201, 175,
	173, 232, 233, 234, 235, 276, 246, 229, -105, 145,
	147, 143, 143, 144, 145, 253, 142, 143, -54, -127,
	57, -119, 145, 172, 143, 131, 203, 136, 230, 144,
	32, 170, -136, 143, 178, -107, 173, 232, 233, 234,
	235, 57, 242, 241, 236, -127, 178, -132, -132, -132,
	-132, -132, 182, -127, 57, -2, -89, 17, 16, -5,
	-3, -194, 6, 20, 21, -33, 39, 40, -28, -39,
	122, -40, -127, -59, 97, -64, 29, 57, -119, 23,
	-78, -63, -60, -76, -77, 131, 132, 120, 121, 128,
	98, -190, -191, -68, -66, -67, -69, -120, 60, 61,
	59, 69, 63, 64, 65, 66, 72, 58, 70, 73,
	74, -74, -194, 56, 43, 44, 266, 267, 268, 269,
	272, 270, 100, 33, 252, 264, 263, 262, 260, 261,
	254, 259, 148, 253, 126, 265, -105, -42, -43, -44,
	-45, -56, -77, -194, -54, 11, -49, -54, -97, -135,
	178, -101, 242, 241, -121, -99, -120, -118, 240, 203,
	239, 141, 96, 22, 24, 225, 99, 131, 16, 100,
	130, 266, 136, 47, 254, 259, 252, 268, 269, 253,
	230, 29, 10, 25, 158, 21, 124, 138, 103, 104,
	161, 23, 159, 74, 19, 50, 11, 13, 14, 148,
	147, 115, 144, 45, 8, 56, 26, 112, 41, 28,
	43, 113, 17, 260, 261, 31, 272, 165, 126, 48,
	35, 97, 72, 51, 95, 15, 46, 114, 139, 265,
	44, 142, 6, 271, 30, 157, 42, 143, 231, 102,
	146, 73, 5, 149, 9, 49, 52, 262, 263, 264,
	33, 101, 12, -166, -161, 57, 144, -54, 265, -120,
	-113, 148, -113, -113, 143, -54, -54, -112, 148, 57,
	-112, -112, -112, -54, 133, -54, 57, 30, 253, 57,
	170, 143, 171, 145, -133, -194, -121, -133, -133, -133,
	174, 175, -133, 243, -108, 237, 51, -133, -127, 11,
	22, -194, 52, -195, 55, -90, 19, 31, -40, -127,
	-86, -87, -40, -85, -2, -27, 35, -31, 21, 67,
	11, -123, 96, 95, 112, -122, 22, -125, 60, 61,
	62, -120, 133, -40, -61, 115, 97, 113, 114, 99,
	117, 116, 127, 120, 121, 122, 123, 124, 125, 126,
	118, 119, 130, 105, 106, 107, 108, 109, 110, 111,
	-106, -194, -77, -194, 134, 135, -184, 71, -64, -64,
	-64, -64, -64, -64, -194, -2, -72, -40, -194, 60,
	-64, -194, -194, -194, -194, -194, -194, -194, -194, -81,
	-40, -194, -198, -194, -198, -198, -198, -198, -198, -198,
	-198, -194, -194, -194, -194, -55, 26, -54, 30, 54,
	-50, -52, -51, -53, 41, 45, 47, 42, 43, 44,
	48, -131, 22, -42, -194, -130, 166, -129, 22, -127,
	62, 61, 60, -54, -49, -196, 54, 11, 52, 54,
	-97, 178, -98, -102, 243, 245, 105, -126, -120, -189,
	29, 60, 61, 62, 30, 55, 54, -139, -142, -144,
	-143, -145, -146, -140, -141, 200, 201, 131, 204, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 30,
	160, 197, 198, 199, 94, 216, 217, 218, 219, 220,
	221, 222, 223, 202, 184, 185, 186, 187, 188, 189,
	190, 192, 193, 194, 195, 196, 57, -133, 145, -182,
	52, 57, 97, 57, -54, -54, -133, 146, -54, 23,
	51, -54, 57, 57, -128, -127, -118, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, 244, -110, 231,
	238, -54, -186, -3, -7, -9, -8, 57, -189, -186,
	-138, -139, -187, -127, 9, 115, 54, 18, 133, 54,
	-88, 24, 25, -89, -195, -33, -65, -120, 63, 66,
	-32, 42, -54, -40, -40, -70, 72, 97, 73, 74,
	-122, 122, -128, -121, -118, -64, -71, -74, -77, 71,
	115, 113, 114, 99, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -134,
	57, -189, 57, -63, -63, 71, -38, 21, -37, -39,
	-195, 54, -195, -2, -188, 75, 76, 77, 78, 79,
	80, 81, 82, 94, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, -37, -37, -40, -40, -78,
	-120, -127, -78, -37, -31, -79, -80, 101, -78, -195,
	-37, -38, -37, -37, -93, 29, 166, -54, -96, -100,
	-78, -43, -44, -44, -43, -44, 41, 41, 41, 46,
	41, 46, 41, -51, -127, -195, -57, 49, 147, 50,
	-194, -129, -93, 52, -42, -54, -101, -98, 54, 244,
	246, 247, 51, -40, -152, 130, -167, -168, -169, -121,
	-189, 63, -161, -162, -170, 150, 153, 149, -163, 144,
	28, -157, 72, 97, -153, 228, -147, 53, -147, -147,
	-147, -147, -151, 203, -151, -151, -151, 53, 53, -147,
	-147, -147, -155, 53, -155, -155, -156, 53, -156, -124,
	52, -54, -180, 276, -181, 57, -133, 23, -133, -114,
	141, 138, 139, -177, 137, 225, 203, 68, 29, 15,
	266, 166, 279, 57, 167, -54, -54, -133, -109, 11,
	115, 54, -195, 54, 37, -40, -40, -128, -87, -90,
	-104, 19, 11, 33, 33, -37, 72, 73, 74, 133,
	-194, -71, -64, -64, -64, -36, 161, 96, -195, -195,
	-37, 54, -40, -195, -195, -195, 54, 52, 22, 54,
	11, 133, 54, 11, -195, -37, -82, -80, 103, -40,
	-195, -195, -195, -195, -195, -62, 30, 33, -2, -194,
	33, -194, -58, 54, 12, 105, -47, -46, 51, 52,
	-48, 51, -46, 41, 41, 144, 144, 144, -94, -120,
	-58, -42, -58, -102, -103, 248, 245, 251, 57, -189,
	54, -169, 105, 53, 28, -163, -163, 57, 57, -148,
	29, 72, -154, 229, 63, -151, -151, -152, 30, -152,
	-152, -152, -160, -189, -160, 63, 63, 51, -120, -133,
	-179, -178, -121, -132, -183, 172, 151, 152, 155, 154,
	57, 144, 28, 150, 153, 166, 149, -183, 172, -115,
	-116, 146, 22, 144, 28, 166, -133, -111, 113, 12,
	-127, -127, -139, 22, -127, 38, 133, -54, -41, 11,
	122, -121, -38, -36, 96, -64, -64, -195, -39, -137,
	131, 200, 160, 199, 195, 214, 205, 227, 197, 228,
	201, -134, -137, -64, -64, -121, -64, -64, 273, -85,
	104, -40, 102, -95, 51, -96, -73, -75, -74, -194,
	-2, -91, -125, -94, -85, -100, -40, -40, -40, 53,
	-40, -194, -194, -194, -195, 54, -85, -58, 245, 249,
	250, -168, -169, -172, -171, -120, 57, 57, -150, 51,
	-189, 63, 64, 72, 252, 69, 55, -152, -152, 57,
	131, 55, 54, 55, 54, 55, 54, -54, 54, 105,
	-132, -120, -132, -120, -54, -132, -120, -189, -40, -186,
	-58, -42, -195, -64, -195, -147, -147, -147, -156, -147,
	189, -147, 189, -194, -195, -195, -195, 54, 19, -195,
	54, 19, -194, -35, 271, -40, -185, 280, 27, -95,
	54, -195, -195, -195, 54, 133, -195, -89, -92, -120,
	-92, -92, -92, -130, -120, -89, 55, 54, -147, -158,
	225, 9, -151, -189, -151, 63, 63, -133, -178, -169,
	53, 26, -83, 13, -151, 57, 63, -64, -64, -64,
	-64, -64, -195, -189, 122, -72, 28, -75, 33, -2,
	-194, -125, -125, 54, 55, -195, -195, -195, -57, -174,
	-173, 52, 156, 68, -171, -159, 150, 28, 149, 252,
	-152, -152, 55, 55, -92, -194, -84, 14, 16, -195,
	-195, -195, -195, -195, -34, 115, 276, 9, -73, -2,
	133, -120, -173, 57, -164, 105, -189, -149, 68, 28,
	28, 55, -175, -176, 166, -40, -72, -195, 274, 48,
	277, -96, -195, -125, 63, -189, -182, -195, 54, -120,
	38, 275, 278, -180, -176, 33, 38, 168, 276, 169,
	277, -194, 278, -64, 165, -195, -195,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 547, 0, 301, 301, 301, 301,
	301, 301, 0, 620, 603, 0, 0, 0, 0, -2,
	277, 278, 0, 280, 281, 847, 847, 847, 847, 847,
	0, 0, 0, 0, 37, 38, 845, 1, 3, 555,
	0, 0, 305, 308, 303, 0, 603, 0, 0, 0,
	64, 0, 0, 832, 0, 833, 601, 601, 601, 621,
	622, 625, 626, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	834, 835, 836, 837, 838, 839, 840, 841, 0, 0,
	604, 0, 599, 0, 599, 599, 599, 0, 235, 377,
	629, 630, 832, 833, 0, 0, 0, 0, 848, 848,
	848, 848, 0, 848, 0, 265, 254, 256, 257, 258,
	259, 848, 274, 275, 264, 276, 279, 282, 283, 284,
	285, 286, 0, 0, 297, 30, 559, 0, 0, 547,
	32, 0, 301, 306, 307, 311, 309, 310, 302, 0,
	319, 323, 0, 385, 0, 390, 392, -2, -2, 0,
	427, 428, 429, 430, 431, 0, 0, 0, 0, 0,
	0, 453, 454, 455, 456, 457, 458, 523, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 394,
	395, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 0, 487, 487, 487, 487, 487, 487,
	487, 487, 0, 0, 0, 0, 0, 0, 333, 335,
	336, 337, 356, 0, 358, 0, 0, 45, 49, 0,
	823, 586, -2, -2, 0, 0, 627, 628, -2, 752,
	-2, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 0, 81, 0, 0, 848, 0, 71,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 236, 848, 848, 848, 848,
	848, 848, 848, 848, 245, 849, 850, 246, 247, 248,
	848, 848, 250, 0, 0, 266, 0, 260, 287, 0,
	0, 0, 0, 31, 846, 25, 0, 0, 556, 0,
	548, 549, 552, 555, 30, 308, 0, 313, 312, 304,
	0, 320, 0, 0, 0, 324, 0, 330, 326, 327,
	328, 329, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 413, 414, 415, 416, 417, 418,
	391, 0, 405, 0, 0, 0, 537, 538, 447, 448,
	449, 450, 451, 452, 315, 30, 0, 425, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	515, 0, 479, 0, 480, 481, 482, 483, 484, 485,
	486, 0, 315, 0, 0, 47, 0, 376, 0, 0,
	0, 0, 0, 0, 365, 0, 0, 368, 0, 0,
	0, 0, 357, 0, 0, 379, 796, 359, 0, 361,
	362, 363, 364, -2, 0, 0, 0, 43, 44, 0,
	50, 823, 52, 53, 0, 0, 0, 165, 594, 595,
	596, 842, 843, 844, 592, 194, 0, 148, 144, 88,
	89, 90, 91, 137, 94, 137, 137, 137, 137, 162,
	162, 162, 162, 120, 121, 122, 123, 124, 0, 0,
	107, 137, 137, 137, 111, 127, 128, 129, 130, 131,
	132, 133, 134, 92, 95, 96, 97, 98, 99, 100,
	101, 139, 139, 139, 141, 141, 623, 66, 0, 74,
	0, 848, 0, 848, 79, 0, 210, 0, 229, 600,
	0, 848, 232, 233, 378, 631, 632, 237, 238, 239,
	240, 241, 242, 243, 244, 249, 253, 251, 267, 261,
	262, 255, 288, 291, 292, 293, 294, 295, 296, 289,
	0, 85, 298, 299, 560, 0, 0, 0, 0, 0,
	551, 553, 554, 559, 33, 311, 0, 540, 0, 0,
	0, 314, 28, 386, 387, 389, 406, 0, 408, 410,
	325, 321, 0, 524, -2, 396, 397, 421, 422, 423,
	0, 0, 0, 0, 419, 401, 0, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 446,
	498, 499, 0, 444, 445, 539, 0, 0, 316, 317,
	424, 0, 578, 30, 460, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 0, 521, 518, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 375, 383, 583,
	0, 334, 352, 354, 0, 349, 366, 367, 369, 0,
	371, 0, 373, 374, 338, 339, 340, 0, 0, 0,
	0, 360, 383, 0, 383, 46, 587, 51, 0, 0,
	56, 57, 588, 589, 590, 0, 80, 195, 197, 200,
	201, 202, 82, 83, 0, 0, 0, 0, 0, 189,
	190, 151, 149, 0, 146, 145, 93, 0, 162, 162,
	114, 115, 165, 0, 165, 165, 165, 0, 0, 108,
	109, 110, 102, 0, 103, 104, 105, 0, 106, 0,
	0, 848, 68, 0, 72, 73, 69, 602, 70, 847,
	0, 0, 615, 211, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 0, 228, 848, 231, 270, 0,
	0, 0, 0, 0, 0, 557, 558, 0, 550, 26,
	0, 597, 598, 541, 542, 331, 407, 409, 411, 0,
	315, 398, 419, 402, 0, 399, 0, 0, 393, 461,
	0, 0, 426, -2, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 519, 0, 0,
	478, 489, 490, 491, 492, 572, 0, 0, -2, 0,
	36, 0, 547, 0, 0, 0, 346, 353, 0, 0,
	347, 0, 348, 370, 372, 0, 0, 0, 0, 344,
	547, 383, 42, 54, 55, 0, 0, 61, 166, 167,
	0, 198, 0, 0, 184, 0, 0, 187, 188, 158,
	0, 150, 87, 147, 0, 165, 165, 116, 0, 117,
	118, 119, 0, 135, 0, 0, 0, 0, 624, 67,
	75, 76, 0, 203, 847, 0, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 847, 0, 0,
	847, 616, 617, 618, 619, 0, 230, 252, 0, 0,
	268, 269, 86, 0, 300, 561, 0, 27, 383, 0,
	322, 525, 0, 400, 0, 420, 403, 462, 318, 0,
	137, 137, 503, 137, 141, 506, 137, 508, 137, 511,
	0, 0, 0, 0, 0, 524, 0, 0, 0, 516,
	477, 522, 0, 580, 0, 572, 562, 574, 576, 0,
	30, 0, 568, 0, 555, 584, 384, 585, 350, 0,
	355, 0, 0, 0, 358, 0, 555, 41, 58, 59,
	60, 196, 199, 0, 191, 137, 185, 186, 160, 0,
	152, 153, 154, 155, 156, 157, 138, 112, 113, 163,
	164, 162, 0, 162, 0, 142, 0, 848, 0, 0,
	204, 0, 205, 207, 208, 209, 0, 271, 272, 290,
	543, 332, 463, 404, 466, 500, 162, 504, 505, 507,
	509, 510, 512, 0, 468, 467, 469, 0, 0, 472,
	0, 0, 0, 0, 0, 520, 34, 0, 0, 35,
	0, 577, -2, 0, 0, 0, 48, 39, 0, 342,
	0, 0, 0, 379, 345, 40, 176, 0, 193, 168,
	161, 0, 165, 136, 165, 0, 0, 65, 77, 78,
	0, 0, 545, 0, 501, 502, 0, 0, 0, 0,
	0, 493, 476, 517, 581, 582, 0, 575, 0, -2,
	0, 570, 569, 0, 351, 380, 381, 382, 341, 175,
	177, 0, 182, 0, 192, 173, 0, 170, 172, 159,
	125, 126, 140, 143, 0, 0, 29, 0, 0, 513,
	470, 471, 473, 474, 0, 0, 0, 0, 565, 30,
	0, 343, 178, 179, 0, 183, 181, 84, 0, 169,
	171, 71, 0, 224, 0, 546, 544, 475, 0, 0,
	0, 573, -2, 571, 180, 174, 74, 223, 0, 0,
	494, 0, 497, 206, 225, 0, 495, 0, 0, 0,
	0, 0, 496, 0, 0, 226, 227,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 98, 3, 3, 3, 125, 117, 3,
	53, 55, 122, 120, 54, 121, 133, 123, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 281,
	106, 105, 107, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 127, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 128,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 99, 100, 101, 102, 103, 104, 108,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 124,
	126, 129, 130, 131, 132, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:446
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:485
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:489
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:555
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:570
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:575
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:579
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:591
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:595
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:604
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:615
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:620
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:637
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:643
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:650
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:672
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnTypes = ColumnTypes{yyDollar[1].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnTypes = append(yyDollar[1].columnTypes, yyDollar[3].columnType)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:910
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:915
		{
			yyVAL.optVal = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:936
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:946
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:990
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:994
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:998
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = yyDollar[1].colIdent.String()

		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = defaultDialect.QuoteHandler().WrapStringLiteral(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1262
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1267
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1327
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1335
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1340
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1434
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.str = "extended "
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = "full "
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.showFilter = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.str = SessionStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.str = GlobalStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.statement = &Begin{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.statement = &Commit{}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.statement = &Rollback{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.statement = &OtherRead{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, ColumnTypes: yyDollar[4].columnTypes, PreparedStatementQuery: yyDollar[7].preparedQuery}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1684
		{
			setAllowComments(yylex, true)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.bytes2 = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = UnionStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = UnionAllStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.str = UnionDistinctStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = SQLCacheStr
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.str = DistinctStr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.str = StraightJoinHint
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.selectExprs = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '`')
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '"')
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(string(yyDollar[1].bytes), '\'')
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.str = JoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = JoinStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = JoinStr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = StraightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.str = LeftJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.str = LeftJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.str = RightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.str = RightJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = NaturalJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2007
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.indexHints = nil
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.str = IsNullStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = IsNotNullStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = IsTrueStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.str = IsNotTrueStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = IsFalseStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.str = IsNotFalseStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.str = EqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.str = LessThanStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.str = GreaterThanStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.str = LessEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.str = GreaterEqualStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.str = NotEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2339
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = yyDollar[1].intervalExpr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			if yylex.(*Tokenizer).IsMySQL() {
				yylex.Error("MySQL don't support PostgreSQL syntax of interval expression")
				return 1
			}
			// Postgresql type of interval where interval value is string with values+units
			yyVAL.intervalExpr = &IntervalExpr{Expr: NewStrVal(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2394
		{
			if yylex.(*Tokenizer).IsPostgreSQL() {
				yylex.Error("PostgreSQL don't support Mysql syntax of interval expression")
				return 1
			}
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.intervalExpr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: string(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.str = BooleanModeStr
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.str = QueryExpansionStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.str = string("")
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2666
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			val, err := NewMySQLDoubleQuotedStrVal(yyDollar[1].bytes)
			if err != nil {
				yylex.Error("dialect don't allow to use double quotes for string literals. " + err.Error())
				return 1
			}
			yyVAL.expr = val
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2744
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.expr = &NullVal{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2756
		{
			result, err := NewDollarExpr(string(yyDollar[1].bytes))
			if err != nil {
				yylex.Error("syntax error")
				return 1
			}
			yyVAL.expr = result
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.bytes = append(yyDollar[1].bytes, yyDollar[2].bytes...)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.exprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.orderBy = nil
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.str = AscScr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.str = AscScr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.str = DescScr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.limit = nil
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.str = ForUpdateStr
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.str = ShareModeStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2904
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2917
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.updateExprs = nil
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2977
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.returning = nil
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3003
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.bytes = []byte("charset")
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.expr = &Default{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.byt = 0
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.byt = 1
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.str = ""
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.str = IgnoreStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3092
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3404
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3413
		{
			decNesting(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3418
		{
			forceEOF(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3423
		{
			forceEOF(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3427
		{
			forceEOF(yylex)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3431
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
